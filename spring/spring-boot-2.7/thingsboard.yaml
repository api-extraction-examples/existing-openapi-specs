openapi: 3.0.3
info:
  title: ThingsBoard REST API
  description: ' ThingsBoard open-source IoT platform REST API documentation.'
  contact:
    name: ThingsBoard team
    url: https://thingsboard.io
    email: info@thingsboard.io
  license:
    name: Apache License Version 2.0
    url: https://github.com/thingsboard/thingsboard/blob/master/LICENSE
  version: 3.6.2-SNAPSHOT
servers:
  - url: https://demo.thingsboard.io:443
    description: Inferred Url
tags:
  - name: admin-controller
    description: Admin Controller
  - name: alarm-comment-controller
    description: Alarm Comment Controller
  - name: alarm-controller
    description: Alarm Controller
  - name: asset-controller
    description: Asset Controller
  - name: asset-profile-controller
    description: Asset Profile Controller
  - name: audit-log-controller
    description: Audit Log Controller
  - name: auth-controller
    description: Auth Controller
  - name: component-descriptor-controller
    description: Component Descriptor Controller
  - name: customer-controller
    description: Customer Controller
  - name: dashboard-controller
    description: Dashboard Controller
  - name: device-connectivity-controller
    description: Device Connectivity Controller
  - name: device-controller
    description: Device Controller
  - name: device-profile-controller
    description: Device Profile Controller
  - name: edge-controller
    description: Edge Controller
  - name: edge-event-controller
    description: Edge Event Controller
  - name: entities-version-control-controller
    description: Entities Version Control Controller
  - name: entity-query-controller
    description: Entity Query Controller
  - name: entity-relation-controller
    description: Entity Relation Controller
  - name: entity-view-controller
    description: Entity View Controller
  - name: event-controller
    description: Event Controller
  - name: image-controller
    description: Image Controller
  - name: login-endpoint
    description: Login Endpoint
  - name: lwm-2m-controller
    description: Lwm 2m Controller
  - name: mail-config-template-controller
    description: Mail Config Template Controller
  - name: notification-controller
    description: Notification Controller
  - name: notification-rule-controller
    description: Notification Rule Controller
  - name: notification-target-controller
    description: Notification Target Controller
  - name: notification-template-controller
    description: Notification Template Controller
  - name: o-auth-2-config-template-controller
    description: O Auth 2 Config Template Controller
  - name: o-auth-2-controller
    description: O Auth 2 Controller
  - name: ota-package-controller
    description: Ota Package Controller
  - name: queue-controller
    description: Queue Controller
  - name: rpc-v-1-controller
    description: Rpc V 1 Controller
  - name: rpc-v-2-controller
    description: Rpc V 2 Controller
  - name: rule-chain-controller
    description: Rule Chain Controller
  - name: sign-up-controller
    description: Sign Up Controller
  - name: tb-resource-controller
    description: Tb Resource Controller
  - name: telemetry-controller
    description: Telemetry Controller
  - name: tenant-controller
    description: Tenant Controller
  - name: tenant-profile-controller
    description: Tenant Profile Controller
  - name: two-factor-auth-config-controller
    description: Two Factor Auth Config Controller
  - name: two-factor-auth-controller
    description: Two Factor Auth Controller
  - name: ui-settings-controller
    description: Ui Settings Controller
  - name: usage-info-controller
    description: Usage Info Controller
  - name: user-controller
    description: User Controller
  - name: widget-type-controller
    description: Widget Type Controller
  - name: widgets-bundle-controller
    description: Widgets Bundle Controller
paths:
  /api/admin/autoCommitSettings:
    get:
      tags:
        - admin-controller
      summary: Get auto commit settings (getAutoCommitSettings)
      description: |-
        Get the auto commit settings object. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getAutoCommitSettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/AutoVersionCreateConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - admin-controller
      summary: Creates or Updates the auto commit settings (saveAutoCommitSettings)
      description: |-
        Creates or Updates the auto commit settings object. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveAutoCommitSettingsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/AutoVersionCreateConfig'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/AutoVersionCreateConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - admin-controller
      summary: Delete auto commit settings (deleteAutoCommitSettings)
      description: |-
        Deletes the auto commit settings.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteAutoCommitSettingsUsingDELETE
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/autoCommitSettings/exists:
    get:
      tags:
        - admin-controller
      summary: Check auto commit settings exists (autoCommitSettingsExists)
      description: |-
        Check whether the auto commit settings exists. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: autoCommitSettingsExistsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/featuresInfo:
    get:
      tags:
        - admin-controller
      summary: Get features info (getFeaturesInfo)
      description: |-
        Get information about enabled/disabled features. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getFeaturesInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/jwtSettings:
    get:
      tags:
        - admin-controller
      summary: Get the JWT Settings object (getJwtSettings)
      description: |-
        Get the JWT Settings object that contains JWT token policy, etc. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getJwtSettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT Settings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - admin-controller
      summary: Update JWT Settings (saveJwtSettings)
      description: |-
        Updates the JWT Settings object that contains JWT token policy, etc. The tokenSigningKey field is a Base64 encoded string.

        Available for users with 'SYS_ADMIN' authority.
      operationId: saveJwtSettingsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWT Settings'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT Pair'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/mail/oauth2/authorize:
    get:
      tags:
        - admin-controller
      summary: 'Redirect user to mail provider login page. '
      description: After user logged in and provided accessprovider sends authorization code to specified redirect uri.)
      operationId: getAuthorizationUrlUsingGET
      responses:
        '200':
          description: OK
          content:
            application/text:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/mail/oauth2/code:
    get:
      tags:
        - admin-controller
      summary: codeProcessingUrl
      operationId: codeProcessingUrlUsingGET
      parameters:
        - name: code
          in: query
          description: code
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: state
          in: query
          description: state
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/mail/oauth2/loginProcessingUrl:
    get:
      tags:
        - admin-controller
      summary: Get OAuth2 log in processing URL (getMailProcessingUrl)
      description: |-
        Returns the URL enclosed in double quotes. After successful authentication with OAuth2 provider and user consent for requested scope, it makes a redirect to this path so that the platform can do further log in processing and generating access tokens. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getMailProcessingUrlUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/repositorySettings:
    get:
      tags:
        - admin-controller
      summary: Get repository settings (getRepositorySettings)
      description: |-
        Get the repository settings object. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getRepositorySettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - admin-controller
      summary: Creates or Updates the repository settings (saveRepositorySettings)
      description: |-
        Creates or Updates the repository settings object. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveRepositorySettingsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositorySettings'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«RepositorySettings»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - admin-controller
      summary: Delete repository settings (deleteRepositorySettings)
      description: |-
        Deletes the repository settings.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteRepositorySettingsUsingDELETE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«Void»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/repositorySettings/checkAccess:
    post:
      tags:
        - admin-controller
      summary: Check repository access (checkRepositoryAccess)
      description: |-
        Attempts to check repository access. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: checkRepositoryAccessUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositorySettings'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«Void»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/repositorySettings/exists:
    get:
      tags:
        - admin-controller
      summary: Check repository settings exists (repositorySettingsExists)
      description: |-
        Check whether the repository settings exists. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: repositorySettingsExistsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/repositorySettings/info:
    get:
      tags:
        - admin-controller
      summary: getRepositorySettingsInfo
      operationId: getRepositorySettingsInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySettingsInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/securitySettings:
    get:
      tags:
        - admin-controller
      summary: Get the Security Settings object
      description: |-
        Get the Security Settings object that contains password policy, etc.

        Available for users with 'SYS_ADMIN' authority.
      operationId: getSecuritySettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecuritySettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - admin-controller
      summary: Update Security Settings (saveSecuritySettings)
      description: |-
        Updates the Security Settings object that contains password policy, etc.

        Available for users with 'SYS_ADMIN' authority.
      operationId: saveSecuritySettingsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecuritySettings'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecuritySettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/settings:
    post:
      tags:
        - admin-controller
      summary: Get the Administration Settings object using key (getAdminSettings)
      description: |-
        Creates or Updates the Administration Settings. Platform generates random Administration Settings Id during settings creation. The Administration Settings Id will be present in the response. Specify the Administration Settings Id when you would like to update the Administration Settings. Referencing non-existing Administration Settings Id will cause an error.

        Available for users with 'SYS_ADMIN' authority.
      operationId: saveAdminSettingsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSettings'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/settings/testMail:
    post:
      tags:
        - admin-controller
      summary: Send test email (sendTestMail)
      description: |-
        Attempts to send test email to the System Administrator User using Mail Settings provided as a parameter. You may change the 'To' email in the user profile of the System Administrator. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: sendTestMailUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSettings'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/settings/testSms:
    post:
      tags:
        - admin-controller
      summary: Send test sms (sendTestMail)
      description: |-
        Attempts to send test sms to the System Administrator User using SMS Settings and phone number provided as a parameters of the request. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: sendTestSmsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSmsRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/settings/{key}:
    get:
      tags:
        - admin-controller
      summary: Get the Administration Settings object using key (getAdminSettings)
      description: |-
        Get the Administration Settings object using specified string key. Referencing non-existing key will cause an error.

        Available for users with 'SYS_ADMIN' authority.
      operationId: getAdminSettingsUsingGET
      parameters:
        - name: key
          in: path
          description: A string value of the key (e.g. 'general' or 'mail').
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/systemInfo:
    get:
      tags:
        - admin-controller
      summary: Get system info (getSystemInfo)
      description: |-
        Get main information about system. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getSystemInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/admin/updates:
    get:
      tags:
        - admin-controller
      summary: Check for new Platform Releases (checkUpdates)
      description: |-
        Check notifications about new platform releases. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: checkUpdatesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/auth/login:
    post:
      tags:
        - login-endpoint
      summary: Login method to get user JWT token data
      description: |-
        Login method used to authenticate user and get JWT token data.

        Value of the response **token** field can be used as **X-Authorization** header value:

        `X-Authorization: Bearer $JWT_TOKEN_VALUE`.
      operationId: loginPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                account-disabled:
                  summary: Disabled account
                  value:
                    status: 401
                    message: User account is not active
                    errorCode: 10
                    timestamp: '2023-12-28T09:17:08.717+00:00'
                account-locked:
                  summary: Locked account
                  value:
                    status: 401
                    message: User account is locked due to security policy
                    errorCode: 10
                    timestamp: '2023-12-28T09:17:08.717+00:00'
                authentication-failed:
                  summary: General authentication error
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:17:08.717+00:00'
                bad-credentials:
                  summary: Bad credentials
                  value:
                    status: 401
                    message: Invalid username or password
                    errorCode: 10
                    timestamp: '2023-12-28T09:17:08.717+00:00'
                token-expired:
                  summary: JWT token expired
                  value:
                    status: 401
                    message: Token has expired
                    errorCode: 11
                    timestamp: '2023-12-28T09:17:08.717+00:00'
        '401 ':
          description: Unauthorized (**Expired credentials**)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardCredentialsExpiredResponse'
              examples:
                credentials-expired:
                  summary: Expired credentials
                  value:
                    status: 401
                    message: User password expired!
                    errorCode: 15
                    timestamp: '2023-12-28T09:17:08.742+00:00'
                    resetToken: KFDDAop3elh9io3ewlaicdWarye5pZ
  /api/alarm/{alarmId}/comment:
    get:
      tags:
        - alarm-comment-controller
      summary: Get Alarm comments (getAlarmComments)
      description: |-
        Returns a page of alarm comments for specified alarm. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAlarmCommentsUsingGET
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - id
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AlarmCommentInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - alarm-comment-controller
      summary: 'Create or update Alarm Comment '
      description: |-
        Creates or Updates the Alarm Comment. When creating comment, platform generates Alarm Comment Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Alarm Comment id will be present in the response. Specify existing Alarm Comment id to update the alarm. Referencing non-existing Alarm Comment Id will cause 'Not Found' error. 

         To create new Alarm comment entity it is enough to specify 'comment' json element with 'text' node, for example: {"comment": { "text": "my comment"}}. 

         If comment type is not specified the default value 'OTHER' will be saved. If 'alarmId' or 'userId' specified in body it will be ignored.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveAlarmCommentUsingPOST
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlarmComment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmComment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/{alarmId}/comment/{commentId}:
    delete:
      tags:
        - alarm-comment-controller
      summary: Delete Alarm comment (deleteAlarmComment)
      description: |-
        Deletes the Alarm comment. Referencing non-existing Alarm comment Id will cause an error.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: deleteAlarmCommentUsingDELETE
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: commentId
          in: path
          description: A string value representing the alarm comment id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm:
    post:
      tags:
        - alarm-controller
      summary: Create or Update Alarm (saveAlarm)
      description: |-
        Creates or Updates the Alarm. When creating alarm, platform generates Alarm Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Alarm id will be present in the response. Specify existing Alarm id to update the alarm. Referencing non-existing Alarm Id will cause 'Not Found' error. 

        Platform also deduplicate the alarms based on the entity id of originator and alarm 'type'. For example, if the user or system component create the alarm with the type 'HighTemperature' for device 'Device A' the new active alarm is created. If the user tries to create 'HighTemperature' alarm for the same device again, the previous alarm will be updated (the 'end_ts' will be set to current timestamp). If the user clears the alarm (see 'Clear Alarm(clearAlarm)'), than new alarm with the same type and same device may be created. Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new Alarm entity. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveAlarmUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alarm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alarm'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/highestSeverity/{entityType}/{entityId}:
    get:
      tags:
        - alarm-controller
      summary: Get Highest Alarm Severity (getHighestAlarmSeverity)
      description: |-
        Search the alarms by originator ('entityType' and entityId') and optional 'status' or 'searchStatus' filters and returns the highest AlarmSeverity(CRITICAL, MAJOR, MINOR, WARNING or INDETERMINATE). Specifying both parameters 'searchStatus' and 'status' at the same time will cause an error.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getHighestAlarmSeverityUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: searchStatus
          in: query
          description: A string value representing one of the AlarmSearchStatus enumeration value
          required: false
          style: form
          schema:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
        - name: status
          in: query
          description: A string value representing one of the AlarmStatus enumeration value
          required: false
          style: form
          schema:
            type: string
            enum:
              - ACTIVE_ACK
              - ACTIVE_UNACK
              - CLEARED_ACK
              - CLEARED_UNACK
        - name: assigneeId
          in: query
          description: A string value representing the assignee user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                enum:
                  - CRITICAL
                  - INDETERMINATE
                  - MAJOR
                  - MINOR
                  - WARNING
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/info/{alarmId}:
    get:
      tags:
        - alarm-controller
      summary: Get Alarm Info (getAlarmInfoById)
      description: |-
        Fetch the Alarm Info object based on the provided Alarm Id. If the user has the authority of 'Tenant Administrator', the server checks that the originator of alarm is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the originator of alarm belongs to the customer. Alarm Info is an extension of the default Alarm object that also contains name of the alarm originator.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAlarmInfoByIdUsingGET
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/types:
    get:
      tags:
        - alarm-controller
      summary: Get Alarm Types (getAlarmTypes)
      description: Returns a set of unique alarm types based on alarms that are either owned by the tenant or assigned to the customer which user is performing the request.
      operationId: getAlarmTypesUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: 'The case insensitive ''substring'' filter based on of next alarm fields: type, severity or status'
          required: false
          style: form
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EntitySubtype»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/{alarmId}:
    get:
      tags:
        - alarm-controller
      summary: Get Alarm (getAlarmById)
      description: 'Fetch the Alarm object based on the provided Alarm Id. If the user has the authority of ''Tenant Administrator'', the server checks that the originator of alarm is owned by the same tenant. If the user has the authority of ''Customer User'', the server checks that the originator of alarm belongs to the customer. '
      operationId: getAlarmByIdUsingGET
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alarm'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - alarm-controller
      summary: Delete Alarm (deleteAlarm)
      description: |-
        Deletes the Alarm. Referencing non-existing Alarm Id will cause an error.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: deleteAlarmUsingDELETE
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/{alarmId}/ack:
    post:
      tags:
        - alarm-controller
      summary: Acknowledge Alarm (ackAlarm)
      description: |-
        Acknowledge the Alarm. Once acknowledged, the 'ack_ts' field will be set to current timestamp and special rule chain event 'ALARM_ACK' will be generated. Referencing non-existing Alarm Id will cause an error.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: ackAlarmUsingPOST
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/{alarmId}/assign:
    delete:
      tags:
        - alarm-controller
      summary: Unassign Alarm (unassignAlarm)
      description: |-
        Unassign the Alarm. Once unassigned, the 'assign_ts' field will be set to current timestamp and special rule chain event 'ALARM_UNASSIGNED' will be generated. Referencing non-existing Alarm Id will cause an error.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: unassignAlarmUsingDELETE
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alarm'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/{alarmId}/assign/{assigneeId}:
    post:
      tags:
        - alarm-controller
      summary: Assign/Reassign Alarm (assignAlarm)
      description: |-
        Assign the Alarm. Once assigned, the 'assign_ts' field will be set to current timestamp and special rule chain event 'ALARM_ASSIGNED' (or ALARM_REASSIGNED in case of assigning already assigned alarm) will be generated. Referencing non-existing Alarm Id will cause an error.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: assignAlarmUsingPOST
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: assigneeId
          in: path
          description: A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alarm'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/{alarmId}/clear:
    post:
      tags:
        - alarm-controller
      summary: Clear Alarm (clearAlarm)
      description: |-
        Clear the Alarm. Once cleared, the 'clear_ts' field will be set to current timestamp and special rule chain event 'ALARM_CLEAR' will be generated. Referencing non-existing Alarm Id will cause an error.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: clearAlarmUsingPOST
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarm/{entityType}/{entityId}:
    get:
      tags:
        - alarm-controller
      summary: Get Alarms (getAlarms)
      description: |-
        Returns a page of alarms for the selected entity. Specifying both parameters 'searchStatus' and 'status' at the same time will cause an error. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAlarmsUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: searchStatus
          in: query
          description: A string value representing one of the AlarmSearchStatus enumeration value
          required: false
          style: form
          schema:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
        - name: status
          in: query
          description: A string value representing one of the AlarmStatus enumeration value
          required: false
          style: form
          schema:
            type: string
            enum:
              - ACTIVE_ACK
              - ACTIVE_UNACK
              - CLEARED_ACK
              - CLEARED_UNACK
        - name: assigneeId
          in: query
          description: A string value representing the assignee user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: 'The case insensitive ''substring'' filter based on of next alarm fields: type, severity or status'
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - ackTs
              - clearTs
              - createdTime
              - endTs
              - severity
              - startTs
              - status
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: 'The start timestamp in milliseconds of the search time range over the Alarm class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: 'The end timestamp in milliseconds of the search time range over the Alarm class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: fetchOriginator
          in: query
          description: 'A boolean value to specify if the alarm originator name will be filled in the AlarmInfo object  field: ''originatorName'' or will returns as null.'
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AlarmInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarms:
    get:
      tags:
        - alarm-controller
      summary: Get All Alarms (getAllAlarms)
      description: |-
        Returns a page of alarms that belongs to the current user owner. If the user has the authority of 'Tenant Administrator', the server returns alarms that belongs to the tenant of current user. If the user has the authority of 'Customer User', the server returns alarms that belongs to the customer of current user. Specifying both parameters 'searchStatus' and 'status' at the same time will cause an error. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAllAlarmsUsingGET
      parameters:
        - name: searchStatus
          in: query
          description: A string value representing one of the AlarmSearchStatus enumeration value
          required: false
          style: form
          schema:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
        - name: status
          in: query
          description: A string value representing one of the AlarmStatus enumeration value
          required: false
          style: form
          schema:
            type: string
            enum:
              - ACTIVE_ACK
              - ACTIVE_UNACK
              - CLEARED_ACK
              - CLEARED_UNACK
        - name: assigneeId
          in: query
          description: A string value representing the assignee user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: 'The case insensitive ''substring'' filter based on of next alarm fields: type, severity or status'
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - ackTs
              - clearTs
              - createdTime
              - endTs
              - severity
              - startTs
              - status
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: 'The start timestamp in milliseconds of the search time range over the Alarm class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: 'The end timestamp in milliseconds of the search time range over the Alarm class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: fetchOriginator
          in: query
          description: 'A boolean value to specify if the alarm originator name will be filled in the AlarmInfo object  field: ''originatorName'' or will returns as null.'
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AlarmInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/v2/alarm/{entityType}/{entityId}:
    get:
      tags:
        - alarm-controller
      summary: Get Alarms (getAlarmsV2)
      description: |-
        Returns a page of alarms for the selected entity. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAlarmsV2UsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: statusList
          in: query
          description: A list of string values separated by comma ',' representing one of the AlarmSearchStatus enumeration value
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
        - name: severityList
          in: query
          description: A list of string values separated by comma ',' representing one of the AlarmSeverity enumeration value
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - CRITICAL
              - INDETERMINATE
              - MAJOR
              - MINOR
              - WARNING
        - name: typeList
          in: query
          description: A list of string values separated by comma ',' representing alarm types
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: assigneeId
          in: query
          description: A string value representing the assignee user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: 'The case insensitive ''substring'' filter based on of next alarm fields: type, severity or status'
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - ackTs
              - clearTs
              - createdTime
              - endTs
              - severity
              - startTs
              - status
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: 'The start timestamp in milliseconds of the search time range over the Alarm class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: 'The end timestamp in milliseconds of the search time range over the Alarm class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AlarmInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/v2/alarms:
    get:
      tags:
        - alarm-controller
      summary: Get All Alarms (getAllAlarmsV2)
      description: |-
        Returns a page of alarms that belongs to the current user owner. If the user has the authority of 'Tenant Administrator', the server returns alarms that belongs to the tenant of current user. If the user has the authority of 'Customer User', the server returns alarms that belongs to the customer of current user. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAllAlarmsV2UsingGET
      parameters:
        - name: statusList
          in: query
          description: A list of string values separated by comma ',' representing one of the AlarmSearchStatus enumeration value
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
        - name: severityList
          in: query
          description: A list of string values separated by comma ',' representing one of the AlarmSeverity enumeration value
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - CRITICAL
              - INDETERMINATE
              - MAJOR
              - MINOR
              - WARNING
        - name: typeList
          in: query
          description: A list of string values separated by comma ',' representing alarm types
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: assigneeId
          in: query
          description: A string value representing the assignee user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: 'The case insensitive ''substring'' filter based on of next alarm fields: type, severity or status'
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - ackTs
              - clearTs
              - createdTime
              - endTs
              - severity
              - startTs
              - status
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: 'The start timestamp in milliseconds of the search time range over the Alarm class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: 'The end timestamp in milliseconds of the search time range over the Alarm class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AlarmInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/asset:
    post:
      tags:
        - asset-controller
      summary: Create Or Update Asset (saveAsset)
      description: |-
        Creates or Updates the Asset. When creating asset, platform generates Asset Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Asset id will be present in the response. Specify existing Asset id to update the asset. Referencing non-existing Asset Id will cause 'Not Found' error. Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new Asset entity. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveAssetUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/asset/bulk_import:
    post:
      tags:
        - asset-controller
      summary: Import the bulk of assets (processAssetsBulkImport)
      description: There's an ability to import the bulk of assets using the only .csv file.
      operationId: processAssetsBulkImportUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkImportRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkImportResult«Asset»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/asset/info/{assetId}:
    get:
      tags:
        - asset-controller
      summary: Get Asset Info (getAssetInfoById)
      description: |-
        Fetch the Asset Info object based on the provided Asset Id. If the user has the authority of 'Tenant Administrator', the server checks that the asset is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the asset is assigned to the same customer. Asset Info is an extension of the default Asset object that contains information about the assigned customer name. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAssetInfoByIdUsingGET
      parameters:
        - name: assetId
          in: path
          description: A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/asset/types:
    get:
      tags:
        - asset-controller
      summary: Get Asset Types (getAssetTypes)
      description: |-
        Deprecated. See 'getAssetProfileNames' API from Asset Profile Controller instead.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAssetTypesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitySubtype'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      deprecated: true
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/asset/{assetId}:
    get:
      tags:
        - asset-controller
      summary: Get Asset (getAssetById)
      description: |-
        Fetch the Asset object based on the provided Asset Id. If the user has the authority of 'Tenant Administrator', the server checks that the asset is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the asset is assigned to the same customer.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAssetByIdUsingGET
      parameters:
        - name: assetId
          in: path
          description: A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - asset-controller
      summary: Delete asset (deleteAsset)
      description: |-
        Deletes the asset and all the relations (from and to the asset). Referencing non-existing asset Id will cause an error.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: deleteAssetUsingDELETE
      parameters:
        - name: assetId
          in: path
          description: A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/assets:
    get:
      tags:
        - asset-controller
      summary: Get Assets By Ids (getAssetsByIds)
      description: 'Requested assets must be owned by tenant or assigned to customer which user is performing the request. '
      operationId: getAssetsByIdsUsingGET
      parameters:
        - name: assetIds
          in: query
          description: A list of assets ids, separated by comma ','
          required: true
          style: form
          explode: true
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - asset-controller
      summary: Find related assets (findByQuery)
      description: Returns all assets that are related to the specific entity. The entity id, relation type, asset types, depth of the search, and other query parameters defined using complex 'AssetSearchQuery' object. See 'Model' tab of the Parameters for more info.
      operationId: findByQueryUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetSearchQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/asset/{assetId}:
    delete:
      tags:
        - asset-controller
      summary: Unassign asset from customer (unassignAssetFromCustomer)
      description: |-
        Clears assignment of the asset to customer. Customer will not be able to query asset afterwards.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unassignAssetFromCustomerUsingDELETE
      parameters:
        - name: assetId
          in: path
          description: A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/public/asset/{assetId}:
    post:
      tags:
        - asset-controller
      summary: Make asset publicly available (assignAssetToPublicCustomer)
      description: |-
        Asset will be available for non-authorized (not logged-in) users. This is useful to create dashboards that you plan to share/embed on a publicly available website. However, users that are logged-in and belong to different tenant will not be able to access the asset.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignAssetToPublicCustomerUsingPOST
      parameters:
        - name: assetId
          in: path
          description: A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/asset/{assetId}:
    post:
      tags:
        - asset-controller
      summary: Assign asset to customer (assignAssetToCustomer)
      description: |-
        Creates assignment of the asset to customer. Customer will be able to query asset afterwards.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignAssetToCustomerUsingPOST
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: assetId
          in: path
          description: A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/assetInfos:
    get:
      tags:
        - asset-controller
      summary: Get Customer Asset Infos (getCustomerAssetInfos)
      description: 'Returns a page of assets info objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the ''Model'' tab of the Response Class for more details. Asset Info is an extension of the default Asset object that contains information about the assigned customer name. '
      operationId: getCustomerAssetInfosUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Asset type
          required: false
          style: form
          schema:
            type: string
        - name: assetProfileId
          in: query
          description: A string value representing the asset profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the asset name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AssetInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/assets:
    get:
      tags:
        - asset-controller
      summary: Get Customer Assets (getCustomerAssets)
      description: 'Returns a page of assets objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the ''Model'' tab of the Response Class for more details. '
      operationId: getCustomerAssetsUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Asset type
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the asset name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Asset»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/asset/{assetId}:
    post:
      tags:
        - asset-controller
      summary: Assign asset to edge (assignAssetToEdge)
      description: Creates assignment of an existing asset to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment asset (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once asset will be delivered to edge service, it's going to be available for usage on remote edge instance.
      operationId: assignAssetToEdgeUsingPOST
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: assetId
          in: path
          description: A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - asset-controller
      summary: Unassign asset from edge (unassignAssetFromEdge)
      description: Clears assignment of the asset to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove asset (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove asset locally.
      operationId: unassignAssetFromEdgeUsingDELETE
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: assetId
          in: path
          description: A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/assets:
    get:
      tags:
        - asset-controller
      summary: Get assets assigned to edge (getEdgeAssets)
      description: 'Returns a page of assets assigned to edge. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the ''Model'' tab of the Response Class for more details. '
      operationId: getEdgeAssetsUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Asset type
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the asset name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: Timestamp. Assets with creation time before it won't be queried
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: Timestamp. Assets with creation time after it won't be queried
          required: false
          style: form
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Asset»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/assetInfos:
    get:
      tags:
        - asset-controller
      summary: Get Tenant Asset Infos (getTenantAssetInfos)
      description: |-
        Returns a page of assets info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Asset Info is an extension of the default Asset object that contains information about the assigned customer name. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantAssetInfosUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Asset type
          required: false
          style: form
          schema:
            type: string
        - name: assetProfileId
          in: query
          description: A string value representing the asset profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the asset name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AssetInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/assets:
    get:
      tags:
        - asset-controller
      summary: Get Tenant Assets (getTenantAssets)
      description: |-
        Returns a page of assets owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantAssetsUsingGET
      parameters:
        - name: assetName
          in: query
          description: A string value representing the Asset name.
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Asset type
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the asset name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Asset»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/assetProfile:
    post:
      tags:
        - asset-profile-controller
      summary: Create Or Update Asset Profile (saveAssetProfile)
      description: |-
        Create or update the Asset Profile. When creating asset profile, platform generates asset profile id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created asset profile id will be present in the response. Specify existing asset profile id to update the asset profile. Referencing non-existing asset profile Id will cause 'Not Found' error. 

        Asset profile name is unique in the scope of tenant. Only one 'default' asset profile may exist in scope of tenant. Remove 'id', 'tenantId' from the request body example (below) to create new Asset Profile entity. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveAssetProfileUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetProfile'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProfile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/assetProfile/names:
    get:
      tags:
        - asset-profile-controller
      summary: Get Asset Profile names (getAssetProfileNames)
      description: |-
        Returns a set of unique asset profile names owned by the tenant.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAssetProfileNamesUsingGET
      parameters:
        - name: activeOnly
          in: query
          description: Flag indicating whether to retrieve exclusively the names of asset profiles that are referenced by tenant's assets.
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/assetProfile/{assetProfileId}:
    get:
      tags:
        - asset-profile-controller
      summary: Get Asset Profile (getAssetProfileById)
      description: |-
        Fetch the Asset Profile object based on the provided Asset Profile Id. The server checks that the asset profile is owned by the same tenant. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getAssetProfileByIdUsingGET
      parameters:
        - name: assetProfileId
          in: path
          description: A string value representing the asset profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: inlineImages
          in: query
          description: Inline images as a data URL (Base64)
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProfile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - asset-profile-controller
      summary: Delete asset profile (deleteAssetProfile)
      description: |-
        Deletes the asset profile. Referencing non-existing asset profile Id will cause an error. Can't delete the asset profile if it is referenced by existing assets.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteAssetProfileUsingDELETE
      parameters:
        - name: assetProfileId
          in: path
          description: A string value representing the asset profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/assetProfile/{assetProfileId}/default:
    post:
      tags:
        - asset-profile-controller
      summary: Make Asset Profile Default (setDefaultAssetProfile)
      description: |-
        Marks asset profile as default within a tenant scope.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: setDefaultAssetProfileUsingPOST
      parameters:
        - name: assetProfileId
          in: path
          description: A string value representing the asset profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProfile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/assetProfileInfo/default:
    get:
      tags:
        - asset-profile-controller
      summary: Get Default Asset Profile (getDefaultAssetProfileInfo)
      description: |-
        Fetch the Default Asset Profile Info object. Asset Profile Info is a lightweight object that includes main information about Asset Profile. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDefaultAssetProfileInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProfileInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/assetProfileInfo/{assetProfileId}:
    get:
      tags:
        - asset-profile-controller
      summary: Get Asset Profile Info (getAssetProfileInfoById)
      description: |-
        Fetch the Asset Profile Info object based on the provided Asset Profile Id. Asset Profile Info is a lightweight object that includes main information about Asset Profile. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAssetProfileInfoByIdUsingGET
      parameters:
        - name: assetProfileId
          in: path
          description: A string value representing the asset profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProfileInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/assetProfileInfos:
    get:
      tags:
        - asset-profile-controller
      summary: Get Asset Profile infos (getAssetProfileInfos)
      description: |-
        Returns a page of asset profile info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Asset Profile Info is a lightweight object that includes main information about Asset Profile. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAssetProfileInfosUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the asset profile name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - description
              - isDefault
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AssetProfileInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/assetProfiles:
    get:
      tags:
        - asset-profile-controller
      summary: Get Asset Profiles (getAssetProfiles)
      description: |-
        Returns a page of asset profile objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getAssetProfilesUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the asset profile name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - description
              - isDefault
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AssetProfile»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/audit/logs/customer/{customerId}:
    get:
      tags:
        - audit-log-controller
      summary: Get audit logs by customer id (getAuditLogsByCustomerId)
      description: |-
        Returns a page of audit logs related to the targeted customer entities (devices, assets, etc.), and users actions (login, logout, etc.) that belong to this customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getAuditLogsByCustomerIdUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: 'The case insensitive ''substring'' filter based on one of the next properties: entityType, entityName, userName, actionType, actionStatus.'
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: 'Property of audit log to sort by. See the ''Model'' tab of the Response Class for more details. Note: entityType sort property is not defined in the AuditLog class, however, it can be used to sort audit logs by types of entities that were logged.'
          required: false
          style: form
          schema:
            type: string
            enum:
              - actionStatus
              - actionType
              - createdTime
              - entityName
              - entityType
              - userName
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: 'The start timestamp in milliseconds of the search time range over the AuditLog class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: 'The end timestamp in milliseconds of the search time range over the AuditLog class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: actionTypes
          in: query
          description: A String value representing comma-separated list of action types. This parameter is optional, but it can be used to filter results to fetch only audit logs of specific action types. For example, 'LOGIN', 'LOGOUT'. See the 'Model' tab of the Response Class for more details.
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AuditLog»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/audit/logs/entity/{entityType}/{entityId}:
    get:
      tags:
        - audit-log-controller
      summary: Get audit logs by entity id (getAuditLogsByEntityId)
      description: |-
        Returns a page of audit logs related to the actions on the targeted entity. Basically, this API call is used to get the full lifecycle of some specific entity. For example to see when a device was created, updated, assigned to some customer, or even deleted from the system. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getAuditLogsByEntityIdUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: 'The case insensitive ''substring'' filter based on one of the next properties: entityType, entityName, userName, actionType, actionStatus.'
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: 'Property of audit log to sort by. See the ''Model'' tab of the Response Class for more details. Note: entityType sort property is not defined in the AuditLog class, however, it can be used to sort audit logs by types of entities that were logged.'
          required: false
          style: form
          schema:
            type: string
            enum:
              - actionStatus
              - actionType
              - createdTime
              - entityName
              - entityType
              - userName
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: 'The start timestamp in milliseconds of the search time range over the AuditLog class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: 'The end timestamp in milliseconds of the search time range over the AuditLog class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: actionTypes
          in: query
          description: A String value representing comma-separated list of action types. This parameter is optional, but it can be used to filter results to fetch only audit logs of specific action types. For example, 'LOGIN', 'LOGOUT'. See the 'Model' tab of the Response Class for more details.
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AuditLog»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/audit/logs/user/{userId}:
    get:
      tags:
        - audit-log-controller
      summary: Get audit logs by user id (getAuditLogsByUserId)
      description: |-
        Returns a page of audit logs related to the actions of targeted user. For example, RPC call to a particular device, or alarm acknowledgment for a specific device, etc. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getAuditLogsByUserIdUsingGET
      parameters:
        - name: userId
          in: path
          description: A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: 'The case insensitive ''substring'' filter based on one of the next properties: entityType, entityName, userName, actionType, actionStatus.'
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: 'Property of audit log to sort by. See the ''Model'' tab of the Response Class for more details. Note: entityType sort property is not defined in the AuditLog class, however, it can be used to sort audit logs by types of entities that were logged.'
          required: false
          style: form
          schema:
            type: string
            enum:
              - actionStatus
              - actionType
              - createdTime
              - entityName
              - entityType
              - userName
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: 'The start timestamp in milliseconds of the search time range over the AuditLog class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: 'The end timestamp in milliseconds of the search time range over the AuditLog class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: actionTypes
          in: query
          description: A String value representing comma-separated list of action types. This parameter is optional, but it can be used to filter results to fetch only audit logs of specific action types. For example, 'LOGIN', 'LOGOUT'. See the 'Model' tab of the Response Class for more details.
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AuditLog»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/audit/logs:
    get:
      tags:
        - audit-log-controller
      summary: Get all audit logs (getAuditLogs)
      description: |-
        Returns a page of audit logs related to all entities in the scope of the current user's Tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getAuditLogsUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: 'The case insensitive ''substring'' filter based on one of the next properties: entityType, entityName, userName, actionType, actionStatus.'
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: 'Property of audit log to sort by. See the ''Model'' tab of the Response Class for more details. Note: entityType sort property is not defined in the AuditLog class, however, it can be used to sort audit logs by types of entities that were logged.'
          required: false
          style: form
          schema:
            type: string
            enum:
              - actionStatus
              - actionType
              - createdTime
              - entityName
              - entityType
              - userName
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: 'The start timestamp in milliseconds of the search time range over the AuditLog class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: 'The end timestamp in milliseconds of the search time range over the AuditLog class field: ''createdTime''.'
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: actionTypes
          in: query
          description: A String value representing comma-separated list of action types. This parameter is optional, but it can be used to filter results to fetch only audit logs of specific action types. For example, 'LOGIN', 'LOGOUT'. See the 'Model' tab of the Response Class for more details.
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AuditLog»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/auth/changePassword:
    post:
      tags:
        - auth-controller
      summary: Change password for current User (changePassword)
      description: Change the password for the User which credentials are used to perform this REST API call. Be aware that previously generated [JWT](https://jwt.io/) tokens will be still valid until they expire.
      operationId: changePasswordUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNode'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/auth/logout:
    post:
      tags:
        - auth-controller
      summary: Logout (logout)
      description: 'Special API call to record the ''logout'' of the user to the Audit Logs. Since platform uses [JWT](https://jwt.io/), the actual logout is the procedure of clearing the [JWT](https://jwt.io/) token on the client side. '
      operationId: logoutUsingPOST
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/auth/user:
    get:
      tags:
        - auth-controller
      summary: Get current User (getUser)
      description: Get the information about the User which credentials are used to perform this REST API call.
      operationId: getUserUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/noauth/activate:
    get:
      tags:
        - auth-controller
      summary: Check Activate User Token (checkActivateToken)
      description: Checks the activation token and forwards user to 'Create Password' page. If token is valid, returns '303 See Other' (redirect) response code with the correct address of 'Create Password' page and same 'activateToken' specified in the URL parameters. If token is not valid, returns '409 Conflict'.
      operationId: checkActivateTokenUsingGET
      parameters:
        - name: activateToken
          in: query
          description: The activate token string.
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
    post:
      tags:
        - auth-controller
      summary: Activate User
      description: Checks the activation token and updates corresponding user password in the database. Now the user may start using his password to login. The response already contains the [JWT](https://jwt.io) activation and refresh tokens, to simplify the user activation flow and avoid asking user to input password again after activation. If token is valid, returns the object that contains [JWT](https://jwt.io/) access and refresh tokens. If token is not valid, returns '404 Bad Request'.
      operationId: activateUserUsingPOST
      parameters:
        - name: sendActivationMail
          in: query
          description: sendActivationMail
          required: false
          style: form
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateUserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT Pair'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
  /api/noauth/resetPassword:
    get:
      tags:
        - auth-controller
      summary: Check password reset token (checkResetToken)
      description: Checks the password reset token and forwards user to 'Reset Password' page. If token is valid, returns '303 See Other' (redirect) response code with the correct address of 'Reset Password' page and same 'resetToken' specified in the URL parameters. If token is not valid, returns '409 Conflict'.
      operationId: checkResetTokenUsingGET
      parameters:
        - name: resetToken
          in: query
          description: The reset token string.
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
    post:
      tags:
        - auth-controller
      summary: Reset password (resetPassword)
      description: Checks the password reset token and updates the password. If token is valid, returns the object that contains [JWT](https://jwt.io/) access and refresh tokens. If token is not valid, returns '404 Bad Request'.
      operationId: resetPasswordUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT Pair'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
  /api/noauth/resetPasswordByEmail:
    post:
      tags:
        - auth-controller
      summary: Request reset password email (requestResetPasswordByEmail)
      description: Request to send the reset password email if the user with specified email address is present in the database. Always return '200 OK' status for security purposes.
      operationId: requestResetPasswordByEmailUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordEmailRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
  /api/noauth/userPasswordPolicy:
    get:
      tags:
        - auth-controller
      summary: Get the current User password policy (getUserPasswordPolicy)
      description: API call to get the password policy for the password validation form(s).
      operationId: getUserPasswordPolicyUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPasswordPolicy'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
  /api/component/{componentDescriptorClazz}:
    get:
      tags:
        - component-descriptor-controller
      summary: Get Component Descriptor (getComponentDescriptorByClazz)
      description: |-
        Gets the Component Descriptor object using class name from the path parameters. Each Component Descriptor represents configuration of specific rule node (e.g. 'Save Timeseries' or 'Send Email'.). The Component Descriptors are used by the rule chain Web UI to build the configuration forms for the rule nodes. The Component Descriptors are discovered at runtime by scanning the class path and searching for @RuleNode annotation. Once discovered, the up to date list of descriptors is persisted to the database.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getComponentDescriptorByClazzUsingGET
      parameters:
        - name: componentDescriptorClazz
          in: path
          description: Component Descriptor class name
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDescriptor'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/components/{componentType}:
    get:
      tags:
        - component-descriptor-controller
      summary: Get Component Descriptors (getComponentDescriptorsByType)
      description: |-
        Gets the Component Descriptors using rule node type and optional rule chain type request parameters. Each Component Descriptor represents configuration of specific rule node (e.g. 'Save Timeseries' or 'Send Email'.). The Component Descriptors are used by the rule chain Web UI to build the configuration forms for the rule nodes. The Component Descriptors are discovered at runtime by scanning the class path and searching for @RuleNode annotation. Once discovered, the up to date list of descriptors is persisted to the database.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getComponentDescriptorsByTypeUsingGET
      parameters:
        - name: componentType
          in: path
          description: Type of the Rule Node
          required: true
          style: simple
          schema:
            type: string
            enum:
              - ACTION
              - ENRICHMENT
              - EXTERNAL
              - FILTER
              - TRANSFORMATION
        - name: ruleChainType
          in: query
          description: Type of the Rule Chain
          required: false
          style: form
          schema:
            type: string
            enum:
              - CORE
              - EDGE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentDescriptor'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/components:
    get:
      tags:
        - component-descriptor-controller
      summary: Get Component Descriptors (getComponentDescriptorsByTypes)
      description: |-
        Gets the Component Descriptors using coma separated list of rule node types and optional rule chain type request parameters. Each Component Descriptor represents configuration of specific rule node (e.g. 'Save Timeseries' or 'Send Email'.). The Component Descriptors are used by the rule chain Web UI to build the configuration forms for the rule nodes. The Component Descriptors are discovered at runtime by scanning the class path and searching for @RuleNode annotation. Once discovered, the up to date list of descriptors is persisted to the database.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getComponentDescriptorsByTypesUsingGET
      parameters:
        - name: componentTypes
          in: query
          description: List of types of the Rule Nodes, (ENRICHMENT, FILTER, TRANSFORMATION, ACTION or EXTERNAL)
          required: true
          style: form
          explode: true
          allowReserved: true
          schema:
            type: string
        - name: ruleChainType
          in: query
          description: Type of the Rule Chain
          required: false
          style: form
          schema:
            type: string
            enum:
              - CORE
              - EDGE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentDescriptor'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer:
    post:
      tags:
        - customer-controller
      summary: Create or update Customer (saveCustomer)
      description: |-
        Creates or Updates the Customer. When creating customer, platform generates Customer Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Customer Id will be present in the response. Specify existing Customer Id to update the Customer. Referencing non-existing Customer Id will cause 'Not Found' error.Remove 'id', 'tenantId' from the request body example (below) to create new Customer entity. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveCustomerUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}:
    get:
      tags:
        - customer-controller
      summary: Get Customer (getCustomerById)
      description: |-
        Get the Customer object based on the provided Customer Id. If the user has the authority of 'Tenant Administrator', the server checks that the customer is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the user belongs to the customer.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getCustomerByIdUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - customer-controller
      summary: Delete Customer (deleteCustomer)
      description: |-
        Deletes the Customer and all customer Users. All assigned Dashboards, Assets, Devices, etc. will be unassigned but not deleted. Referencing non-existing Customer Id will cause an error.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteCustomerUsingDELETE
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/shortInfo:
    get:
      tags:
        - customer-controller
      summary: Get short Customer info (getShortCustomerInfoById)
      description: |-
        Get the short customer object that contains only the title and 'isPublic' flag. If the user has the authority of 'Tenant Administrator', the server checks that the customer is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the user belongs to the customer.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getShortCustomerInfoByIdUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/title:
    get:
      tags:
        - customer-controller
      summary: Get Customer Title (getCustomerTitleById)
      description: |-
        Get the title of the customer. If the user has the authority of 'Tenant Administrator', the server checks that the customer is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the user belongs to the customer.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getCustomerTitleByIdUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/text:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customers:
    get:
      tags:
        - customer-controller
      summary: Get Tenant Customers (getCustomers)
      description: |-
        Returns a page of customers owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getCustomersUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the customer title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - city
              - country
              - createdTime
              - email
              - title
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Customer»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/customers:
    get:
      tags:
        - customer-controller
      summary: Get Tenant Customer by Customer title (getTenantCustomer)
      description: |-
        Get the Customer using Customer Title. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantCustomerUsingGET
      parameters:
        - name: customerTitle
          in: query
          description: A string value representing the Customer title.
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/public/dashboard/{dashboardId}:
    post:
      tags:
        - dashboard-controller
      summary: Assign the Dashboard to Public Customer (assignDashboardToPublicCustomer)
      description: |-
        Assigns the dashboard to a special, auto-generated 'Public' Customer. Once assigned, unauthenticated users may browse the dashboard. This method is useful if you like to embed the dashboard on public web pages to be available for users that are not logged in. Be aware that making the dashboard public does not mean that it automatically makes all devices and assets you use in the dashboard to be public.Use [assign Asset to Public Customer](#!/asset-controller/assignAssetToPublicCustomerUsingPOST) and [assign Device to Public Customer](#!/device-controller/assignDeviceToPublicCustomerUsingPOST) for this purpose. Returns the Dashboard object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignDashboardToPublicCustomerUsingPOST
      parameters:
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - dashboard-controller
      summary: Unassign the Dashboard from Public Customer (unassignDashboardFromPublicCustomer)
      description: |-
        Unassigns the dashboard from a special, auto-generated 'Public' Customer. Once unassigned, unauthenticated users may no longer browse the dashboard. Returns the Dashboard object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unassignDashboardFromPublicCustomerUsingDELETE
      parameters:
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/dashboard/{dashboardId}:
    post:
      tags:
        - dashboard-controller
      summary: Assign the Dashboard (assignDashboardToCustomer)
      description: |-
        Assign the Dashboard to specified Customer or do nothing if the Dashboard is already assigned to that Customer. Returns the Dashboard object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignDashboardToCustomerUsingPOST
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - dashboard-controller
      summary: Unassign the Dashboard (unassignDashboardFromCustomer)
      description: |-
        Unassign the Dashboard from specified Customer or do nothing if the Dashboard is already assigned to that Customer. Returns the Dashboard object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unassignDashboardFromCustomerUsingDELETE
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/dashboards:
    get:
      tags:
        - dashboard-controller
      summary: Get Customer Dashboards (getCustomerDashboards)
      description: |-
        Returns a page of dashboard info objects owned by the specified customer. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getCustomerDashboardsUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: mobile
          in: query
          description: Exclude dashboards that are hidden for mobile
          required: false
          style: form
          schema:
            type: boolean
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the dashboard title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - title
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«DashboardInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard:
    post:
      tags:
        - dashboard-controller
      summary: Create Or Update Dashboard (saveDashboard)
      description: |-
        Create or update the Dashboard. When creating dashboard, platform generates Dashboard Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Dashboard id will be present in the response. Specify existing Dashboard id to update the dashboard. Referencing non-existing dashboard Id will cause 'Not Found' error. Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new Dashboard entity. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveDashboardUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard/home:
    get:
      tags:
        - dashboard-controller
      summary: Get Home Dashboard (getHomeDashboard)
      description: |-
        Returns the home dashboard object that is configured as 'homeDashboardId' parameter in the 'additionalInfo' of the User. If 'homeDashboardId' parameter is not set on the User level and the User has authority 'CUSTOMER_USER', check the same parameter for the corresponding Customer. If 'homeDashboardId' parameter is not set on the User and Customer levels then checks the same parameter for the Tenant that owns the user. The Dashboard object is a heavyweight object that contains information about the dashboard (e.g. title, image, assigned customers) and also configuration JSON (e.g. layouts, widgets, entity aliases).

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getHomeDashboardUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeDashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard/home/info:
    get:
      tags:
        - dashboard-controller
      summary: Get Home Dashboard Info (getHomeDashboardInfo)
      description: |-
        Returns the home dashboard info object that is configured as 'homeDashboardId' parameter in the 'additionalInfo' of the User. If 'homeDashboardId' parameter is not set on the User level and the User has authority 'CUSTOMER_USER', check the same parameter for the corresponding Customer. If 'homeDashboardId' parameter is not set on the User and Customer levels then checks the same parameter for the Tenant that owns the user. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getHomeDashboardInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeDashboardInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard/info/{dashboardId}:
    get:
      tags:
        - dashboard-controller
      summary: Get Dashboard Info (getDashboardInfoById)
      description: Get the information about the dashboard based on 'dashboardId' parameter. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON.
      operationId: getDashboardInfoByIdUsingGET
      parameters:
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard/maxDatapointsLimit:
    get:
      tags:
        - dashboard-controller
      summary: Get max data points limit (getMaxDatapointsLimit)
      description: Get the maximum number of data points that dashboard may request from the server per in a single subscription command. This value impacts the time window behavior. It impacts 'Max values' parameter in case user selects 'None' as 'Data aggregation function'. It also impacts the 'Grouping interval' in case of any other 'Data aggregation function' is selected. The actual value of the limit is configurable in the system configuration file.
      operationId: getMaxDatapointsLimitUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
              examples:
                example-0:
                  value: '5000'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard/serverTime:
    get:
      tags:
        - dashboard-controller
      summary: Get server time (getServerTime)
      description: Get the server time (milliseconds since January 1, 1970 UTC). Used to adjust view of the dashboards according to the difference between browser and server time.
      operationId: getServerTimeUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
              examples:
                example-0:
                  value: '1636023857137'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard/{dashboardId}:
    get:
      tags:
        - dashboard-controller
      summary: Get Dashboard (getDashboardById)
      description: |-
        Get the dashboard based on 'dashboardId' parameter. The Dashboard object is a heavyweight object that contains information about the dashboard (e.g. title, image, assigned customers) and also configuration JSON (e.g. layouts, widgets, entity aliases).

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDashboardByIdUsingGET
      parameters:
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: inlineImages
          in: query
          description: Inline images as a data URL (Base64)
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - dashboard-controller
      summary: Delete the Dashboard (deleteDashboard)
      description: |-
        Delete the Dashboard.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteDashboardUsingDELETE
      parameters:
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard/{dashboardId}/customers:
    post:
      tags:
        - dashboard-controller
      summary: Update the Dashboard Customers (updateDashboardCustomers)
      description: |-
        Updates the list of Customers that this Dashboard is assigned to. Removes previous assignments to customers that are not in the provided list. Returns the Dashboard object. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: updateDashboardCustomersUsingPOST
      parameters:
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard/{dashboardId}/customers/add:
    post:
      tags:
        - dashboard-controller
      summary: Adds the Dashboard Customers (addDashboardCustomers)
      description: |-
        Adds the list of Customers to the existing list of assignments for the Dashboard. Keeps previous assignments to customers that are not in the provided list. Returns the Dashboard object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: addDashboardCustomersUsingPOST
      parameters:
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/dashboard/{dashboardId}/customers/remove:
    post:
      tags:
        - dashboard-controller
      summary: Remove the Dashboard Customers (removeDashboardCustomers)
      description: |-
        Removes the list of Customers from the existing list of assignments for the Dashboard. Keeps other assignments to customers that are not in the provided list. Returns the Dashboard object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: removeDashboardCustomersUsingPOST
      parameters:
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/dashboard/{dashboardId}:
    post:
      tags:
        - dashboard-controller
      summary: Assign dashboard to edge (assignDashboardToEdge)
      description: |-
        Creates assignment of an existing dashboard to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment dashboard (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once dashboard will be delivered to edge service, it's going to be available for usage on remote edge instance.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignDashboardToEdgeUsingPOST
      parameters:
        - name: edgeId
          in: path
          description: edgeId
          required: true
          style: simple
          schema:
            type: string
        - name: dashboardId
          in: path
          description: dashboardId
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - dashboard-controller
      summary: Unassign dashboard from edge (unassignDashboardFromEdge)
      description: |-
        Clears assignment of the dashboard to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove dashboard (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove dashboard locally.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unassignDashboardFromEdgeUsingDELETE
      parameters:
        - name: edgeId
          in: path
          description: edgeId
          required: true
          style: simple
          schema:
            type: string
        - name: dashboardId
          in: path
          description: dashboardId
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/dashboards:
    get:
      tags:
        - dashboard-controller
      summary: Get Edge Dashboards (getEdgeDashboards)
      description: |-
        Returns a page of dashboard info objects assigned to the specified edge. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getEdgeDashboardsUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the dashboard title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - title
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«DashboardInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/dashboard/home/info:
    get:
      tags:
        - dashboard-controller
      summary: Get Tenant Home Dashboard Info (getTenantHomeDashboardInfo)
      description: |-
        Returns the home dashboard info object that is configured as 'homeDashboardId' parameter in the 'additionalInfo' of the corresponding tenant. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantHomeDashboardInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeDashboardInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - dashboard-controller
      summary: Update Tenant Home Dashboard Info (getTenantHomeDashboardInfo)
      description: |-
        Update the home dashboard assignment for the current tenant. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: setTenantHomeDashboardInfoUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HomeDashboardInfo'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/dashboards:
    get:
      tags:
        - dashboard-controller
      summary: Get Tenant Dashboards (getTenantDashboards)
      description: |-
        Returns a page of dashboard info objects owned by the tenant of a current user. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantDashboardsUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: mobile
          in: query
          description: Exclude dashboards that are hidden for mobile
          required: false
          style: form
          schema:
            type: boolean
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the dashboard title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - title
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«DashboardInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/{tenantId}/dashboards:
    get:
      tags:
        - dashboard-controller
      summary: Get Tenant Dashboards by System Administrator (getTenantDashboards)
      description: |-
        Returns a page of dashboard info objects owned by tenant. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getTenantDashboardsUsingGET_1
      parameters:
        - name: tenantId
          in: path
          description: A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the dashboard title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - title
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«DashboardInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device-connectivity/gateway-launch/{deviceId}/docker-compose/download:
    get:
      tags:
        - device-connectivity-controller
      summary: Download generated docker-compose.yml file for gateway (downloadGatewayDockerCompose)
      description: Download generated docker-compose.yml for gateway.
      operationId: downloadGatewayDockerComposeUsingGET
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device-connectivity/{deviceId}:
    get:
      tags:
        - device-connectivity-controller
      summary: Get commands to publish device telemetry (getDevicePublishTelemetryCommands)
      description: |-
        Fetch the list of commands to publish device telemetry based on device profile If the user has the authority of 'Tenant Administrator', the server checks that the device is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the device is assigned to the same customer. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDevicePublishTelemetryCommandsUsingGET
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
              examples:
                example-0:
                  value: '{"http":"curl -v -X POST http://localhost:8080/api/v1/0ySs4FTOn5WU15XLmal8/telemetry --header Content-Type:application/json --data {temperature:25}","mqtt":"mosquitto_pub -d -q 1 -h localhost -t v1/devices/me/telemetry -i myClient1 -u myUsername1 -P myPassword -m {temperature:25}","coap":"coap-client -m POST coap://localhost:5683/api/v1/0ySs4FTOn5WU15XLmal8/telemetry -t json -e {temperature:25}"}'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device-connectivity/{protocol}/certificate/download:
    get:
      tags:
        - device-connectivity-controller
      summary: Download server certificate using file path defined in device.connectivity properties (downloadServerCertificate)
      description: Download server certificate.
      operationId: downloadServerCertificateUsingGET
      parameters:
        - name: protocol
          in: path
          description: 'A string value representing the device connectivity protocol. Possible values: ''mqtt'', ''mqtts'', ''http'', ''https'', ''coap'', ''coaps'''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/device/{deviceId}:
    delete:
      tags:
        - device-controller
      summary: Unassign device from customer (unassignDeviceFromCustomer)
      description: |-
        Clears assignment of the device to customer. Customer will not be able to query device afterwards.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unassignDeviceFromCustomerUsingDELETE
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/device/{deviceName}/claim:
    post:
      tags:
        - device-controller
      summary: Claim device (claimDevice)
      description: |-
        Claiming makes it possible to assign a device to the specific customer using device/server side claiming data (in the form of secret key).To make this happen you have to provide unique device name and optional claiming data (it is needed only for device-side claiming).Once device is claimed, the customer becomes its owner and customer users may access device data as well as control the device. 
        In order to enable claiming devices feature a system parameter security.claim.allowClaimingByDefault should be set to true, otherwise a server-side claimingAllowed attribute with the value true is obligatory for provisioned devices. 
        See official documentation for more details regarding claiming.

        Available for users with 'CUSTOMER_USER' authority.
      operationId: claimDeviceUsingPOST
      parameters:
        - name: deviceName
          in: path
          description: Unique name of the device which is going to be claimed
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - device-controller
      summary: Reclaim device (reClaimDevice)
      description: |-
        Reclaiming means the device will be unassigned from the customer and the device will be available for claiming again.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: reClaimDeviceUsingDELETE
      parameters:
        - name: deviceName
          in: path
          description: Unique name of the device which is going to be reclaimed
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/public/device/{deviceId}:
    post:
      tags:
        - device-controller
      summary: Make device publicly available (assignDeviceToPublicCustomer)
      description: |-
        Device will be available for non-authorized (not logged-in) users. This is useful to create dashboards that you plan to share/embed on a publicly available website. However, users that are logged-in and belong to different tenant will not be able to access the device.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignDeviceToPublicCustomerUsingPOST
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/device/{deviceId}:
    post:
      tags:
        - device-controller
      summary: Assign device to customer (assignDeviceToCustomer)
      description: |-
        Creates assignment of the device to customer. Customer will be able to query device afterwards.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignDeviceToCustomerUsingPOST
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/deviceInfos:
    get:
      tags:
        - device-controller
      summary: Get Customer Device Infos (getCustomerDeviceInfos)
      description: |-
        Returns a page of devices info objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Device Info is an extension of the default Device object that contains information about the assigned customer name and device profile name. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getCustomerDeviceInfosUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Device type as the name of the device profile
          required: false
          style: form
          schema:
            type: string
        - name: deviceProfileId
          in: query
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
        - name: active
          in: query
          description: A boolean value representing the device active flag.
          required: false
          style: form
          schema:
            type: boolean
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the device name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - deviceProfileName
              - label
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«DeviceInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/devices:
    get:
      tags:
        - device-controller
      summary: Get Customer Devices (getCustomerDevices)
      description: |-
        Returns a page of devices objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getCustomerDevicesUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Device type as the name of the device profile
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the device name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - deviceProfileName
              - label
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Device»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device-with-credentials:
    post:
      tags:
        - device-controller
      summary: 'Create Device (saveDevice) with credentials '
      description: |-
        Create or update the Device. When creating device, platform generates Device Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). Requires to provide the Device Credentials object as well as an existing device profile ID or use "default".
        You may find the example of device with different type of credentials below: 

        - Credentials type: <b>"Access token"</b> with <b>device profile ID</b> below: 

        ```json
        {
          "device": {
            "name":"Name_DeviceWithCredantial_AccessToken",
            "label":"Label_DeviceWithCredantial_AccessToken",
            "deviceProfileId":{
              "id":"9d9588c0-06c9-11ee-b618-19be30fdeb60",
              "entityType":"DEVICE_PROFILE"
             }
           },
          "credentials": {
            "credentialsType": "ACCESS_TOKEN",
            "credentialsId": "6hmxew8pmmzng4e3une2"
           }
        }
        ```

        - Credentials type: <b>"Access token"</b> with  <b>device profile default</b> below: 

        ```json
        {
          "device": {
            "name":"Name_DeviceWithCredantial_AccessToken_Default",
            "label":"Label_DeviceWithCredantial_AccessToken_Default",
            "type": "default"
           },
          "credentials": {
            "credentialsType": "ACCESS_TOKEN",
            "credentialsId": "6hmxew8pmmzng4e3une3"
           }
        }
        ```

        - Credentials type: <b>"X509"</b> with <b>device profile ID</b> below: 

        Note: <b>credentialsId</b> -  format <b>Sha3Hash</b>, <b>certificateValue</b> - format <b>PEM</b> (with "--BEGIN CERTIFICATE----" and  -"----END CERTIFICATE-").

        ```json
        {
          "device": {
            "name":"Name_DeviceWithCredantial_X509_Certificate",
            "label":"Label_DeviceWithCredantial_X509_Certificate",
            "deviceProfileId":{
              "id":"9d9588c0-06c9-11ee-b618-19be30fdeb60",
              "entityType":"DEVICE_PROFILE"
             }
           },
          "credentials": {
            "credentialsType": "X509_CERTIFICATE",
            "credentialsId": "84f5911765abba1f96bf4165604e9e90338fc6214081a8e623b6ff9669aedb27",
            "credentialsValue": "-----BEGIN CERTIFICATE----- MIICMTCCAdegAwIBAgIUI9dBuwN6pTtK6uZ03rkiCwV4wEYwCgYIKoZIzj0EAwIwbjELMAkGA1UEBhMCVVMxETAPBgNVBAgMCE5ldyBZb3JrMRowGAYDVQQKDBFUaGluZ3NCb2FyZCwgSW5jLjEwMC4GA1UEAwwnZGV2aWNlQ2VydGlmaWNhdGVAWDUwOVByb3Zpc2lvblN0cmF0ZWd5MB4XDTIzMDMyOTE0NTYxN1oXDTI0MDMyODE0NTYxN1owbjELMAkGA1UEBhMCVVMxETAPBgNVBAgMCE5ldyBZb3JrMRowGAYDVQQKDBFUaGluZ3NCb2FyZCwgSW5jLjEwMC4GA1UEAwwnZGV2aWNlQ2VydGlmaWNhdGVAWDUwOVByb3Zpc2lvblN0cmF0ZWd5MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE9Zo791qKQiGNBm11r4ZGxh+w+ossZL3xc46ufq5QckQHP7zkD2XDAcmP5GvdkM1sBFN9AWaCkQfNnWmfERsOOKNTMFEwHQYDVR0OBBYEFFFc5uyCyglQoZiKhzXzMcQ3BKORMB8GA1UdIwQYMBaAFFFc5uyCyglQoZiKhzXzMcQ3BKORMA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhANbA9CuhoOifZMMmqkpuld+65CR+ItKdXeRAhLMZuccuAiB0FSQB34zMutXrZj1g8Gl5OkE7YryFHbei1z0SveHR8g== -----END CERTIFICATE-----"
           }
        }
        ```

        - Credentials type: <b>"MQTT_BASIC"</b> with <b>device profile ID</b> below: 

        ```json
        {
          "device": {
            "name":"Name_DeviceWithCredantial_MQTT_Basic",
            "label":"Label_DeviceWithCredantial_MQTT_Basic",
            "deviceProfileId":{
              "id":"9d9588c0-06c9-11ee-b618-19be30fdeb60",
              "entityType":"DEVICE_PROFILE"
             }
           },
          "credentials": {
            "credentialsType": "MQTT_BASIC",
            "credentialsValue": "{\"clientId\":\"5euh5nzm34bjjh1efmlt\",\"userName\":\"onasd1lgwasmjl7v2v7h\",\"password\":\"b9xtm4ny8kt9zewaga5o\"}"
           }
        }
        ```

        - You may find the example of <b>LwM2M</b> device and <b>RPK</b> credentials below: 

        Note: LwM2M device - only existing device profile ID (Transport configuration -> Transport type: "LWM2M".

        ```json
        {
          "device": {
            "name":"Name_LwRpk00000000",
            "label":"Label_LwRpk00000000",
            "deviceProfileId":{
              "id":"a660bd50-10ef-11ee-8737-b5634e73c779",
              "entityType":"DEVICE_PROFILE"
             }
           },
          "credentials": {
            "credentialsType": "LWM2M_CREDENTIALS",
            "credentialsId": "LwRpk00000000",
            "credentialsValue":
               "{\"client\":{ \"endpoint\":\"LwRpk00000000\", \"securityConfigClientMode\":\"RPK\", \"key\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\"   }, \"bootstrap\":{ \"bootstrapServer\":{ \"securityMode\":\"RPK\", \"clientPublicKeyOrId\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\", \"clientSecretKey\":\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgd9GAx7yZW37autew5KZykn4IgRpge/tZSjnudnZJnMahRANCAARQQHE2X9Fxgk2byaT3ULJVeggmJE5gOVdxJKorp7lsMfA5bhmI3aU2ddqXIXQnHDwxsDK2cMwRFfICNrlUQx5V\"}, \"lwm2mServer\":{ \"securityMode\":\"RPK\", \"clientPublicKeyOrId\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\", \"clientSecretKey\":\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgd9GAx7yZW37autew5KZykn4IgRpge/tZSjnudnZJnMahRANCAARQQHE2X9Fxgk2byaT3ULJVeggmJE5gOVdxJKorp7lsMfA5bhmI3aU2ddqXIXQnHDwxsDK2cMwRFfICNrlUQx5V\"}} }"
           }
        }
        ```

        Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new Device entity. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveDeviceWithCredentialsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveDeviceWithCredentialsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device/bulk_import:
    post:
      tags:
        - device-controller
      summary: Import the bulk of devices (processDevicesBulkImport)
      description: |-
        There's an ability to import the bulk of devices using the only .csv file.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: processDevicesBulkImportUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkImportRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkImportResult«Device»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device/credentials:
    post:
      tags:
        - device-controller
      summary: Update device credentials (updateDeviceCredentials)
      description: |-
        During device creation, platform generates random 'ACCESS_TOKEN' credentials. " +
        Use this method to update the device credentials. First use 'getDeviceCredentialsByDeviceId' to get the credentials id and value.
        Then use current method to update the credentials type and value. It is not possible to create multiple device credentials for the same device.
        The structure of device credentials id and value is simple for the 'ACCESS_TOKEN' but is much more complex for the 'MQTT_BASIC' or 'LWM2M_CREDENTIALS'.
        You may find the example of device with different type of credentials below: 

        - Credentials type: <b>"Access token"</b> with <b>device ID</b> and with <b>device ID</b> below: 

        ```json
        {
          "id": {
            "id":"c886a090-168d-11ee-87c9-6f157dbc816a"
           },
          "deviceId": {
            "id":"c5fb3ac0-168d-11ee-87c9-6f157dbc816a",
            "entityType":"DEVICE"
           },
          "credentialsType": "ACCESS_TOKEN",
          "credentialsId": "6hmxew8pmmzng4e3une4"
        }
        ```

        - Credentials type: <b>"X509"</b> with <b>device profile ID</b> below: 

        Note: <b>credentialsId</b> -  format <b>Sha3Hash</b>, <b>certificateValue</b> - format <b>PEM</b> (with "--BEGIN CERTIFICATE----" and  -"----END CERTIFICATE-").

        ```json
        {
          "id": {
            "id":"309bd9c0-14f4-11ee-9fc9-d9b7463abb63"
           },
          "deviceId": {
            "id":"3092b200-14f4-11ee-9fc9-d9b7463abb63",
            "entityType":"DEVICE"
           },
          "credentialsType": "X509_CERTIFICATE",
          "credentialsId": "6b8adb49015500e51a527acd332b51684ab9b49b4ade03a9582a44c455e2e9b6",
          "credentialsValue": "-----BEGIN CERTIFICATE----- MIICMTCCAdegAwIBAgIUUEKxS9hTz4l+oLUMF0LV6TC/gCIwCgYIKoZIzj0EAwIwbjELMAkGA1UEBhMCVVMxETAPBgNVBAgMCE5ldyBZb3JrMRowGAYDVQQKDBFUaGluZ3NCb2FyZCwgSW5jLjEwMC4GA1UEAwwnZGV2aWNlUHJvZmlsZUNlcnRAWDUwOVByb3Zpc2lvblN0cmF0ZWd5MB4XDTIzMDMyOTE0NTczNloXDTI0MDMyODE0NTczNlowbjELMAkGA1UEBhMCVVMxETAPBgNVBAgMCE5ldyBZb3JrMRowGAYDVQQKDBFUaGluZ3NCb2FyZCwgSW5jLjEwMC4GA1UEAwwnZGV2aWNlUHJvZmlsZUNlcnRAWDUwOVByb3Zpc2lvblN0cmF0ZWd5MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAECMlWO72krDoUL9FQjUmSCetkhaEGJUfQkdSfkLSNa0GyAEIMbfmzI4zITeapunu4rGet3EMyLydQzuQanBicp6NTMFEwHQYDVR0OBBYEFHpZ78tPnztNii4Da/yCw6mhEIL3MB8GA1UdIwQYMBaAFHpZ78tPnztNii4Da/yCw6mhEIL3MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIgJ7qyMFqNcwSYkH6o+UlQXzLWfwZbNjVk+aR7foAZNGsCIQDsd7v3WQIGHiArfZeDs1DLEDuV/2h6L+ZNoGNhEKL+1A== -----END CERTIFICATE-----"
        }
        ```

        - Credentials type: <b>"MQTT_BASIC"</b> with <b>device profile ID</b> below: 

        ```json
        {
          "id": {
            "id":"d877ffb0-14f5-11ee-9fc9-d9b7463abb63"
           },
          "deviceId": {
            "id":"d875dcd0-14f5-11ee-9fc9-d9b7463abb63",
            "entityType":"DEVICE"
           },
          "credentialsType": "MQTT_BASIC",
          "credentialsValue": "{\"clientId\":\"juy03yv4owqxcmqhqtvk\",\"userName\":\"ov19fxca0cyjn7lm7w7u\",\"password\":\"twy94he114dfi9usyk1o\"}"
        }
        ```

        - You may find the example of <b>LwM2M</b> device and <b>RPK</b> credentials below: 

        Note: LwM2M device - only existing device profile ID (Transport configuration -> Transport type: "LWM2M".

        ```json
        {
          "id": {
            "id":"e238d4d0-1689-11ee-98c6-1713c1be5a8e"
           },
          "deviceId": {
            "id":"e232e160-1689-11ee-98c6-1713c1be5a8e",
            "entityType":"DEVICE"
           },
          "credentialsType": "LWM2M_CREDENTIALS",
          "credentialsId": "LwRpk00000000",
          "credentialsValue":
               "{\"client\":{ \"endpoint\":\"LwRpk00000000\", \"securityConfigClientMode\":\"RPK\", \"key\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEdvBZZ2vQRK9wgDhctj6B1c7bxR3Z0wYg1+YdoYFnVUKWb+rIfTTyYK9tmQJx5Vlb5fxdLnVv1RJOPiwsLIQbAA==\"   }, \"bootstrap\":{ \"bootstrapServer\":{ \"securityMode\":\"RPK\", \"clientPublicKeyOrId\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\", \"clientSecretKey\":\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgd9GAx7yZW37autew5KZykn4IgRpge/tZSjnudnZJnMahRANCAARQQHE2X9Fxgk2byaT3ULJVeggmJE5gOVdxJKorp7lsMfA5bhmI3aU2ddqXIXQnHDwxsDK2cMwRFfICNrlUQx5V\"}, \"lwm2mServer\":{ \"securityMode\":\"RPK\", \"clientPublicKeyOrId\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\", \"clientSecretKey\":\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgd9GAx7yZW37autew5KZykn4IgRpge/tZSjnudnZJnMahRANCAARQQHE2X9Fxgk2byaT3ULJVeggmJE5gOVdxJKorp7lsMfA5bhmI3aU2ddqXIXQnHDwxsDK2cMwRFfICNrlUQx5V\"}} }"
        }
        ```

        Update to real value:
         - 'id' (this is id of Device Credentials ->  "Get Device Credentials (getDeviceCredentialsByDeviceId)",
         - 'deviceId.id' (this is id of Device).
        Remove 'tenantId' and optionally 'customerId' from the request body example (below) to create new Device entity.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: updateDeviceCredentialsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceCredentials'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceCredentials'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device/info/{deviceId}:
    get:
      tags:
        - device-controller
      summary: Get Device Info (getDeviceInfoById)
      description: |-
        Fetch the Device Info object based on the provided Device Id. If the user has the authority of 'Tenant Administrator', the server checks that the device is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the device is assigned to the same customer. Device Info is an extension of the default Device object that contains information about the assigned customer name and device profile name. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDeviceInfoByIdUsingGET
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device/types:
    get:
      tags:
        - device-controller
      summary: Get Device Types (getDeviceTypes)
      description: |-
        Deprecated. See 'getDeviceProfileNames' API from Device Profile Controller instead.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDeviceTypesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitySubtype'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      deprecated: true
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device/{deviceId}:
    get:
      tags:
        - device-controller
      summary: Get Device (getDeviceById)
      description: |-
        Fetch the Device object based on the provided Device Id. If the user has the authority of 'TENANT_ADMIN', the server checks that the device is owned by the same tenant. If the user has the authority of 'CUSTOMER_USER', the server checks that the device is assigned to the same customer.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDeviceByIdUsingGET
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - device-controller
      summary: Delete device (deleteDevice)
      description: |-
        Deletes the device, it's credentials and all the relations (from and to the device). Referencing non-existing device Id will cause an error.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteDeviceUsingDELETE
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device/{deviceId}/credentials:
    get:
      tags:
        - device-controller
      summary: Get Device Credentials (getDeviceCredentialsByDeviceId)
      description: |-
        If during device creation there wasn't specified any credentials, platform generates random 'ACCESS_TOKEN' credentials.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDeviceCredentialsByDeviceIdUsingGET
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceCredentials'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/devices:
    get:
      tags:
        - device-controller
      summary: Get Devices By Ids (getDevicesByIds)
      description: |-
        Requested devices must be owned by tenant or assigned to customer which user is performing the request. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDevicesByIdsUsingGET
      parameters:
        - name: deviceIds
          in: query
          description: A list of devices ids, separated by comma ','
          required: true
          style: form
          explode: true
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - device-controller
      summary: Find related devices (findByQuery)
      description: |-
        Returns all devices that are related to the specific entity. The entity id, relation type, device types, depth of the search, and other query parameters defined using complex 'DeviceSearchQuery' object. See 'Model' tab of the Parameters for more info.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: findByQueryUsingPOST_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceSearchQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/devices/count/{otaPackageType}/{deviceProfileId}:
    get:
      tags:
        - device-controller
      summary: Count devices by device profile  (countByDeviceProfileAndEmptyOtaPackage)
      description: |-
        The platform gives an ability to load OTA (over-the-air) packages to devices. It can be done in two different ways: device scope or device profile scope.In the response you will find the number of devices with specified device profile, but without previously defined device scope OTA package. It can be useful when you want to define number of devices that will be affected with future OTA package

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: countByDeviceProfileAndEmptyOtaPackageUsingGET
      parameters:
        - name: otaPackageType
          in: path
          description: OTA package type
          required: true
          style: simple
          schema:
            type: string
            enum:
              - FIRMWARE
              - SOFTWARE
        - name: deviceProfileId
          in: path
          description: Device Profile Id. I.g. '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/device:
    post:
      tags:
        - device-controller
      summary: Create Or Update Device (saveDevice)
      description: |-
        Create or update the Device. When creating device, platform generates Device Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). Device credentials are also generated if not provided in the 'accessToken' request parameter. The newly created device id will be present in the response. Specify existing Device id to update the device. Referencing non-existing device Id will cause 'Not Found' error.

        Device name is unique in the scope of tenant. Use unique identifiers like MAC or IMEI for the device names and non-unique 'label' field for user-friendly visualization purposes.Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new Device entity. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveDeviceUsingPOST
      parameters:
        - name: accessToken
          in: query
          description: Optional value of the device credentials to be used during device creation. If omitted, access token will be auto-generated.
          required: false
          style: form
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/device/{deviceId}:
    post:
      tags:
        - device-controller
      summary: Assign device to edge (assignDeviceToEdge)
      description: |-
        Creates assignment of an existing device to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment device (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once device will be delivered to edge service, it's going to be available for usage on remote edge instance.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignDeviceToEdgeUsingPOST
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - device-controller
      summary: Unassign device from edge (unassignDeviceFromEdge)
      description: |-
        Clears assignment of the device to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove device (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove device locally.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unassignDeviceFromEdgeUsingDELETE
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/devices:
    get:
      tags:
        - device-controller
      summary: Get devices assigned to edge (getEdgeDevices)
      description: |-
        Returns a page of devices assigned to edge. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getEdgeDevicesUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Device type as the name of the device profile
          required: false
          style: form
          schema:
            type: string
        - name: deviceProfileId
          in: query
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
        - name: active
          in: query
          description: A boolean value representing the device active flag.
          required: false
          style: form
          schema:
            type: boolean
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the device name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - deviceProfileName
              - label
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: Timestamp. Devices with creation time before it won't be queried
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: Timestamp. Devices with creation time after it won't be queried
          required: false
          style: form
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«DeviceInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/deviceInfos:
    get:
      tags:
        - device-controller
      summary: Get Tenant Device Infos (getTenantDeviceInfos)
      description: |-
        Returns a page of devices info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Device Info is an extension of the default Device object that contains information about the assigned customer name and device profile name. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantDeviceInfosUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Device type as the name of the device profile
          required: false
          style: form
          schema:
            type: string
        - name: deviceProfileId
          in: query
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
        - name: active
          in: query
          description: A boolean value representing the device active flag.
          required: false
          style: form
          schema:
            type: boolean
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the device name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - deviceProfileName
              - label
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«DeviceInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/devices:
    get:
      tags:
        - device-controller
      summary: Get Tenant Devices (getTenantDevices)
      description: |-
        Returns a page of devices owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantDevicesUsingGET
      parameters:
        - name: deviceName
          in: query
          description: A string value representing the Device name.
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Device type as the name of the device profile
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the device name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - deviceProfileName
              - label
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Device»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/{tenantId}/device/{deviceId}:
    post:
      tags:
        - device-controller
      summary: Assign device to tenant (assignDeviceToTenant)
      description: |-
        Creates assignment of the device to tenant. Thereafter tenant will be able to reassign the device to a customer.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignDeviceToTenantUsingPOST
      parameters:
        - name: tenantId
          in: path
          description: A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfile:
    post:
      tags:
        - device-profile-controller
      summary: Create Or Update Device Profile (saveDeviceProfile)
      description: |-
        Create or update the Device Profile. When creating device profile, platform generates device profile id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created device profile id will be present in the response. Specify existing device profile id to update the device profile. Referencing non-existing device profile Id will cause 'Not Found' error. 

        Device profile name is unique in the scope of tenant. Only one 'default' device profile may exist in scope of tenant.

        # Device profile data definition

        Device profile data object contains alarm rules configuration, device provision strategy and transport type configuration for device connectivity. Let's review some examples. First one is the default device profile data configuration and second one - the custom one. 

        ```json
        {
           "alarms":[
           ],
           "configuration":{
              "type":"DEFAULT"
           },
           "provisionConfiguration":{
              "type":"DISABLED",
              "provisionDeviceSecret":null
           },
           "transportConfiguration":{
              "type":"DEFAULT"
           }
        }
        ```

        ```json
        {
           "alarms":[
              {
                 "id":"2492b935-1226-59e9-8615-17d8978a4f93",
                 "alarmType":"Temperature Alarm",
                 "clearRule":{
                    "schedule":null,
                    "condition":{
                       "spec":{
                          "type":"SIMPLE"
                       },
                       "condition":[
                          {
                             "key":{
                                "key":"temperature",
                                "type":"TIME_SERIES"
                             },
                             "value":null,
                             "predicate":{
                                "type":"NUMERIC",
                                "value":{
                                   "userValue":null,
                                   "defaultValue":30.0,
                                   "dynamicValue":null
                                },
                                "operation":"LESS"
                             },
                             "valueType":"NUMERIC"
                          }
                       ]
                    },
                    "dashboardId":null,
                    "alarmDetails":null
                 },
                 "propagate":false,
                 "createRules":{
                    "MAJOR":{
                       "schedule":{
                          "type":"SPECIFIC_TIME",
                          "endsOn":64800000,
                          "startsOn":43200000,
                          "timezone":"Europe/Kiev",
                          "daysOfWeek":[
                             1,
                             3,
                             5
                          ]
                       },
                       "condition":{
                          "spec":{
                             "type":"DURATION",
                             "unit":"MINUTES",
                             "predicate":{
                                "userValue":null,
                                "defaultValue":30,
                                "dynamicValue":null
                             }
                          },
                          "condition":[
                             {
                                "key":{
                                   "key":"temperature",
                                   "type":"TIME_SERIES"
                                },
                                "value":null,
                                "predicate":{
                                   "type":"COMPLEX",
                                   "operation":"OR",
                                   "predicates":[
                                      {
                                         "type":"NUMERIC",
                                         "value":{
                                            "userValue":null,
                                            "defaultValue":50.0,
                                            "dynamicValue":null
                                         },
                                         "operation":"LESS_OR_EQUAL"
                                      },
                                      {
                                         "type":"NUMERIC",
                                         "value":{
                                            "userValue":null,
                                            "defaultValue":30.0,
                                            "dynamicValue":null
                                         },
                                         "operation":"GREATER"
                                      }
                                   ]
                                },
                                "valueType":"NUMERIC"
                             }
                          ]
                       },
                       "dashboardId":null,
                       "alarmDetails":null
                    },
                    "WARNING":{
                       "schedule":{
                          "type":"CUSTOM",
                          "items":[
                             {
                                "endsOn":0,
                                "enabled":false,
                                "startsOn":0,
                                "dayOfWeek":1
                             },
                             {
                                "endsOn":64800000,
                                "enabled":true,
                                "startsOn":43200000,
                                "dayOfWeek":2
                             },
                             {
                                "endsOn":0,
                                "enabled":false,
                                "startsOn":0,
                                "dayOfWeek":3
                             },
                             {
                                "endsOn":57600000,
                                "enabled":true,
                                "startsOn":36000000,
                                "dayOfWeek":4
                             },
                             {
                                "endsOn":0,
                                "enabled":false,
                                "startsOn":0,
                                "dayOfWeek":5
                             },
                             {
                                "endsOn":0,
                                "enabled":false,
                                "startsOn":0,
                                "dayOfWeek":6
                             },
                             {
                                "endsOn":0,
                                "enabled":false,
                                "startsOn":0,
                                "dayOfWeek":7
                             }
                          ],
                          "timezone":"Europe/Kiev"
                       },
                       "condition":{
                          "spec":{
                             "type":"REPEATING",
                             "predicate":{
                                "userValue":null,
                                "defaultValue":5,
                                "dynamicValue":null
                             }
                          },
                          "condition":[
                             {
                                "key":{
                                   "key":"tempConstant",
                                   "type":"CONSTANT"
                                },
                                "value":30,
                                "predicate":{
                                   "type":"NUMERIC",
                                   "value":{
                                      "userValue":null,
                                      "defaultValue":0.0,
                                      "dynamicValue":{
                                         "inherit":false,
                                         "sourceType":"CURRENT_DEVICE",
                                         "sourceAttribute":"tempThreshold"
                                      }
                                   },
                                   "operation":"EQUAL"
                                },
                                "valueType":"NUMERIC"
                             }
                          ]
                       },
                       "dashboardId":null,
                       "alarmDetails":null
                    },
                    "CRITICAL":{
                       "schedule":null,
                       "condition":{
                          "spec":{
                             "type":"SIMPLE"
                          },
                          "condition":[
                             {
                                "key":{
                                   "key":"temperature",
                                   "type":"TIME_SERIES"
                                },
                                "value":null,
                                "predicate":{
                                   "type":"NUMERIC",
                                   "value":{
                                      "userValue":null,
                                      "defaultValue":50.0,
                                      "dynamicValue":null
                                   },
                                   "operation":"GREATER"
                                },
                                "valueType":"NUMERIC"
                             }
                          ]
                       },
                       "dashboardId":null,
                       "alarmDetails":null
                    }
                 },
                 "propagateRelationTypes":null
              }
           ],
           "configuration":{
              "type":"DEFAULT"
           },
           "provisionConfiguration":{
              "type":"ALLOW_CREATE_NEW_DEVICES",
              "provisionDeviceSecret":"vaxb9hzqdbz3oqukvomg"
           },
           "transportConfiguration":{
              "type":"MQTT",
              "deviceTelemetryTopic":"v1/devices/me/telemetry",
              "deviceAttributesTopic":"v1/devices/me/attributes",
              "transportPayloadTypeConfiguration":{
                 "transportPayloadType":"PROTOBUF",
                 "deviceTelemetryProtoSchema":"syntax =\"proto3\";\npackage telemetry;\n\nmessage SensorDataReading {\n\n  optional double temperature = 1;\n  optional double humidity = 2;\n  InnerObject innerObject = 3;\n\n  message InnerObject {\n    optional string key1 = 1;\n    optional bool key2 = 2;\n    optional double key3 = 3;\n    optional int32 key4 = 4;\n    optional string key5 = 5;\n  }\n}",
                 "deviceAttributesProtoSchema":"syntax =\"proto3\";\npackage attributes;\n\nmessage SensorConfiguration {\n  optional string firmwareVersion = 1;\n  optional string serialNumber = 2;\n}",
                 "deviceRpcRequestProtoSchema":"syntax =\"proto3\";\npackage rpc;\n\nmessage RpcRequestMsg {\n  optional string method = 1;\n  optional int32 requestId = 2;\n  optional string params = 3;\n}",
                 "deviceRpcResponseProtoSchema":"syntax =\"proto3\";\npackage rpc;\n\nmessage RpcResponseMsg {\n  optional string payload = 1;\n}"
              }
           }
        }
        ```

        Let's review some specific objects examples related to the device profile configuration:

        # Alarm Schedule

        Alarm Schedule JSON object represents the time interval during which the alarm rule is active. Note, 

        ```json
        "schedule": null
        ```

        means alarm rule is active all the time. **'daysOfWeek'** field represents Monday as 1, Tuesday as 2 and so on. **'startsOn'** and **'endsOn'** fields represent hours in millis (e.g. 64800000 = 18:00 or 6pm). **'enabled'** flag specifies if item in a custom rule is active for specific day of the week:

        ## Specific Time Schedule

        ```json
        {
           "schedule":{
              "type":"SPECIFIC_TIME",
              "endsOn":64800000,
              "startsOn":43200000,
              "timezone":"Europe/Kiev",
              "daysOfWeek":[
                 1,
                 3,
                 5
              ]
           }
        }
        ```

        ## Custom Schedule

        ```json
        {
           "schedule":{
              "type":"CUSTOM",
              "items":[
                 {
                    "endsOn":0,
                    "enabled":false,
                    "startsOn":0,
                    "dayOfWeek":1
                 },
                 {
                    "endsOn":64800000,
                    "enabled":true,
                    "startsOn":43200000,
                    "dayOfWeek":2
                 },
                 {
                    "endsOn":0,
                    "enabled":false,
                    "startsOn":0,
                    "dayOfWeek":3
                 },
                 {
                    "endsOn":57600000,
                    "enabled":true,
                    "startsOn":36000000,
                    "dayOfWeek":4
                 },
                 {
                    "endsOn":0,
                    "enabled":false,
                    "startsOn":0,
                    "dayOfWeek":5
                 },
                 {
                    "endsOn":0,
                    "enabled":false,
                    "startsOn":0,
                    "dayOfWeek":6
                 },
                 {
                    "endsOn":0,
                    "enabled":false,
                    "startsOn":0,
                    "dayOfWeek":7
                 }
              ],
              "timezone":"Europe/Kiev"
           }
        }
        ```

        # Alarm condition type (**'spec'**)

        Alarm condition type can be either simple, duration, or repeating. For example, 5 times in a row or during 5 minutes.

        Note, **'userValue'** field is not used and reserved for future usage, **'dynamicValue'** is used for condition appliance by using the value of the **'sourceAttribute'** or else **'defaultValue'** is used (if **'sourceAttribute'** is absent).

        **'sourceType'** of the **'sourceAttribute'** can be: 
         * 'CURRENT_DEVICE';
         * 'CURRENT_CUSTOMER';
         * 'CURRENT_TENANT'.

        **'sourceAttribute'** can be inherited from the owner if **'inherit'** is set to true (for CURRENT_DEVICE and CURRENT_CUSTOMER).

        ## Repeating alarm condition

        ```json
        {
           "spec":{
              "type":"REPEATING",
              "predicate":{
                 "userValue":null,
                 "defaultValue":5,
                 "dynamicValue":{
                    "inherit":true,
                    "sourceType":"CURRENT_DEVICE",
                    "sourceAttribute":"tempAttr"
                 }
              }
           }
        }
        ```

        ## Duration alarm condition

        ```json
        {
           "spec":{
              "type":"DURATION",
              "unit":"MINUTES",
              "predicate":{
                 "userValue":null,
                 "defaultValue":30,
                 "dynamicValue":null
              }
           }
        }
        ```

        **'unit'** can be: 
         * 'SECONDS';
         * 'MINUTES';
         * 'HOURS';
         * 'DAYS'.

        # Key Filters

        Key filter objects are created under the **'condition'** array. They allow you to define complex logical expressions over entity field, attribute, latest time-series value or constant. The filter is defined using 'key', 'valueType', 'value' (refers to the value of the 'CONSTANT' alarm filter key type) and 'predicate' objects. Let's review each object:

        ## Alarm Filter Key

        Filter Key defines either entity field, attribute, telemetry or constant. It is a JSON object that consists the key name and type. The following filter key types are supported:
         * 'ATTRIBUTE' - used for attributes values;
         * 'TIME_SERIES' - used for time-series values;
         * 'ENTITY_FIELD' - used for accessing entity fields like 'name', 'label', etc. The list of available fields depends on the entity type;
         * 'CONSTANT' - constant value specified.

        Let's review the example:

        ```json
        {
          "type": "TIME_SERIES",
          "key": "temperature"
        }
        ```

        ## Value Type and Operations

        Provides a hint about the data type of the entity field that is defined in the filter key. The value type impacts the list of possible operations that you may use in the corresponding predicate. For example, you may use 'STARTS_WITH' or 'END_WITH', but you can't use 'GREATER_OR_EQUAL' for string values.The following filter value types and corresponding predicate operations are supported: 

         * 'STRING' - used to filter any 'String' or 'JSON' values. Operations: EQUAL, NOT_EQUAL, STARTS_WITH, ENDS_WITH, CONTAINS, NOT_CONTAINS; 
         * 'NUMERIC' - used for 'Long' and 'Double' values. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; 
         * 'BOOLEAN' - used for boolean values. Operations: EQUAL, NOT_EQUAL;
         * 'DATE_TIME' - similar to numeric, transforms value to milliseconds since epoch. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; 




        ## Filter Predicate

        Filter Predicate defines the logical expression to evaluate. The list of available operations depends on the filter value type, see above. Platform supports 4 predicate types: 'STRING', 'NUMERIC', 'BOOLEAN' and 'COMPLEX'. The last one allows to combine multiple operations over one filter key.

        Simple predicate example to check 'value < 100': 

        ```json
        {
          "operation": "LESS",
          "value": {
            "userValue": null,
            "defaultValue": 100,
            "dynamicValue": null
          },
          "type": "NUMERIC"
        }
        ```

        Complex predicate example, to check 'value < 10 or value > 20': 

        ```json
        {
          "type": "COMPLEX",
          "operation": "OR",
          "predicates": [
            {
              "operation": "LESS",
              "value": {
                "userValue": null,
                "defaultValue": 10,
                "dynamicValue": null
              },
              "type": "NUMERIC"
            },
            {
              "operation": "GREATER",
              "value": {
                "userValue": null,
                "defaultValue": 20,
                "dynamicValue": null
              },
              "type": "NUMERIC"
            }
          ]
        }
        ```

        More complex predicate example, to check 'value < 10 or (value > 50 && value < 60)': 

        ```json
        {
          "type": "COMPLEX",
          "operation": "OR",
          "predicates": [
            {
              "operation": "LESS",
              "value": {
                "userValue": null,
                "defaultValue": 10,
                "dynamicValue": null
              },
              "type": "NUMERIC"
            },
            {
              "type": "COMPLEX",
              "operation": "AND",
              "predicates": [
                {
                  "operation": "GREATER",
                  "value": {
                    "userValue": null,
                    "defaultValue": 50,
                    "dynamicValue": null
                  },
                  "type": "NUMERIC"
                },
                {
                  "operation": "LESS",
                  "value": {
                    "userValue": null,
                    "defaultValue": 60,
                    "dynamicValue": null
                  },
                  "type": "NUMERIC"
                }
              ]
            }
          ]
        }
        ```

        You may also want to replace hardcoded values (for example, temperature > 20) with the more dynamic expression (for example, temperature > value of the tenant attribute with key 'temperatureThreshold'). It is possible to use 'dynamicValue' to define attribute of the tenant, customer or device. See example below:

        ```json
        {
          "operation": "GREATER",
          "value": {
            "userValue": null,
            "defaultValue": 0,
            "dynamicValue": {
              "inherit": false,
              "sourceType": "CURRENT_TENANT",
              "sourceAttribute": "temperatureThreshold"
            }
          },
          "type": "NUMERIC"
        }
        ```

        Note that you may use 'CURRENT_DEVICE', 'CURRENT_CUSTOMER' and 'CURRENT_TENANT' as a 'sourceType'. The 'defaultValue' is used when the attribute with such a name is not defined for the chosen source. The 'sourceAttribute' can be inherited from the owner of the specified 'sourceType' if 'inherit' is set to true.

        # Provision Configuration

        There are 3 types of device provision configuration for the device profile: 
         * 'DISABLED';
         * 'ALLOW_CREATE_NEW_DEVICES';
         * 'CHECK_PRE_PROVISIONED_DEVICES'.

        Please refer to the [docs](https://thingsboard.io/docs/user-guide/device-provisioning/) for more details.

        # Transport Configuration

        5 transport configuration types are available:
         * 'DEFAULT';
         * 'MQTT';
         * 'LWM2M';
         * 'COAP';
         * 'SNMP'.

        Default type supports basic MQTT, HTTP, CoAP and LwM2M transports. Please refer to the [docs](https://thingsboard.io/docs/user-guide/device-profiles/#transport-configuration) for more details about other types.

        See another example of COAP transport configuration below:

        ```json
        {
           "type":"COAP",
           "clientSettings":{
              "edrxCycle":null,
              "powerMode":"DRX",
              "psmActivityTimer":null,
              "pagingTransmissionWindow":null
           },
           "coapDeviceTypeConfiguration":{
              "coapDeviceType":"DEFAULT",
              "transportPayloadTypeConfiguration":{
                 "transportPayloadType":"JSON"
              }
           }
        }
        ```Remove 'id', 'tenantId' from the request body example (below) to create new Device Profile entity. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveDeviceProfileUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceProfile'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceProfile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfile/devices/keys/attributes:
    get:
      tags:
        - device-profile-controller
      summary: Get attribute keys (getAttributesKeys)
      description: |-
        Get a set of unique attribute keys used by devices that belong to specified profile. If profile is not set returns a list of unique keys among all profiles. The call is used for auto-complete in the UI forms. The implementation limits the number of devices that participate in search to 100 as a trade of between accurate results and time-consuming queries. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getAttributesKeysUsingGET
      parameters:
        - name: deviceProfileId
          in: query
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfile/devices/keys/timeseries:
    get:
      tags:
        - device-profile-controller
      summary: Get time-series keys (getTimeseriesKeys)
      description: |-
        Get a set of unique time-series keys used by devices that belong to specified profile. If profile is not set returns a list of unique keys among all profiles. The call is used for auto-complete in the UI forms. The implementation limits the number of devices that participate in search to 100 as a trade of between accurate results and time-consuming queries. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTimeseriesKeysUsingGET
      parameters:
        - name: deviceProfileId
          in: query
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfile/names:
    get:
      tags:
        - device-profile-controller
      summary: Get Device Profile names (getDeviceProfileNames)
      description: |-
        Returns a set of unique device profile names owned by the tenant.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDeviceProfileNamesUsingGET
      parameters:
        - name: activeOnly
          in: query
          description: Flag indicating whether to retrieve exclusively the names of device profiles that are referenced by tenant's devices.
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfile/{deviceProfileId}/default:
    post:
      tags:
        - device-profile-controller
      summary: Make Device Profile Default (setDefaultDeviceProfile)
      description: |-
        Marks device profile as default within a tenant scope.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: setDefaultDeviceProfileUsingPOST
      parameters:
        - name: deviceProfileId
          in: path
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceProfile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfile/{deviceProfileId}:
    delete:
      tags:
        - device-profile-controller
      summary: Delete device profile (deleteDeviceProfile)
      description: |-
        Deletes the device profile. Referencing non-existing device profile Id will cause an error. Can't delete the device profile if it is referenced by existing devices.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteDeviceProfileUsingDELETE
      parameters:
        - name: deviceProfileId
          in: path
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    get:
      tags:
        - device-profile-controller
      summary: Get Device Profile (getDeviceProfileById)
      description: |-
        Fetch the Device Profile object based on the provided Device Profile Id. The server checks that the device profile is owned by the same tenant. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getDeviceProfileByIdUsingGET
      parameters:
        - name: deviceProfileId
          in: path
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: inlineImages
          in: query
          description: Inline images as a data URL (Base64)
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceProfile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfileInfo/default:
    get:
      tags:
        - device-profile-controller
      summary: Get Default Device Profile (getDefaultDeviceProfileInfo)
      description: |-
        Fetch the Default Device Profile Info object. Device Profile Info is a lightweight object that includes main information about Device Profile excluding the heavyweight configuration object. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDefaultDeviceProfileInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceProfileInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfileInfo/{deviceProfileId}:
    get:
      tags:
        - device-profile-controller
      summary: Get Device Profile Info (getDeviceProfileInfoById)
      description: |-
        Fetch the Device Profile Info object based on the provided Device Profile Id. Device Profile Info is a lightweight object that includes main information about Device Profile excluding the heavyweight configuration object. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDeviceProfileInfoByIdUsingGET
      parameters:
        - name: deviceProfileId
          in: path
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceProfileInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfileInfos:
    get:
      tags:
        - device-profile-controller
      summary: Get Device Profiles for transport type (getDeviceProfileInfos)
      description: |-
        Returns a page of devices profile info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Device Profile Info is a lightweight object that includes main information about Device Profile excluding the heavyweight configuration object. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getDeviceProfileInfosUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the device profile name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - description
              - isDefault
              - name
              - transportType
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: transportType
          in: query
          description: Type of the transport
          required: false
          style: form
          schema:
            type: string
            enum:
              - COAP
              - DEFAULT
              - LWM2M
              - MQTT
              - SNMP
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«DeviceProfileInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/deviceProfiles:
    get:
      tags:
        - device-profile-controller
      summary: Get Device Profiles (getDeviceProfiles)
      description: |-
        Returns a page of devices profile objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getDeviceProfilesUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the device profile name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - description
              - isDefault
              - name
              - transportType
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«DeviceProfile»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/edge/{edgeId}:
    delete:
      tags:
        - edge-controller
      summary: Unassign edge from customer (unassignEdgeFromCustomer)
      description: |-
        Clears assignment of the edge to customer. Customer will not be able to query edge afterwards.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unassignEdgeFromCustomerUsingDELETE
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/public/edge/{edgeId}:
    post:
      tags:
        - edge-controller
      summary: Make edge publicly available (assignEdgeToPublicCustomer)
      description: |-
        Edge will be available for non-authorized (not logged-in) users. This is useful to create dashboards that you plan to share/embed on a publicly available website. However, users that are logged-in and belong to different tenant will not be able to access the edge.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignEdgeToPublicCustomerUsingPOST
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/edge/{edgeId}:
    post:
      tags:
        - edge-controller
      summary: Assign edge to customer (assignEdgeToCustomer)
      description: |-
        Creates assignment of the edge to customer. Customer will be able to query edge afterwards.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignEdgeToCustomerUsingPOST
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/edgeInfos:
    get:
      tags:
        - edge-controller
      summary: Get Customer Edge Infos (getCustomerEdgeInfos)
      description: |-
        Returns a page of edges info objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Edge Info is an extension of the default Edge object that contains information about the assigned customer name. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getCustomerEdgeInfosUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: A string value representing the edge type. For example, 'default'
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the edge name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EdgeInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/edges:
    get:
      tags:
        - edge-controller
      summary: Get Customer Edges (getCustomerEdges)
      description: |-
        Returns a page of edges objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getCustomerEdgesUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: A string value representing the edge type. For example, 'default'
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the edge name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Edge»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge:
    post:
      tags:
        - edge-controller
      summary: Create Or Update Edge (saveEdge)
      description: |-
        Create or update the Edge. When creating edge, platform generates Edge Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created edge id will be present in the response. Specify existing Edge id to update the edge. Referencing non-existing Edge Id will cause 'Not Found' error.

        Edge name is unique in the scope of tenant. Use unique identifiers like MAC or IMEI for the edge names and non-unique 'label' field for user-friendly visualization purposes.Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new Edge entity. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveEdgeUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edge'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/bulk_import:
    post:
      tags:
        - edge-controller
      summary: Import the bulk of edges (processEdgesBulkImport)
      description: |-
        There's an ability to import the bulk of edges using the only .csv file.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: processEdgesBulkImportUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkImportRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkImportResult«Edge»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/info/{edgeId}:
    get:
      tags:
        - edge-controller
      summary: Get Edge Info (getEdgeInfoById)
      description: |-
        Get the Edge Info object based on the provided Edge Id. If the user has the authority of 'Tenant Administrator', the server checks that the edge is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the edge is assigned to the same customer.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getEdgeInfoByIdUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgeInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/instructions/install/{edgeId}/{method}:
    get:
      tags:
        - edge-controller
      summary: Get Edge Install Instructions (getEdgeInstallInstructions)
      description: |-
        Get an install instructions for provided edge id.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getEdgeInstallInstructionsUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: method
          in: path
          description: Installation method ('docker', 'ubuntu' or 'centos')
          required: true
          style: simple
          schema:
            type: string
            enum:
              - centos
              - docker
              - ubuntu
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgeInstructions'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/instructions/upgrade/{edgeVersion}/{method}:
    get:
      tags:
        - edge-controller
      summary: Get Edge Upgrade Instructions (getEdgeUpgradeInstructions)
      description: |-
        Get an upgrade instructions for provided edge version.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getEdgeUpgradeInstructionsUsingGET
      parameters:
        - name: edgeVersion
          in: path
          description: Edge version
          required: true
          style: simple
          schema:
            type: string
        - name: method
          in: path
          description: Upgrade method ('docker', 'ubuntu' or 'centos')
          required: true
          style: simple
          schema:
            type: string
            enum:
              - centos
              - docker
              - ubuntu
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgeInstructions'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/missingToRelatedRuleChains/{edgeId}:
    get:
      tags:
        - edge-controller
      summary: Find missing rule chains (findMissingToRelatedRuleChains)
      description: |-
        Returns list of rule chains ids that are not assigned to particular edge, but these rule chains are present in the already assigned rule chains to edge.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: findMissingToRelatedRuleChainsUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/sync/{edgeId}:
    post:
      tags:
        - edge-controller
      summary: Sync edge (syncEdge)
      description: |-
        Starts synchronization process between edge and cloud. 
        All entities that are assigned to particular edge are going to be send to remote edge service.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: syncEdgeUsingPOST
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/types:
    get:
      tags:
        - edge-controller
      summary: Get Edge Types (getEdgeTypes)
      description: |-
        Returns a set of unique edge types based on edges that are either owned by the tenant or assigned to the customer which user is performing the request.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getEdgeTypesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitySubtype'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}:
    get:
      tags:
        - edge-controller
      summary: Get Edge (getEdgeById)
      description: |-
        Get the Edge object based on the provided Edge Id. If the user has the authority of 'Tenant Administrator', the server checks that the edge is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the edge is assigned to the same customer.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getEdgeByIdUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - edge-controller
      summary: Delete edge (deleteEdge)
      description: |-
        Deletes the edge. Referencing non-existing edge Id will cause an error.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteEdgeUsingDELETE
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/upgrade/available:
    get:
      tags:
        - edge-controller
      summary: Is edge upgrade enabled (isEdgeUpgradeAvailable)
      description: Returns 'true' if upgrade available for connected edge, 'false' - otherwise.
      operationId: isEdgeUpgradeAvailableUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/{ruleChainId}/root:
    post:
      tags:
        - edge-controller
      summary: Set root rule chain for provided edge (setEdgeRootRuleChain)
      description: |-
        Change root rule chain of the edge to the new provided rule chain. 
        This operation will send a notification to update root rule chain on remote edge service.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: setEdgeRootRuleChainUsingPOST
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edges:
    get:
      tags:
        - edge-controller
      summary: Get Tenant Edges (getEdges)
      description: |-
        Returns a page of edges owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getEdgesUsingGET
      parameters:
        - name: edgeIds
          in: query
          description: A list of edges ids, separated by comma ','
          required: true
          style: form
          explode: true
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the edge name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Edge»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - edge-controller
      summary: Find related edges (findByQuery)
      description: |-
        Returns all edges that are related to the specific entity. The entity id, relation type, edge types, depth of the search, and other query parameters defined using complex 'EdgeSearchQuery' object. See 'Model' tab of the Parameters for more info.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: findByQueryUsingPOST_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeSearchQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Edge'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edges/enabled:
    get:
      tags:
        - edge-controller
      summary: Is edges support enabled (isEdgesSupportEnabled)
      description: Returns 'true' if edges support enabled on server, 'false' - otherwise.
      operationId: isEdgesSupportEnabledUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/edgeInfos:
    get:
      tags:
        - edge-controller
      summary: Get Tenant Edge Infos (getTenantEdgeInfos)
      description: |-
        Returns a page of edges info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Edge Info is an extension of the default Edge object that contains information about the assigned customer name. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantEdgeInfosUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: A string value representing the edge type. For example, 'default'
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the edge name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EdgeInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/edges:
    get:
      tags:
        - edge-controller
      summary: Get Tenant Edges (getTenantEdges)
      description: |-
        Returns a page of edges owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantEdgesUsingGET
      parameters:
        - name: edgeName
          in: query
          description: Unique name of the edge
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: A string value representing the edge type. For example, 'default'
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the edge name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Edge»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/events:
    get:
      tags:
        - edge-event-controller
      summary: Get Edge Events (getEdgeEvents)
      description: 'Returns a page of edge events for the requested edge. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the ''Model'' tab of the Response Class for more details. '
      operationId: getEdgeEventsUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the edge event type name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - label
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: Timestamp. Edge events with creation time before it won't be queried
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: Timestamp. Edge events with creation time after it won't be queried
          required: false
          style: form
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EdgeEvent»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/branches:
    get:
      tags:
        - entities-version-control-controller
      summary: List branches (listBranches)
      description: |-
        Lists branches available in the remote repository. 

        Response example: 
        ```json
        [
          {
            "name": "master",
            "default": true
          },
          {
            "name": "dev",
            "default": false
          },
          {
            "name": "dev-2",
            "default": false
          }
        ]
        ```
      operationId: listBranchesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«List«BranchInfo»»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/diff/{entityType}/{internalEntityUuid}:
    get:
      tags:
        - entities-version-control-controller
      summary: Compare entity data to version (compareEntityDataToVersion)
      description: |-
        Returns an object with current entity data and the one at a specific version. Entity data structure is the same as stored in a repository. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: compareEntityDataToVersionUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - ALARM
              - API_USAGE_STATE
              - ASSET
              - ASSET_PROFILE
              - CUSTOMER
              - DASHBOARD
              - DEVICE
              - DEVICE_PROFILE
              - EDGE
              - ENTITY_VIEW
              - NOTIFICATION
              - NOTIFICATION_REQUEST
              - NOTIFICATION_RULE
              - NOTIFICATION_TARGET
              - NOTIFICATION_TEMPLATE
              - OTA_PACKAGE
              - QUEUE
              - RPC
              - RULE_CHAIN
              - RULE_NODE
              - TB_RESOURCE
              - TENANT
              - TENANT_PROFILE
              - USER
              - WIDGETS_BUNDLE
              - WIDGET_TYPE
        - name: internalEntityUuid
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: versionId
          in: query
          description: Version id, for example fd82625bdd7d6131cf8027b44ee967012ecaf990. Represents commit hash.
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«EntityDataDiff»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/entity:
    post:
      tags:
        - entities-version-control-controller
      summary: Load entities version (loadEntitiesVersion)
      description: |-
        Loads specific version of remote entities (or single entity) by request. Supported entity types: CUSTOMER, ASSET, RULE_CHAIN, DASHBOARD, DEVICE_PROFILE, DEVICE, ENTITY_VIEW, WIDGETS_BUNDLE.

        There are multiple types of request. Each of them requires branch name (`branch`) and version id (`versionId`). Request of type `SINGLE_ENTITY` is needed to restore a concrete version of a specific entity. It contains id of a remote entity (`externalEntityId`) and additional configuration (`config`):
        - `loadRelations` - to update relations list (in case `saveRelations` option was enabled during version creation);
        - `loadAttributes` - to load entity attributes (if `saveAttributes` config option was enabled);
        - `loadCredentials` - to update device credentials (if `saveCredentials` option was enabled during version creation).

        An example of such request:
        ```json
        {
          "type": "SINGLE_ENTITY",
          
          "branch": "dev",
          "versionId": "b3c28d722d328324c7c15b0b30047b0c40011cf7",
          
          "externalEntityId": {
            "entityType": "DEVICE",
            "id": "b7944123-d4f4-11ec-847b-0f432358ab48"
          },
          "config": {
            "loadRelations": false,
            "loadAttributes": true,
            "loadCredentials": true
          }
        }
        ```

        Another request type (`ENTITY_TYPE`) is needed to load specific version of the whole entity types. It contains a structure with entity types to load and configs for each entity type (`entityTypes`). For each specified entity type, the method will load all remote entities of this type that are present at the version. A config for each entity type contains the same options as in `SINGLE_ENTITY` request type, and additionally contains following options:
        - `removeOtherEntities` - to remove local entities that are not present on the remote - basically to    overwrite local entity type with the remote one;
        - `findExistingEntityByName` - when you are loading some remote entities that are not yet present at this tenant,    try to find existing entity by name and update it rather than create new.

        Here is an example of the request to completely restore version of the whole device entity type:
        ```json
        {
          "type": "ENTITY_TYPE",

          "branch": "dev",
          "versionId": "b3c28d722d328324c7c15b0b30047b0c40011cf7",

          "entityTypes": {
            "DEVICE": {
              "removeOtherEntities": true,
              "findExistingEntityByName": false,
              "loadRelations": true,
              "loadAttributes": true,
              "loadCredentials": true
            }
          }
        }
        ```

        The response will contain generated request UUID that is to be used to check the status of operation via `getVersionLoadRequestStatus`.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: loadEntitiesVersionUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionLoadRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/entity/{entityType}/{versionId}:
    get:
      tags:
        - entities-version-control-controller
      summary: List entities at version (listEntitiesAtVersion)
      description: |-
        Returns a list of remote entities of a specific entity type that are available at a concrete version. 
        Each entity item in the result has `externalId` property. Entities order will be the same as in the repository.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: listEntitiesAtVersionUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - ALARM
              - API_USAGE_STATE
              - ASSET
              - ASSET_PROFILE
              - CUSTOMER
              - DASHBOARD
              - DEVICE
              - DEVICE_PROFILE
              - EDGE
              - ENTITY_VIEW
              - NOTIFICATION
              - NOTIFICATION_REQUEST
              - NOTIFICATION_RULE
              - NOTIFICATION_TARGET
              - NOTIFICATION_TEMPLATE
              - OTA_PACKAGE
              - QUEUE
              - RPC
              - RULE_CHAIN
              - RULE_NODE
              - TB_RESOURCE
              - TENANT
              - TENANT_PROFILE
              - USER
              - WIDGETS_BUNDLE
              - WIDGET_TYPE
        - name: versionId
          in: path
          description: Version id, for example fd82625bdd7d6131cf8027b44ee967012ecaf990. Represents commit hash.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«List«VersionedEntityInfo»»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/entity/{requestId}/status:
    get:
      tags:
        - entities-version-control-controller
      summary: Get version load request status (getVersionLoadRequestStatus)
      description: |-
        Returns the status of previously made version load request. The structure contains following parameters:
        - `done` - if the request was successfully processed;
        - `result` - a list of load results for each entity type:
             - `created` - created entities count;
             - `updated` - updated entities count;
             - `deleted` - removed entities count.
        - `error` - if an error occurred during processing, error info:
             - `type` - error type;
             - `source` - an external id of remote entity;
             - `target` - if failed to find referenced entity by external id - this external id;
             - `message` - error message.

        An example of successfully processed request status:
        ```json
        {
          "done": true,
          "result": [
            {
              "entityType": "DEVICE",
              "created": 10,
              "updated": 5,
              "deleted": 5
            },
             {
              "entityType": "ASSET",
              "created": 4,
              "updated": 0,
              "deleted": 8
            }
          ]
        }
        ```

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getVersionLoadRequestStatusUsingGET
      parameters:
        - name: requestId
          in: path
          description: A string value representing the version control request id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionLoadResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/entity/{versionId}:
    get:
      tags:
        - entities-version-control-controller
      summary: List all entities at version (listAllEntitiesAtVersion)
      description: |-
        Returns a list of all remote entities available in a specific version. Response type is the same as for listAllEntitiesAtVersion API method. 
        Returned entities order will be the same as in the repository.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: listAllEntitiesAtVersionUsingGET
      parameters:
        - name: versionId
          in: path
          description: Version id, for example fd82625bdd7d6131cf8027b44ee967012ecaf990. Represents commit hash.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«List«VersionedEntityInfo»»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/info/{versionId}/{entityType}/{externalEntityUuid}:
    get:
      tags:
        - entities-version-control-controller
      summary: Get entity data info (getEntityDataInfo)
      description: |-
        Retrieves short info about the remote entity by external id at a concrete version. 
        Returned entity data info contains following properties: `hasRelations` (whether stored entity data contains relations), `hasAttributes` (contains attributes) and `hasCredentials` (whether stored device data has credentials).

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getEntityDataInfoUsingGET
      parameters:
        - name: versionId
          in: path
          description: Version id, for example fd82625bdd7d6131cf8027b44ee967012ecaf990. Represents commit hash.
          required: true
          style: simple
          schema:
            type: string
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - ALARM
              - API_USAGE_STATE
              - ASSET
              - ASSET_PROFILE
              - CUSTOMER
              - DASHBOARD
              - DEVICE
              - DEVICE_PROFILE
              - EDGE
              - ENTITY_VIEW
              - NOTIFICATION
              - NOTIFICATION_REQUEST
              - NOTIFICATION_RULE
              - NOTIFICATION_TARGET
              - NOTIFICATION_TEMPLATE
              - OTA_PACKAGE
              - QUEUE
              - RPC
              - RULE_CHAIN
              - RULE_NODE
              - TB_RESOURCE
              - TENANT
              - TENANT_PROFILE
              - USER
              - WIDGETS_BUNDLE
              - WIDGET_TYPE
        - name: externalEntityUuid
          in: path
          description: A string value representing external entity id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«EntityDataInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/version:
    get:
      tags:
        - entities-version-control-controller
      summary: List all versions (listVersions)
      description: |-
        Lists all available versions in a branch for all entity types. 
        If specified branch does not exist - empty page data will be returned. The response format is the same as for `listEntityVersions` API method.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: listVersionsUsingGET
      parameters:
        - name: branch
          in: query
          description: The name of the working branch, for example 'master'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the entity version name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - timestamp
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«PageData«EntityVersion»»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - entities-version-control-controller
      summary: Save entities version (saveEntitiesVersion)
      description: |-
        Creates a new version of entities (or a single entity) by request.
        Supported entity types: CUSTOMER, ASSET, RULE_CHAIN, DASHBOARD, DEVICE_PROFILE, DEVICE, ENTITY_VIEW, WIDGETS_BUNDLE.

        There are two available types of request: `SINGLE_ENTITY` and `COMPLEX`. Each of them contains version name (`versionName`) and name of a branch (`branch`) to create version (commit) in. If specified branch does not exists in a remote repo, then new empty branch will be created. Request of the `SINGLE_ENTITY` type has id of an entity (`entityId`) and additional configuration (`config`) which has following options: 
        - `saveRelations` - whether to add inbound and outbound relations of type COMMON to created entity version;
        - `saveAttributes` - to save attributes of server scope (and also shared scope for devices);
        - `saveCredentials` - when saving a version of a device, to add its credentials to the version.

        An example of a `SINGLE_ENTITY` version create request:
        ```json
        {
          "type": "SINGLE_ENTITY",

          "versionName": "Version 1.0",
          "branch": "dev",

          "entityId": {
            "entityType": "DEVICE",
            "id": "b79448e0-d4f4-11ec-847b-0f432358ab48"
          },
          "config": {
            "saveRelations": true,
            "saveAttributes": true,
            "saveCredentials": false
          }
        }
        ```

        Second request type (`COMPLEX`), additionally to `branch` and `versionName`, contains following properties:
        - `entityTypes` - a structure with entity types to export and configuration for each entity type;    this configuration has all the options available for `SINGLE_ENTITY` and additionally has these ones: 
             - `allEntities` and `entityIds` - if you want to save the version of all entities of the entity type         then set `allEntities` param to true, otherwise set it to false and specify the list of specific entities (`entityIds`);
             - `syncStrategy` - synchronization strategy to use for this entity type: when set to `OVERWRITE`         then the list of remote entities of this type will be overwritten by newly added entities. If set to         `MERGE` - existing remote entities of this entity type will not be removed, new entities will just         be added on top (or existing remote entities will be updated).
        - `syncStrategy` - default synchronization strategy to use when it is not specified for an entity type.

        Example for this type of request:
        ```json
        {
          "type": "COMPLEX",

          "versionName": "Devices and profiles: release 2",
          "branch": "master",

          "syncStrategy": "OVERWRITE",
          "entityTypes": {
            "DEVICE": {
              "syncStrategy": null,
              "allEntities": true,
              "saveRelations": true,
              "saveAttributes": true,
              "saveCredentials": true
            },
            "DEVICE_PROFILE": {
              "syncStrategy": "MERGE",
              "allEntities": false,
              "entityIds": [
                "b79448e0-d4f4-11ec-847b-0f432358ab48"
              ],
              "saveRelations": true
            }
          }
        }
        ```

        Response wil contain generated request UUID, that can be then used to retrieve status of operation via `getVersionCreateRequestStatus`.


        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveEntitiesVersionUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionCreateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«uuid»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/version/{entityType}/{externalEntityUuid}:
    get:
      tags:
        - entities-version-control-controller
      summary: List entity versions (listEntityVersions)
      description: |-
        Returns list of versions for a specific entity in a concrete branch. 
        You need to specify external id of an entity to list versions for. This is `externalId` property of an entity, or otherwise if not set - simply id of this entity. 
        If specified branch does not exist - empty page data will be returned. 

        Each version info item has timestamp, id, name and author. Version id can then be used to restore the version. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Response example: 
        ```json
        {
          "data": [
            {
              "timestamp": 1655198593000,
              "id": "fd82625bdd7d6131cf8027b44ee967012ecaf990",
              "name": "Devices and assets - v2.0",
              "author": "John Doe <johndoe@gmail.com>"
            },
            {
              "timestamp": 1655198528000,
              "id": "682adcffa9c8a2f863af6f00c4850323acbd4219",
              "name": "Update my device",
              "author": "John Doe <johndoe@gmail.com>"
            },
            {
              "timestamp": 1655198280000,
              "id": "d2a6087c2b30e18cc55e7cdda345a8d0dfb959a4",
              "name": "Devices and assets - v1.0",
              "author": "John Doe <johndoe@gmail.com>"
            }
          ],
          "totalPages": 1,
          "totalElements": 3,
          "hasNext": false
        }
        ```

        Available for users with 'TENANT_ADMIN' authority.
      operationId: listEntityVersionsUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - ALARM
              - API_USAGE_STATE
              - ASSET
              - ASSET_PROFILE
              - CUSTOMER
              - DASHBOARD
              - DEVICE
              - DEVICE_PROFILE
              - EDGE
              - ENTITY_VIEW
              - NOTIFICATION
              - NOTIFICATION_REQUEST
              - NOTIFICATION_RULE
              - NOTIFICATION_TARGET
              - NOTIFICATION_TEMPLATE
              - OTA_PACKAGE
              - QUEUE
              - RPC
              - RULE_CHAIN
              - RULE_NODE
              - TB_RESOURCE
              - TENANT
              - TENANT_PROFILE
              - USER
              - WIDGETS_BUNDLE
              - WIDGET_TYPE
        - name: externalEntityUuid
          in: path
          description: A string value representing external entity id. This is `externalId` property of an entity, or otherwise if not set - simply id of this entity.
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: branch
          in: query
          description: The name of the working branch, for example 'master'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the entity version name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - timestamp
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«PageData«EntityVersion»»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/version/{entityType}:
    get:
      tags:
        - entities-version-control-controller
      summary: List entity type versions (listEntityTypeVersions)
      description: |-
        Returns list of versions of an entity type in a branch. This is a collected list of versions that were created for entities of this type in a remote branch. 
        If specified branch does not exist - empty page data will be returned. The response structure is the same as for `listEntityVersions` API method.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: listEntityTypeVersionsUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - ALARM
              - API_USAGE_STATE
              - ASSET
              - ASSET_PROFILE
              - CUSTOMER
              - DASHBOARD
              - DEVICE
              - DEVICE_PROFILE
              - EDGE
              - ENTITY_VIEW
              - NOTIFICATION
              - NOTIFICATION_REQUEST
              - NOTIFICATION_RULE
              - NOTIFICATION_TARGET
              - NOTIFICATION_TEMPLATE
              - OTA_PACKAGE
              - QUEUE
              - RPC
              - RULE_CHAIN
              - RULE_NODE
              - TB_RESOURCE
              - TENANT
              - TENANT_PROFILE
              - USER
              - WIDGETS_BUNDLE
              - WIDGET_TYPE
        - name: branch
          in: query
          description: The name of the working branch, for example 'master'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the entity version name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - timestamp
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«PageData«EntityVersion»»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entities/vc/version/{requestId}/status:
    get:
      tags:
        - entities-version-control-controller
      summary: Get version create request status (getVersionCreateRequestStatus)
      description: |-
        Returns the status of previously made version create request. 

        This status contains following properties:
        - `done` - whether request processing is finished;
        - `version` - created version info: timestamp, version id (commit hash), commit name and commit author;
        - `added` - count of items that were created in the remote repo;
        - `modified` - modified items count;
        - `removed` - removed items count;
        - `error` - error message, if an error occurred while handling the request.

        An example of successful status:
        ```json
        {
          "done": true,
          "added": 10,
          "modified": 2,
          "removed": 5,
          "version": {
            "timestamp": 1655198528000,
            "id":"8a834dd389ed80e0759ba8ee338b3f1fd160a114",
            "name": "My devices v2.0",
            "author": "John Doe"
          },
          "error": null
        }
        ```

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getVersionCreateRequestStatusUsingGET
      parameters:
        - name: requestId
          in: path
          description: A string value representing the version control request id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionCreationResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarmsQuery/count:
    post:
      tags:
        - entity-query-controller
      summary: Count Alarms by Query (countAlarmsByQuery)
      description: Returns the number of alarms that match the query definition.
      operationId: countAlarmsByQueryUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlarmCountQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/alarmsQuery/find:
    post:
      tags:
        - entity-query-controller
      summary: Find Alarms by Query
      description: |-
        This method description defines how Alarm Data Query extends the Entity Data Query. See method 'Find Entity Data by Query' first to get the info about 'Entity Data Query'.

         The platform will first search the entities that match the entity and key filters. Then, the platform will use 'Alarm Page Link' to filter the alarms related to those entities. Finally, platform fetch the properties of alarm that are defined in the **'alarmFields'** and combine them with the other entity, attribute and latest time-series fields to return the result. 

         See example of the alarm query below. The query will search first 100 active alarms with type 'Temperature Alarm' or 'Fire Alarm' for any device with current temperature > 0. The query will return combination of the entity fields: name of the device, device model and latest temperature reading and alarms fields: createdTime, type, severity and status: 

        ```json
        {
          "entityFilter": {
            "type": "entityType",
            "resolveMultiple": true,
            "entityType": "DEVICE"
          },
          "pageLink": {
            "page": 0,
            "pageSize": 100,
            "textSearch": null,
            "searchPropagatedAlarms": false,
            "statusList": [
              "ACTIVE"
            ],
            "severityList": [
              "CRITICAL",
              "MAJOR"
            ],
            "typeList": [
              "Temperature Alarm",
              "Fire Alarm"
            ],
            "sortOrder": {
              "key": {
                "key": "createdTime",
                "type": "ALARM_FIELD"
              },
              "direction": "DESC"
            },
            "timeWindow": 86400000
          },
          "keyFilters": [
            {
              "key": {
                "type": "TIME_SERIES",
                "key": "temperature"
              },
              "valueType": "NUMERIC",
              "predicate": {
                "operation": "GREATER",
                "value": {
                  "defaultValue": 0,
                  "dynamicValue": null
                },
                "type": "NUMERIC"
              }
            }
          ],
          "alarmFields": [
            {
              "type": "ALARM_FIELD",
              "key": "createdTime"
            },
            {
              "type": "ALARM_FIELD",
              "key": "type"
            },
            {
              "type": "ALARM_FIELD",
              "key": "severity"
            },
            {
              "type": "ALARM_FIELD",
              "key": "status"
            }
          ],
          "entityFields": [
            {
              "type": "ENTITY_FIELD",
              "key": "name"
            }
          ],
          "latestValues": [
            {
              "type": "ATTRIBUTE",
              "key": "model"
            },
            {
              "type": "TIME_SERIES",
              "key": "temperature"
            }
          ]
        }
        ```
      operationId: findAlarmDataByQueryUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlarmDataQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«AlarmData»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entitiesQuery/count:
    post:
      tags:
        - entity-query-controller
      summary: Count Entities by Query
      description: |-
        Allows to run complex queries to search the count of platform entities (devices, assets, customers, etc) based on the combination of main entity filter and multiple key filters. Returns the number of entities that match the query definition.

        # Query Definition



        Main **entity filter** is mandatory and defines generic search criteria. For example, "find all devices with profile 'Moisture Sensor'" or "Find all devices related to asset 'Building A'"

        Optional **key filters** allow to filter results of the entity filter by complex criteria against main entity fields (name, label, type, etc), attributes and telemetry. For example, "temperature > 20 or temperature< 10" or "name starts with 'T', and attribute 'model' is 'T1000', and timeseries field 'batteryLevel' > 40".

        Let's review the example:

        ```json
        {
          "entityFilter": {
            "type": "entityType",
            "entityType": "DEVICE"
          },
          "keyFilters": [
            {
              "key": {
                "type": "ATTRIBUTE",
                "key": "active"
              },
              "valueType": "BOOLEAN",
              "predicate": {
                "operation": "EQUAL",
                "value": {
                  "defaultValue": true,
                  "dynamicValue": null
                },
                "type": "BOOLEAN"
              }
            }
          ]
        }
        ```

         Example mentioned above search all devices which have attribute 'active' set to 'true'. Now let's review available entity filters and key filters syntax:

         # Entity Filters
        Entity Filter body depends on the 'type' parameter. Let's review available entity filter types. In fact, they do correspond to available dashboard aliases.

        ## Single Entity

        Allows to filter only one entity based on the id. For example, this entity filter selects certain device:

        ```json
        {
          "type": "singleEntity",
          "singleEntity": {
            "id": "d521edb0-2a7a-11ec-94eb-213c95f54092",
            "entityType": "DEVICE"
          }
        }
        ```

        ## Entity List Filter

        Allows to filter entities of the same type using their ids. For example, this entity filter selects two devices:

        ```json
        {
          "type": "entityList",
          "entityType": "DEVICE",
          "entityList": [
            "e6501f30-2a7a-11ec-94eb-213c95f54092",
            "e6657bf0-2a7a-11ec-94eb-213c95f54092"
          ]
        }
        ```

        ## Entity Name Filter

        Allows to filter entities of the same type using the **'starts with'** expression over entity name. For example, this entity filter selects all devices which name starts with 'Air Quality':

        ```json
        {
          "type": "entityName",
          "entityType": "DEVICE",
          "entityNameFilter": "Air Quality"
        }
        ```

        ## Entity Type Filter

        Allows to filter entities based on their type (CUSTOMER, USER, DASHBOARD, ASSET, DEVICE, etc)For example, this entity filter selects all tenant customers:

        ```json
        {
          "type": "entityType",
          "entityType": "CUSTOMER"
        }
        ```

        ## Asset Type Filter

        Allows to filter assets based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'charging station' assets which name starts with 'Tesla':

        ```json
        {
          "type": "assetType",
          "assetType": "charging station",
          "assetNameFilter": "Tesla"
        }
        ```

        ## Device Type Filter

        Allows to filter devices based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Temperature Sensor' devices which name starts with 'ABC':

        ```json
        {
          "type": "deviceType",
          "deviceType": "Temperature Sensor",
          "deviceNameFilter": "ABC"
        }
        ```

        ## Edge Type Filter

        Allows to filter edge instances based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Factory' edge instances which name starts with 'Nevada':

        ```json
        {
          "type": "edgeType",
          "edgeType": "Factory",
          "edgeNameFilter": "Nevada"
        }
        ```

        ## Entity View Filter

        Allows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':

        ```json
        {
          "type": "entityViewType",
          "entityViewType": "Concrete Mixer",
          "entityViewNameFilter": "CAT"
        }
        ```

        ## Api Usage Filter

        Allows to query for Api Usage based on optional customer id. If the customer id is not set, returns current tenant API usage.For example, this entity filter selects the 'Api Usage' entity for customer with id 'e6501f30-2a7a-11ec-94eb-213c95f54092':

        ```json
        {
          "type": "apiUsageState",
          "customerId": {
            "id": "d521edb0-2a7a-11ec-94eb-213c95f54092",
            "entityType": "CUSTOMER"
          }
        }
        ```

        ## Relations Query Filter

        Allows to filter entities that are related to the provided root entity. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'filter' object allows you to define the relation type and set of acceptable entity types to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only those who match the 'filters'.

        For example, this entity filter selects all devices and assets which are related to the asset with id 'e51de0c0-2a7a-11ec-94eb-213c95f54092':

        ```json
        {
          "type": "relationsQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e51de0c0-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "filters": [
            {
              "relationType": "Contains",
              "entityTypes": [
                "DEVICE",
                "ASSET"
              ]
            }
          ]
        }
        ```

        ## Asset Search Query

        Allows to filter assets that are related to the provided root entity. Filters related assets based on the relation type and set of asset types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'assetTypes' defines the type of the asset to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only assets that match 'relationType' and 'assetTypes' conditions.

        For example, this entity filter selects 'charging station' assets which are related to the asset with id 'e51de0c0-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:

        ```json
        {
          "type": "assetSearchQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e51de0c0-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "relationType": "Contains",
          "assetTypes": [
            "charging station"
          ]
        }
        ```

        ## Device Search Query

        Allows to filter devices that are related to the provided root entity. Filters related devices based on the relation type and set of device types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'deviceTypes' defines the type of the device to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.

        For example, this entity filter selects 'Charging port' and 'Air Quality Sensor' devices which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:

        ```json
        {
          "type": "deviceSearchQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e52b0020-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 2,
          "fetchLastLevelOnly": true,
          "relationType": "Contains",
          "deviceTypes": [
            "Air Quality Sensor",
            "Charging port"
          ]
        }
        ```

        ## Entity View Query

        Allows to filter entity views that are related to the provided root entity. Filters related entity views based on the relation type and set of entity view types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'entityViewTypes' defines the type of the entity view to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.

        For example, this entity filter selects 'Concrete mixer' entity views which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:

        ```json
        {
          "type": "entityViewSearchQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e52b0020-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "relationType": "Contains",
          "entityViewTypes": [
            "Concrete mixer"
          ]
        }
        ```

        ## Edge Search Query

        Allows to filter edge instances that are related to the provided root entity. Filters related edge instances based on the relation type and set of edge types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'deviceTypes' defines the type of the device to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.

        For example, this entity filter selects 'Factory' edge instances which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:

        ```json
        {
          "type": "deviceSearchQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e52b0020-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 2,
          "fetchLastLevelOnly": true,
          "relationType": "Contains",
          "edgeTypes": [
            "Factory"
          ]
        }
        ```

         # Key Filters
        Key Filter allows you to define complex logical expressions over entity field, attribute or latest time-series value. The filter is defined using 'key', 'valueType' and 'predicate' objects. Single Entity Query may have zero, one or multiple predicates. If multiple filters are defined, they are evaluated using logical 'AND'. The example below checks that temperature of the entity is above 20 degrees:

        ```json
        {
          "key": {
            "type": "TIME_SERIES",
            "key": "temperature"
          },
          "valueType": "NUMERIC",
          "predicate": {
            "operation": "GREATER",
            "value": {
              "defaultValue": 20,
              "dynamicValue": null
            },
            "type": "NUMERIC"
          }
        }
        ```

         Now let's review 'key', 'valueType' and 'predicate' objects in detail.

        ## Filter Key

        Filter Key defines either entity field, attribute or telemetry. It is a JSON object that consists the key name and type. The following filter key types are supported: 

         * 'CLIENT_ATTRIBUTE' - used for client attributes; 
         * 'SHARED_ATTRIBUTE' - used for shared attributes; 
         * 'SERVER_ATTRIBUTE' - used for server attributes; 
         * 'ATTRIBUTE' - used for any of the above; 
         * 'TIME_SERIES' - used for time-series values; 
         * 'ENTITY_FIELD' - used for accessing entity fields like 'name', 'label', etc. The list of available fields depends on the entity type; 
         * 'ALARM_FIELD' - similar to entity field, but is used in alarm queries only; 


         Let's review the example:

        ```json
        {
          "type": "TIME_SERIES",
          "key": "temperature"
        }
        ```

        ## Value Type and Operations

        Provides a hint about the data type of the entity field that is defined in the filter key. The value type impacts the list of possible operations that you may use in the corresponding predicate. For example, you may use 'STARTS_WITH' or 'END_WITH', but you can't use 'GREATER_OR_EQUAL' for string values.The following filter value types and corresponding predicate operations are supported: 

         * 'STRING' - used to filter any 'String' or 'JSON' values. Operations: EQUAL, NOT_EQUAL, STARTS_WITH, ENDS_WITH, CONTAINS, NOT_CONTAINS; 
         * 'NUMERIC' - used for 'Long' and 'Double' values. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; 
         * 'BOOLEAN' - used for boolean values. Operations: EQUAL, NOT_EQUAL;
         * 'DATE_TIME' - similar to numeric, transforms value to milliseconds since epoch. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; 


        ## Filter Predicate

        Filter Predicate defines the logical expression to evaluate. The list of available operations depends on the filter value type, see above. Platform supports 4 predicate types: 'STRING', 'NUMERIC', 'BOOLEAN' and 'COMPLEX'. The last one allows to combine multiple operations over one filter key.

        Simple predicate example to check 'value < 100': 

        ```json
        {
          "operation": "LESS",
          "value": {
            "defaultValue": 100,
            "dynamicValue": null
          },
          "type": "NUMERIC"
        }
        ```

        Complex predicate example, to check 'value < 10 or value > 20': 

        ```json
        {
          "type": "COMPLEX",
          "operation": "OR",
          "predicates": [
            {
              "operation": "LESS",
              "value": {
                "defaultValue": 10,
                "dynamicValue": null
              },
              "type": "NUMERIC"
            },
            {
              "operation": "GREATER",
              "value": {
                "defaultValue": 20,
                "dynamicValue": null
              },
              "type": "NUMERIC"
            }
          ]
        }
        ```

        More complex predicate example, to check 'value < 10 or (value > 50 && value < 60)': 

        ```json
        {
          "type": "COMPLEX",
          "operation": "OR",
          "predicates": [
            {
              "operation": "LESS",
              "value": {
                "defaultValue": 10,
                "dynamicValue": null
              },
              "type": "NUMERIC"
            },
            {
              "type": "COMPLEX",
              "operation": "AND",
              "predicates": [
                {
                  "operation": "GREATER",
                  "value": {
                    "defaultValue": 50,
                    "dynamicValue": null
                  },
                  "type": "NUMERIC"
                },
                {
                  "operation": "LESS",
                  "value": {
                    "defaultValue": 60,
                    "dynamicValue": null
                  },
                  "type": "NUMERIC"
                }
              ]
            }
          ]
        }
        ```

         You may also want to replace hardcoded values (for example, temperature > 20) with the more dynamic expression (for example, temperature > 'value of the tenant attribute with key 'temperatureThreshold'). It is possible to use 'dynamicValue' to define attribute of the tenant, customer or user that is performing the API call. See example below: 

        ```json
        {
          "operation": "GREATER",
          "value": {
            "defaultValue": 0,
            "dynamicValue": {
              "sourceType": "CURRENT_USER",
              "sourceAttribute": "temperatureThreshold"
            }
          },
          "type": "NUMERIC"
        }
        ```

         Note that you may use 'CURRENT_USER', 'CURRENT_CUSTOMER' and 'CURRENT_TENANT' as a 'sourceType'. The 'defaultValue' is used when the attribute with such a name is not defined for the chosen source.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: countEntitiesByQueryUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCountQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entitiesQuery/find:
    post:
      tags:
        - entity-query-controller
      summary: Find Entity Data by Query
      description: |-
        Allows to run complex queries over platform entities (devices, assets, customers, etc) based on the combination of main entity filter and multiple key filters. Returns the paginated result of the query that contains requested entity fields and latest values of requested attributes and time-series data.

        # Query Definition



        Main **entity filter** is mandatory and defines generic search criteria. For example, "find all devices with profile 'Moisture Sensor'" or "Find all devices related to asset 'Building A'"

        Optional **key filters** allow to filter results of the **entity filter** by complex criteria against main entity fields (name, label, type, etc), attributes and telemetry. For example, "temperature > 20 or temperature< 10" or "name starts with 'T', and attribute 'model' is 'T1000', and timeseries field 'batteryLevel' > 40".

        The **entity fields** and **latest values** contains list of entity fields and latest attribute/telemetry fields to fetch for each entity.

        The **page link** contains information about the page to fetch and the sort ordering.

        Let's review the example:

        ```json
        {
          "entityFilter": {
            "type": "entityType",
            "resolveMultiple": true,
            "entityType": "DEVICE"
          },
          "keyFilters": [
            {
              "key": {
                "type": "TIME_SERIES",
                "key": "temperature"
              },
              "valueType": "NUMERIC",
              "predicate": {
                "operation": "GREATER",
                "value": {
                  "defaultValue": 0,
                  "dynamicValue": {
                    "sourceType": "CURRENT_USER",
                    "sourceAttribute": "temperatureThreshold",
                    "inherit": false
                  }
                },
                "type": "NUMERIC"
              }
            }
          ],
          "entityFields": [
            {
              "type": "ENTITY_FIELD",
              "key": "name"
            },
            {
              "type": "ENTITY_FIELD",
              "key": "label"
            },
            {
              "type": "ENTITY_FIELD",
              "key": "additionalInfo"
            }
          ],
          "latestValues": [
            {
              "type": "ATTRIBUTE",
              "key": "model"
            },
            {
              "type": "TIME_SERIES",
              "key": "temperature"
            }
          ],
          "pageLink": {
            "page": 0,
            "pageSize": 10,
            "sortOrder": {
              "key": {
                "key": "name",
                "type": "ENTITY_FIELD"
              },
              "direction": "ASC"
            }
          }
        }
        ```

         Example mentioned above search all devices which have attribute 'active' set to 'true'. Now let's review available entity filters and key filters syntax:

         # Entity Filters
        Entity Filter body depends on the 'type' parameter. Let's review available entity filter types. In fact, they do correspond to available dashboard aliases.

        ## Single Entity

        Allows to filter only one entity based on the id. For example, this entity filter selects certain device:

        ```json
        {
          "type": "singleEntity",
          "singleEntity": {
            "id": "d521edb0-2a7a-11ec-94eb-213c95f54092",
            "entityType": "DEVICE"
          }
        }
        ```

        ## Entity List Filter

        Allows to filter entities of the same type using their ids. For example, this entity filter selects two devices:

        ```json
        {
          "type": "entityList",
          "entityType": "DEVICE",
          "entityList": [
            "e6501f30-2a7a-11ec-94eb-213c95f54092",
            "e6657bf0-2a7a-11ec-94eb-213c95f54092"
          ]
        }
        ```

        ## Entity Name Filter

        Allows to filter entities of the same type using the **'starts with'** expression over entity name. For example, this entity filter selects all devices which name starts with 'Air Quality':

        ```json
        {
          "type": "entityName",
          "entityType": "DEVICE",
          "entityNameFilter": "Air Quality"
        }
        ```

        ## Entity Type Filter

        Allows to filter entities based on their type (CUSTOMER, USER, DASHBOARD, ASSET, DEVICE, etc)For example, this entity filter selects all tenant customers:

        ```json
        {
          "type": "entityType",
          "entityType": "CUSTOMER"
        }
        ```

        ## Asset Type Filter

        Allows to filter assets based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'charging station' assets which name starts with 'Tesla':

        ```json
        {
          "type": "assetType",
          "assetType": "charging station",
          "assetNameFilter": "Tesla"
        }
        ```

        ## Device Type Filter

        Allows to filter devices based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Temperature Sensor' devices which name starts with 'ABC':

        ```json
        {
          "type": "deviceType",
          "deviceType": "Temperature Sensor",
          "deviceNameFilter": "ABC"
        }
        ```

        ## Edge Type Filter

        Allows to filter edge instances based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Factory' edge instances which name starts with 'Nevada':

        ```json
        {
          "type": "edgeType",
          "edgeType": "Factory",
          "edgeNameFilter": "Nevada"
        }
        ```

        ## Entity View Filter

        Allows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':

        ```json
        {
          "type": "entityViewType",
          "entityViewType": "Concrete Mixer",
          "entityViewNameFilter": "CAT"
        }
        ```

        ## Api Usage Filter

        Allows to query for Api Usage based on optional customer id. If the customer id is not set, returns current tenant API usage.For example, this entity filter selects the 'Api Usage' entity for customer with id 'e6501f30-2a7a-11ec-94eb-213c95f54092':

        ```json
        {
          "type": "apiUsageState",
          "customerId": {
            "id": "d521edb0-2a7a-11ec-94eb-213c95f54092",
            "entityType": "CUSTOMER"
          }
        }
        ```

        ## Relations Query Filter

        Allows to filter entities that are related to the provided root entity. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'filter' object allows you to define the relation type and set of acceptable entity types to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only those who match the 'filters'.

        For example, this entity filter selects all devices and assets which are related to the asset with id 'e51de0c0-2a7a-11ec-94eb-213c95f54092':

        ```json
        {
          "type": "relationsQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e51de0c0-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "filters": [
            {
              "relationType": "Contains",
              "entityTypes": [
                "DEVICE",
                "ASSET"
              ]
            }
          ]
        }
        ```

        ## Asset Search Query

        Allows to filter assets that are related to the provided root entity. Filters related assets based on the relation type and set of asset types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'assetTypes' defines the type of the asset to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only assets that match 'relationType' and 'assetTypes' conditions.

        For example, this entity filter selects 'charging station' assets which are related to the asset with id 'e51de0c0-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:

        ```json
        {
          "type": "assetSearchQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e51de0c0-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "relationType": "Contains",
          "assetTypes": [
            "charging station"
          ]
        }
        ```

        ## Device Search Query

        Allows to filter devices that are related to the provided root entity. Filters related devices based on the relation type and set of device types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'deviceTypes' defines the type of the device to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.

        For example, this entity filter selects 'Charging port' and 'Air Quality Sensor' devices which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:

        ```json
        {
          "type": "deviceSearchQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e52b0020-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 2,
          "fetchLastLevelOnly": true,
          "relationType": "Contains",
          "deviceTypes": [
            "Air Quality Sensor",
            "Charging port"
          ]
        }
        ```

        ## Entity View Query

        Allows to filter entity views that are related to the provided root entity. Filters related entity views based on the relation type and set of entity view types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'entityViewTypes' defines the type of the entity view to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.

        For example, this entity filter selects 'Concrete mixer' entity views which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:

        ```json
        {
          "type": "entityViewSearchQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e52b0020-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "relationType": "Contains",
          "entityViewTypes": [
            "Concrete mixer"
          ]
        }
        ```

        ## Edge Search Query

        Allows to filter edge instances that are related to the provided root entity. Filters related edge instances based on the relation type and set of edge types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'deviceTypes' defines the type of the device to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.

        For example, this entity filter selects 'Factory' edge instances which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:

        ```json
        {
          "type": "deviceSearchQuery",
          "rootEntity": {
            "entityType": "ASSET",
            "id": "e52b0020-2a7a-11ec-94eb-213c95f54092"
          },
          "direction": "FROM",
          "maxLevel": 2,
          "fetchLastLevelOnly": true,
          "relationType": "Contains",
          "edgeTypes": [
            "Factory"
          ]
        }
        ```

         # Key Filters
        Key Filter allows you to define complex logical expressions over entity field, attribute or latest time-series value. The filter is defined using 'key', 'valueType' and 'predicate' objects. Single Entity Query may have zero, one or multiple predicates. If multiple filters are defined, they are evaluated using logical 'AND'. The example below checks that temperature of the entity is above 20 degrees:

        ```json
        {
          "key": {
            "type": "TIME_SERIES",
            "key": "temperature"
          },
          "valueType": "NUMERIC",
          "predicate": {
            "operation": "GREATER",
            "value": {
              "defaultValue": 20,
              "dynamicValue": null
            },
            "type": "NUMERIC"
          }
        }
        ```

         Now let's review 'key', 'valueType' and 'predicate' objects in detail.

        ## Filter Key

        Filter Key defines either entity field, attribute or telemetry. It is a JSON object that consists the key name and type. The following filter key types are supported: 

         * 'CLIENT_ATTRIBUTE' - used for client attributes; 
         * 'SHARED_ATTRIBUTE' - used for shared attributes; 
         * 'SERVER_ATTRIBUTE' - used for server attributes; 
         * 'ATTRIBUTE' - used for any of the above; 
         * 'TIME_SERIES' - used for time-series values; 
         * 'ENTITY_FIELD' - used for accessing entity fields like 'name', 'label', etc. The list of available fields depends on the entity type; 
         * 'ALARM_FIELD' - similar to entity field, but is used in alarm queries only; 


         Let's review the example:

        ```json
        {
          "type": "TIME_SERIES",
          "key": "temperature"
        }
        ```

        ## Value Type and Operations

        Provides a hint about the data type of the entity field that is defined in the filter key. The value type impacts the list of possible operations that you may use in the corresponding predicate. For example, you may use 'STARTS_WITH' or 'END_WITH', but you can't use 'GREATER_OR_EQUAL' for string values.The following filter value types and corresponding predicate operations are supported: 

         * 'STRING' - used to filter any 'String' or 'JSON' values. Operations: EQUAL, NOT_EQUAL, STARTS_WITH, ENDS_WITH, CONTAINS, NOT_CONTAINS; 
         * 'NUMERIC' - used for 'Long' and 'Double' values. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; 
         * 'BOOLEAN' - used for boolean values. Operations: EQUAL, NOT_EQUAL;
         * 'DATE_TIME' - similar to numeric, transforms value to milliseconds since epoch. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; 


        ## Filter Predicate

        Filter Predicate defines the logical expression to evaluate. The list of available operations depends on the filter value type, see above. Platform supports 4 predicate types: 'STRING', 'NUMERIC', 'BOOLEAN' and 'COMPLEX'. The last one allows to combine multiple operations over one filter key.

        Simple predicate example to check 'value < 100': 

        ```json
        {
          "operation": "LESS",
          "value": {
            "defaultValue": 100,
            "dynamicValue": null
          },
          "type": "NUMERIC"
        }
        ```

        Complex predicate example, to check 'value < 10 or value > 20': 

        ```json
        {
          "type": "COMPLEX",
          "operation": "OR",
          "predicates": [
            {
              "operation": "LESS",
              "value": {
                "defaultValue": 10,
                "dynamicValue": null
              },
              "type": "NUMERIC"
            },
            {
              "operation": "GREATER",
              "value": {
                "defaultValue": 20,
                "dynamicValue": null
              },
              "type": "NUMERIC"
            }
          ]
        }
        ```

        More complex predicate example, to check 'value < 10 or (value > 50 && value < 60)': 

        ```json
        {
          "type": "COMPLEX",
          "operation": "OR",
          "predicates": [
            {
              "operation": "LESS",
              "value": {
                "defaultValue": 10,
                "dynamicValue": null
              },
              "type": "NUMERIC"
            },
            {
              "type": "COMPLEX",
              "operation": "AND",
              "predicates": [
                {
                  "operation": "GREATER",
                  "value": {
                    "defaultValue": 50,
                    "dynamicValue": null
                  },
                  "type": "NUMERIC"
                },
                {
                  "operation": "LESS",
                  "value": {
                    "defaultValue": 60,
                    "dynamicValue": null
                  },
                  "type": "NUMERIC"
                }
              ]
            }
          ]
        }
        ```

         You may also want to replace hardcoded values (for example, temperature > 20) with the more dynamic expression (for example, temperature > 'value of the tenant attribute with key 'temperatureThreshold'). It is possible to use 'dynamicValue' to define attribute of the tenant, customer or user that is performing the API call. See example below: 

        ```json
        {
          "operation": "GREATER",
          "value": {
            "defaultValue": 0,
            "dynamicValue": {
              "sourceType": "CURRENT_USER",
              "sourceAttribute": "temperatureThreshold"
            }
          },
          "type": "NUMERIC"
        }
        ```

         Note that you may use 'CURRENT_USER', 'CURRENT_CUSTOMER' and 'CURRENT_TENANT' as a 'sourceType'. The 'defaultValue' is used when the attribute with such a name is not defined for the chosen source.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: findEntityDataByQueryUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityDataQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EntityData»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entitiesQuery/find/keys:
    post:
      tags:
        - entity-query-controller
      summary: Find Entity Keys by Query
      description: Uses entity data query (see 'Find Entity Data by Query') to find first 100 entities. Then fetch and return all unique time-series and/or attribute keys. Used mostly for UI hints.
      operationId: findEntityTimeseriesAndAttributesKeysByQueryUsingPOST
      parameters:
        - name: timeseries
          in: query
          description: Include all unique time-series keys to the result.
          required: true
          style: form
          schema:
            type: boolean
        - name: attributes
          in: query
          description: Include all unique attribute keys to the result.
          required: true
          style: form
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityDataQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/relation:
    get:
      tags:
        - entity-relation-controller
      summary: Get Relation (getRelation)
      description: |-
        Returns relation object between two specified entities if present. Otherwise throws exception. 

        If the user has the authority of 'System Administrator', the server checks that 'from' and 'to' entities are owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that 'from' and 'to' entities are owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the 'from' and 'to' entities are assigned to the same customer.
      operationId: getRelationUsingGET
      parameters:
        - name: entityId
          in: query
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: entityType
          in: query
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: fromId
          in: query
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: fromType
          in: query
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: relationType
          in: query
          description: A string value representing relation type between entities. For example, 'Contains', 'Manages'. It can be any string value.
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: relationTypeGroup
          in: query
          description: A string value representing relation type group. For example, 'COMMON'
          required: false
          style: form
          schema:
            type: string
        - name: toId
          in: query
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: toType
          in: query
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - entity-relation-controller
      summary: Delete Relation (deleteRelation)
      description: |-
        Deletes a relation between two entities in the platform. 

        If the user has the authority of 'System Administrator', the server checks that 'from' and 'to' entities are owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that 'from' and 'to' entities are owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the 'from' and 'to' entities are assigned to the same customer.
      operationId: deleteRelationUsingDELETE
      parameters:
        - name: fromId
          in: query
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: fromType
          in: query
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: relationType
          in: query
          description: A string value representing relation type between entities. For example, 'Contains', 'Manages'. It can be any string value.
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: relationTypeGroup
          in: query
          description: A string value representing relation type group. For example, 'COMMON'
          required: false
          style: form
          schema:
            type: string
        - name: toId
          in: query
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: toType
          in: query
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - entity-relation-controller
      summary: Create Relation (saveRelation)
      description: |-
        Creates or updates a relation between two entities in the platform. Relations unique key is a combination of from/to entity id and relation type group and relation type. 

        If the user has the authority of 'System Administrator', the server checks that 'from' and 'to' entities are owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that 'from' and 'to' entities are owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the 'from' and 'to' entities are assigned to the same customer.
      operationId: saveRelationUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityRelation'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/relations:
    delete:
      tags:
        - entity-relation-controller
      summary: Delete common relations (deleteCommonRelations)
      description: |-
        Deletes all the relations ('from' and 'to' direction) for the specified entity and relation type group: 'COMMON'. 

        If the user has the authority of 'System Administrator', the server checks that the entity is owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that the entity is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the entity is assigned to the same customer.
      operationId: deleteRelationsUsingDELETE
      parameters:
        - name: entityId
          in: query
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: entityType
          in: query
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - entity-relation-controller
      summary: Find related entities (findByQuery)
      description: Returns all entities that are related to the specific entity. The entity id, relation type, entity types, depth of the search, and other query parameters defined using complex 'EntityRelationsQuery' object. See 'Model' tab of the Parameters for more info.
      operationId: findByQueryUsingPOST_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityRelationsQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/relations/info:
    get:
      tags:
        - entity-relation-controller
      summary: Get List of Relation Infos (findInfoByTo)
      description: |-
        Returns list of relation info objects for the specified entity by the 'to' direction. 

        If the user has the authority of 'System Administrator', the server checks that the entity is owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that the entity is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the entity is assigned to the same customer. Relation Info is an extension of the default Relation object that contains information about the 'from' and 'to' entity names. 
      operationId: findInfoByToUsingGET
      parameters:
        - name: fromId
          in: query
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: fromType
          in: query
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: toId
          in: query
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: toType
          in: query
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: relationTypeGroup
          in: query
          description: A string value representing relation type group. For example, 'COMMON'
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityRelationInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - entity-relation-controller
      summary: Find related entity infos (findInfoByQuery)
      description: 'Returns all entity infos that are related to the specific entity. The entity id, relation type, entity types, depth of the search, and other query parameters defined using complex ''EntityRelationsQuery'' object. See ''Model'' tab of the Parameters for more info. Relation Info is an extension of the default Relation object that contains information about the ''from'' and ''to'' entity names. '
      operationId: findInfoByQueryUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityRelationsQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityRelationInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/entityView/{entityViewId}:
    delete:
      tags:
        - entity-view-controller
      summary: Unassign Entity View from customer (unassignEntityViewFromCustomer)
      description: |-
        Clears assignment of the Entity View to customer. Customer will not be able to query Entity View afterwards.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unassignEntityViewFromCustomerUsingDELETE
      parameters:
        - name: entityViewId
          in: path
          description: A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityView'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/public/entityView/{entityViewId}:
    post:
      tags:
        - entity-view-controller
      summary: Make entity view publicly available (assignEntityViewToPublicCustomer)
      description: |-
        Entity View will be available for non-authorized (not logged-in) users. This is useful to create dashboards that you plan to share/embed on a publicly available website. However, users that are logged-in and belong to different tenant will not be able to access the entity view.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignEntityViewToPublicCustomerUsingPOST
      parameters:
        - name: entityViewId
          in: path
          description: A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityView'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/entityView/{entityViewId}:
    post:
      tags:
        - entity-view-controller
      summary: Assign Entity View to customer (assignEntityViewToCustomer)
      description: |-
        Creates assignment of the Entity View to customer. Customer will be able to query Entity View afterwards.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignEntityViewToCustomerUsingPOST
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: entityViewId
          in: path
          description: A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityView'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/entityViewInfos:
    get:
      tags:
        - entity-view-controller
      summary: Get Customer Entity View info (getCustomerEntityViewInfos)
      description: |-
        Returns a page of Entity View info objects assigned to customer. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getCustomerEntityViewInfosUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: |-


            ## Entity View Filter

            Allows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':

            ```json
            {
              "type": "entityViewType",
              "entityViewType": "Concrete Mixer",
              "entityViewNameFilter": "CAT"
            }
            ```
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the entity view name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EntityViewInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/entityViews:
    get:
      tags:
        - entity-view-controller
      summary: Get Customer Entity Views (getCustomerEntityViews)
      description: |-
        Returns a page of Entity View objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getCustomerEntityViewsUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: |-


            ## Entity View Filter

            Allows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':

            ```json
            {
              "type": "entityViewType",
              "entityViewType": "Concrete Mixer",
              "entityViewNameFilter": "CAT"
            }
            ```
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the entity view name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EntityView»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/entityView/{entityViewId}:
    post:
      tags:
        - entity-view-controller
      summary: Assign entity view to edge (assignEntityViewToEdge)
      description: Creates assignment of an existing entity view to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment entity view (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once entity view will be delivered to edge service, it's going to be available for usage on remote edge instance.
      operationId: assignEntityViewToEdgeUsingPOST
      parameters:
        - name: edgeId
          in: path
          description: edgeId
          required: true
          style: simple
          schema:
            type: string
        - name: entityViewId
          in: path
          description: entityViewId
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityView'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - entity-view-controller
      summary: Unassign entity view from edge (unassignEntityViewFromEdge)
      description: Clears assignment of the entity view to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove entity view (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove entity view locally.
      operationId: unassignEntityViewFromEdgeUsingDELETE
      parameters:
        - name: edgeId
          in: path
          description: edgeId
          required: true
          style: simple
          schema:
            type: string
        - name: entityViewId
          in: path
          description: entityViewId
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityView'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/entityViews:
    get:
      tags:
        - entity-view-controller
      summary: getEdgeEntityViews
      operationId: getEdgeEntityViewsUsingGET
      parameters:
        - name: edgeId
          in: path
          description: edgeId
          required: true
          style: simple
          schema:
            type: string
        - name: page
          in: query
          description: page
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: pageSize
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: type
          in: query
          description: type
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: textSearch
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: sortProperty
          required: false
          style: form
          schema:
            type: string
        - name: sortOrder
          in: query
          description: sortOrder
          required: false
          style: form
          schema:
            type: string
        - name: startTime
          in: query
          description: startTime
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: endTime
          required: false
          style: form
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EntityView»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entityView:
    post:
      tags:
        - entity-view-controller
      summary: Save or update entity view (saveEntityView)
      description: |-
        Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. See the 'Model' tab for more details.Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new Entity View entity.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveEntityViewUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityView'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityView'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entityView/info/{entityViewId}:
    get:
      tags:
        - entity-view-controller
      summary: Get Entity View info (getEntityViewInfoById)
      description: |-
        Fetch the Entity View info object based on the provided Entity View Id. Entity Views Info extends the Entity View with customer title and 'is public' flag. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. See the 'Model' tab for more details.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getEntityViewInfoByIdUsingGET
      parameters:
        - name: entityViewId
          in: path
          description: A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityViewInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entityView/types:
    get:
      tags:
        - entity-view-controller
      summary: Get Entity View Types (getEntityViewTypes)
      description: |-
        Returns a set of unique entity view types based on entity views that are either owned by the tenant or assigned to the customer which user is performing the request.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getEntityViewTypesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitySubtype'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entityView/{entityViewId}:
    get:
      tags:
        - entity-view-controller
      summary: Get entity view (getEntityViewById)
      description: |-
        Fetch the EntityView object based on the provided entity view id. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. See the 'Model' tab for more details.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getEntityViewByIdUsingGET
      parameters:
        - name: entityViewId
          in: path
          description: A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityView'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - entity-view-controller
      summary: Delete entity view (deleteEntityView)
      description: |-
        Delete the EntityView object based on the provided entity view id. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteEntityViewUsingDELETE
      parameters:
        - name: entityViewId
          in: path
          description: A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/entityViews:
    post:
      tags:
        - entity-view-controller
      summary: Find related entity views (findByQuery)
      description: |-
        Returns all entity views that are related to the specific entity. The entity id, relation type, entity view types, depth of the search, and other query parameters defined using complex 'EntityViewSearchQuery' object. See 'Model' tab of the Parameters for more info.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: findByQueryUsingPOST_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityViewSearchQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityView'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/entityViewInfos:
    get:
      tags:
        - entity-view-controller
      summary: Get Tenant Entity Views (getTenantEntityViews)
      description: |-
        Returns a page of entity views info owned by tenant. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantEntityViewInfosUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: |-


            ## Entity View Filter

            Allows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':

            ```json
            {
              "type": "entityViewType",
              "entityViewType": "Concrete Mixer",
              "entityViewNameFilter": "CAT"
            }
            ```
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the entity view name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - customerTitle
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EntityViewInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/entityViews:
    get:
      tags:
        - entity-view-controller
      summary: Get Tenant Entity Views (getTenantEntityViews)
      description: |-
        Returns a page of entity views owned by tenant. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantEntityViewsUsingGET
      parameters:
        - name: entityViewName
          in: query
          description: Entity View name
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: |-


            ## Entity View Filter

            Allows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':

            ```json
            {
              "type": "entityViewType",
              "entityViewType": "Concrete Mixer",
              "entityViewNameFilter": "CAT"
            }
            ```
          required: false
          style: form
          schema:
            type: string
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the entity view name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - name
              - type
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EntityView»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/events/{entityType}/{entityId}/clear:
    post:
      tags:
        - event-controller
      summary: Clear Events (clearEvents)
      description: Clears events by filter for specified entity.
      operationId: clearEventsUsingPOST
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: startTime
          in: query
          description: Timestamp. Events with creation time before it won't be queried.
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: Timestamp. Events with creation time after it won't be queried.
          required: false
          style: form
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventFilter'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/events/{entityType}/{entityId}/{eventType}:
    get:
      tags:
        - event-controller
      summary: Get Events by type (getEvents)
      description: 'Returns a page of events for specified entity by specifying event type. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the ''Model'' tab of the Response Class for more details. '
      operationId: getEventsUsingGET_1
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: eventType
          in: path
          description: A string value representing event type
          required: true
          style: simple
          schema:
            type: string
        - name: tenantId
          in: query
          description: A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The value is not used in searching.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - id
              - ts
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: Timestamp. Events with creation time before it won't be queried.
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: Timestamp. Events with creation time after it won't be queried.
          required: false
          style: form
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EventInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/events/{entityType}/{entityId}:
    get:
      tags:
        - event-controller
      summary: Get Events (Deprecated)
      description: 'Returns a page of events for specified entity. Deprecated and will be removed in next minor release. The call was deprecated to improve the performance of the system. Current implementation will return ''Lifecycle'' events only. Use ''Get events by type'' or ''Get events by filter'' instead. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the ''Model'' tab of the Response Class for more details. '
      operationId: getEventsUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: tenantId
          in: query
          description: A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The value is not used in searching.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - id
              - ts
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: Timestamp. Events with creation time before it won't be queried.
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: Timestamp. Events with creation time after it won't be queried.
          required: false
          style: form
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EventInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - event-controller
      summary: Get Events by event filter (getEvents)
      description: |+
        Returns a page of events for the chosen entity by specifying the event filter. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        # Event Filter Definition

        5 different eventFilter objects could be set for different event types. The eventType field is required. Others are optional. If some of them are set, the filtering will be applied according to them. See the examples below for all the fields used for each event type filtering. 

        Note,

         * 'server' - string value representing the server name, identifier or ip address where the platform is running;
         * 'errorStr' - the case insensitive 'contains' filter based on error message.

        ## Error Event Filter

        ```json
        {
           "eventType":"ERROR",
           "server":"ip-172-31-24-152",
           "method":"onClusterEventMsg",
           "errorStr":"Error Message"
        }
        ```

         * 'method' - string value representing the method name when the error happened.

        ## Lifecycle Event Filter

        ```json
        {
           "eventType":"LC_EVENT",
           "server":"ip-172-31-24-152",
           "event":"STARTED",
           "status":"Success",
           "errorStr":"Error Message"
        }
        ```

         * 'event' - string value representing the lifecycle event type;
         * 'status' - string value representing status of the lifecycle event.

        ## Statistics Event Filter

        ```json
        {
           "eventType":"STATS",
           "server":"ip-172-31-24-152",
           "messagesProcessed":10,
           "errorsOccurred":5
        }
        ```

         * 'messagesProcessed' - the minimum number of successfully processed messages;
         * 'errorsOccurred' - the minimum number of errors occurred during messages processing.

        ## Debug Rule Node Event Filter

        ```json
        {
           "eventType":"DEBUG_RULE_NODE",
           "msgDirectionType":"IN",
           "server":"ip-172-31-24-152",
           "dataSearch":"humidity",
           "metadataSearch":"deviceName",
           "entityName":"DEVICE",
           "relationType":"Success",
           "entityId":"de9d54a0-2b7a-11ec-a3cc-23386423d98f",
           "msgType":"POST_TELEMETRY_REQUEST",
           "isError":"false",
           "errorStr":"Error Message"
        }
        ```

        ## Debug Rule Chain Event Filter

        ```json
        {
           "eventType":"DEBUG_RULE_CHAIN",
           "msgDirectionType":"IN",
           "server":"ip-172-31-24-152",
           "dataSearch":"humidity",
           "metadataSearch":"deviceName",
           "entityName":"DEVICE",
           "relationType":"Success",
           "entityId":"de9d54a0-2b7a-11ec-a3cc-23386423d98f",
           "msgType":"POST_TELEMETRY_REQUEST",
           "isError":"false",
           "errorStr":"Error Message"
        }
        ```

         * 'msgDirectionType' - string value representing msg direction type (incoming to entity or outcoming from entity);
         * 'dataSearch' - the case insensitive 'contains' filter based on data (key and value) for the message;
         * 'metadataSearch' - the case insensitive 'contains' filter based on metadata (key and value) for the message;
         * 'entityName' - string value representing the entity type;
         * 'relationType' - string value representing the type of message routing;
         * 'entityId' - string value representing the entity id in the event body (originator of the message);
         * 'msgType' - string value representing the message type;
         * 'isError' - boolean value to filter the errors.

      operationId: getEventsUsingPOST
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: tenantId
          in: query
          description: A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: form
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The value is not used in searching.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - id
              - ts
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: startTime
          in: query
          description: Timestamp. Events with creation time before it won't be queried.
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: Timestamp. Events with creation time after it won't be queried.
          required: false
          style: form
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventFilter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EventInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/image:
    post:
      tags:
        - image-controller
      summary: uploadImage
      operationId: uploadImageUsingPOST
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  description: file
                  format: binary
                title:
                  type: string
                  description: title
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TbResourceInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/image/import:
    put:
      tags:
        - image-controller
      summary: importImage
      operationId: importImageUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageExportData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TbResourceInfo'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/images/public/{publicResourceKey}:
    get:
      tags:
        - image-controller
      summary: downloadPublicImage
      operationId: downloadPublicImageUsingGET
      parameters:
        - name: publicResourceKey
          in: path
          description: publicResourceKey
          required: true
          style: simple
          schema:
            type: string
        - name: If-None-Match
          in: header
          description: If-None-Match
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            image/*:
              schema:
                $ref: '#/components/schemas/ByteArrayResource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/images/{type}/{key}:
    delete:
      tags:
        - image-controller
      summary: deleteImage
      operationId: deleteImageUsingDELETE
      parameters:
        - name: type
          in: path
          description: 'Type of the image: tenant or system'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - system
              - tenant
        - name: key
          in: path
          description: Image resource key, for example thermostats_dashboard_background.jpeg
          required: true
          style: simple
          schema:
            type: string
        - name: force
          in: query
          description: force
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TbImageDeleteResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    get:
      tags:
        - image-controller
      summary: downloadImage
      operationId: downloadImageUsingGET
      parameters:
        - name: type
          in: path
          description: 'Type of the image: tenant or system'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - system
              - tenant
        - name: key
          in: path
          description: Image resource key, for example thermostats_dashboard_background.jpeg
          required: true
          style: simple
          schema:
            type: string
        - name: If-None-Match
          in: header
          description: If-None-Match
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            image/*:
              schema:
                $ref: '#/components/schemas/ByteArrayResource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    put:
      tags:
        - image-controller
      summary: updateImage
      operationId: updateImageUsingPUT
      parameters:
        - name: type
          in: path
          description: 'Type of the image: tenant or system'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - system
              - tenant
        - name: key
          in: path
          description: Image resource key, for example thermostats_dashboard_background.jpeg
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  description: file
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TbResourceInfo'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/images/{type}/{key}/export:
    get:
      tags:
        - image-controller
      summary: exportImage
      operationId: exportImageUsingGET
      parameters:
        - name: type
          in: path
          description: 'Type of the image: tenant or system'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - system
              - tenant
        - name: key
          in: path
          description: Image resource key, for example thermostats_dashboard_background.jpeg
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageExportData'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/images/{type}/{key}/info:
    get:
      tags:
        - image-controller
      summary: getImageInfo
      operationId: getImageInfoUsingGET
      parameters:
        - name: type
          in: path
          description: 'Type of the image: tenant or system'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - system
              - tenant
        - name: key
          in: path
          description: Image resource key, for example thermostats_dashboard_background.jpeg
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TbResourceInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    put:
      tags:
        - image-controller
      summary: updateImageInfo
      operationId: updateImageInfoUsingPUT
      parameters:
        - name: type
          in: path
          description: 'Type of the image: tenant or system'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - system
              - tenant
        - name: key
          in: path
          description: Image resource key, for example thermostats_dashboard_background.jpeg
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TbResourceInfo'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TbResourceInfo'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/images/{type}/{key}/preview:
    get:
      tags:
        - image-controller
      summary: downloadImagePreview
      operationId: downloadImagePreviewUsingGET
      parameters:
        - name: type
          in: path
          description: 'Type of the image: tenant or system'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - system
              - tenant
        - name: key
          in: path
          description: Image resource key, for example thermostats_dashboard_background.jpeg
          required: true
          style: simple
          schema:
            type: string
        - name: If-None-Match
          in: header
          description: If-None-Match
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/ByteArrayResource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/images/{type}/{key}/public/{isPublic}:
    put:
      tags:
        - image-controller
      summary: updateImagePublicStatus
      operationId: updateImagePublicStatusUsingPUT
      parameters:
        - name: type
          in: path
          description: 'Type of the image: tenant or system'
          required: true
          style: simple
          schema:
            type: string
            enum:
              - system
              - tenant
        - name: key
          in: path
          description: Image resource key, for example thermostats_dashboard_background.jpeg
          required: true
          style: simple
          schema:
            type: string
        - name: isPublic
          in: path
          description: isPublic
          required: true
          style: simple
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TbResourceInfo'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/images:
    get:
      tags:
        - image-controller
      summary: getImages
      operationId: getImagesUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: includeSystemImages
          in: query
          description: Use 'true' to include system images. Disabled by default. Ignored for requests by users with system administrator authority.
          required: false
          style: form
          schema:
            type: boolean
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the resource title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - resourceType
              - tenantId
              - title
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«TbResourceInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/lwm2m/deviceProfile/bootstrap/{isBootstrapServer}:
    get:
      tags:
        - lwm-2m-controller
      summary: Get Lwm2m Bootstrap SecurityInfo (getLwm2mBootstrapSecurityInfo)
      description: |-
        Get the Lwm2m Bootstrap SecurityInfo object (of the current server) based on the provided isBootstrapServer parameter. If isBootstrapServer == true, get the parameters of the current Bootstrap Server. If isBootstrapServer == false, get the parameters of the current Lwm2m Server. Used for client settings when starting the client in Bootstrap mode. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getLwm2mBootstrapSecurityInfoUsingGET
      parameters:
        - name: isBootstrapServer
          in: path
          description: 'A Boolean value representing the Server SecurityInfo for future Bootstrap client mode settings. Values: ''true'' for Bootstrap Server; ''false'' for Lwm2m Server. '
          required: true
          style: simple
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LwM2MServerSecurityConfigDefault'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/mail/config/template:
    get:
      tags:
        - mail-config-template-controller
      summary: |-
        Get the list of all OAuth2 client registration templates (getClientRegistrationTemplates)

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      description: Mail configuration template is set of default smtp settings for mail server that specific provider supports
      operationId: getClientRegistrationTemplatesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/deliveryMethods:
    get:
      tags:
        - notification-controller
      summary: Get available delivery methods (getAvailableDeliveryMethods)
      description: |-
        Returns the list of delivery methods that are properly configured and are allowed to be used for sending notifications.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getAvailableDeliveryMethodsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/request:
    post:
      tags:
        - notification-controller
      summary: Create notification request (createNotificationRequest)
      description: |-
        Processes notification request.
        Mandatory request properties are `targets` (list of targets ids to send notification to), and either `templateId` (existing notification template id) or `template` (to send notification without saving the template).
        Optionally, you can set `sendingDelayInSec` inside the `additionalConfig` field to schedule the notification.

        For each enabled delivery method in the notification template, there must be a target in the `targets` list that supports this delivery method: if you chose `WEB`, `EMAIL` or `SMS` - there must be at least one target in `targets` of `PLATFORM_USERS` type.
        For `SLACK` delivery method - you need to chose at least one `SLACK` notification target.

        Notification request object with `PROCESSING` status will be returned immediately, and the notification sending itself is done asynchronously. After all notifications are sent, the `status` of the request becomes `SENT`. Use `getNotificationRequestById` to see the notification request processing status and some sending stats. 

        Here is an example of notification request to one target using saved template:
        ```json
        {
          "templateId": {
            "entityType": "NOTIFICATION_TEMPLATE",
            "id": "6dbc3670-e4dd-11ed-9401-dbcc5dff78be"
          },
          "targets": [
            "320e3ed0-d785-11ed-a06c-21dd57dd88ca"
          ],
          "additionalConfig": {
            "sendingDelayInSec": 0
          }
        }
        ```

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: createNotificationRequestUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequest'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/request/preview:
    post:
      tags:
        - notification-controller
      summary: Get notification request preview (getNotificationRequestPreview)
      description: |-
        Returns preview for notification request.

        `processedTemplates` shows how the notifications for each delivery method will look like for the first recipient of the corresponding notification target.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationRequestPreviewUsingPOST
      parameters:
        - name: recipientsPreviewSize
          in: query
          description: Amount of the recipients to show in preview
          required: false
          style: form
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequestPreview'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/request/{id}:
    get:
      tags:
        - notification-controller
      summary: Get notification request by id (getNotificationRequestById)
      description: |-
        Fetches notification request info by request id.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationRequestByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequestInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - notification-controller
      summary: Delete notification request (deleteNotificationRequest)
      description: |-
        Deletes notification request by its id.

        If the request has status `SENT` - all sent notifications for this request will be deleted. If it is `SCHEDULED`, the request will be cancelled.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: deleteNotificationRequestUsingDELETE
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/requests:
    get:
      tags:
        - notification-controller
      summary: Get notification requests (getNotificationRequests)
      description: |-
        Returns the page of notification requests submitted by users of this tenant or sysadmins.

        You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationRequestsUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: Case-insensitive 'substring' filed based on the used template name
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«NotificationRequestInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/settings:
    get:
      tags:
        - notification-controller
      summary: Get notification settings (getNotificationSettings)
      description: |-
        Retrieves notification settings for this tenant or sysadmin.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationSettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - notification-controller
      summary: Save notification settings (saveNotificationSettings)
      description: |-
        Saves notification settings for this tenant or sysadmin.
        `deliveryMethodsConfigs` of the settings must be specified.

        Here is an example of the notification settings with Slack configuration:
        ```json
        {
          "deliveryMethodsConfigs": {
            "SLACK": {
              "method": "SLACK",
              "botToken": "xoxb-...."
            }
          }
        }
        ```

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: saveNotificationSettingsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettings'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/settings/user:
    get:
      tags:
        - notification-controller
      summary: getUserNotificationSettings
      operationId: getUserNotificationSettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - notification-controller
      summary: saveUserNotificationSettings
      operationId: saveUserNotificationSettingsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationSettings'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/{id}:
    delete:
      tags:
        - notification-controller
      summary: Delete notification (deleteNotification)
      description: |-
        Deletes notification by its id.

        Available for any authorized user. 
      operationId: deleteNotificationUsingDELETE
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/{id}/read:
    put:
      tags:
        - notification-controller
      summary: Mark notification as read (markNotificationAsRead)
      description: |-
        Marks notification as read by its id.

        Available for any authorized user. 
      operationId: markNotificationAsReadUsingPUT
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notifications/read:
    put:
      tags:
        - notification-controller
      summary: Mark all notifications as read (markAllNotificationsAsRead)
      description: |-
        Marks all unread notifications as read.

        Available for any authorized user. 
      operationId: markAllNotificationsAsReadUsingPUT
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notifications:
    get:
      tags:
        - notification-controller
      summary: Get notifications (getNotifications)
      description: |-
        Returns the page of notifications for current user.

        You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for any authorized user. 

        **WebSocket API**:

        There are 2 types of subscriptions: one for unread notifications count, another for unread notifications themselves.

        The URI for opening WS session for notifications: `/api/ws/plugins/notifications`.

        Subscription command for unread notifications count:
        ```
        {
          "unreadCountSubCmd": {
            "cmdId": 1234
          }
        }
        ```
        To subscribe for latest unread notifications:
        ```
        {
          "unreadSubCmd": {
            "cmdId": 1234,
            "limit": 10
          }
        }
        ```
        To unsubscribe from any subscription:
        ```
        {
          "unsubCmd": {
            "cmdId": 1234
          }
        }
        ```
        To mark certain notifications as read, use following command:
        ```
        {
          "markAsReadCmd": {
            "cmdId": 1234,
            "notifications": [
              "6f860330-7fc2-11ed-b855-7dd3b7d2faa9",
              "5b6dfee0-8d0d-11ed-b61f-35a57b03dade"
            ]
          }
        }

        ```
        To mark all notifications as read:
        ```
        {
          "markAllAsReadCmd": {
            "cmdId": 1234
          }
        }
        ```


        Update structure for unread **notifications count subscription**:
        ```
        {
          "cmdId": 1234,
          "totalUnreadCount": 55
        }
        ```
        For **notifications subscription**:
        - full update of latest unread notifications:
        ```
        {
          "cmdId": 1234,
          "notifications": [
            {
              "id": {
                "entityType": "NOTIFICATION",
                "id": "6f860330-7fc2-11ed-b855-7dd3b7d2faa9"
              },
              ...
            }
          ],
          "totalUnreadCount": 1
        }
        ```
        - when new notification arrives or shown notification is updated:
        ```
        {
          "cmdId": 1234,
          "update": {
            "id": {
              "entityType": "NOTIFICATION",
              "id": "6f860330-7fc2-11ed-b855-7dd3b7d2faa9"
            },
            # updated notification info, text, subject etc.
            ...
          },
          "totalUnreadCount": 2
        }
        ```
        - when unread notifications count changes:
        ```
        {
          "cmdId": 1234,
          "totalUnreadCount": 5
        }
        ```
      operationId: getNotificationsUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: Case-insensitive 'substring' filter based on notification subject or text
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
        - name: unreadOnly
          in: query
          description: To search for unread notifications only
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Notification»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/rule:
    post:
      tags:
        - notification-rule-controller
      summary: Save notification rule (saveNotificationRule)
      description: |-
        Creates or updates notification rule. 

        Mandatory properties are `name`, `templateId` (of a template with `notificationType` matching to rule's `triggerType`), `triggerType`, `triggerConfig` and `recipientConfig`. Additionally, you may specify rule `description` inside of `additionalConfig`.

        Trigger type of the rule cannot be changed. Available trigger types for tenant: `ENTITY_ACTION`, `ALARM`, `ALARM_COMMENT`, `ALARM_ASSIGNMENT`, `DEVICE_ACTIVITY`, `RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT`.
        For sysadmin, there are following trigger types available: `ENTITIES_LIMIT`, `API_USAGE_LIMIT`, `NEW_PLATFORM_VERSION`.

        Here is an example of notification rule to send notification when a device, asset or customer is created or deleted:
        ```json
        {
          "name": "Entity action",
          "templateId": {
            "entityType": "NOTIFICATION_TEMPLATE",
            "id": "32117320-d785-11ed-a06c-21dd57dd88ca"
          },
          "triggerType": "ENTITY_ACTION",
          "triggerConfig": {
            "entityTypes": [
              "CUSTOMER",
              "DEVICE",
              "ASSET"
            ],
            "created": true,
            "updated": false,
            "deleted": true,
            "triggerType": "ENTITY_ACTION"
          },
          "recipientsConfig": {
            "targets": [
              "320f2930-d785-11ed-a06c-21dd57dd88ca"
            ],
            "triggerType": "ENTITY_ACTION"
          },
          "additionalConfig": {
            "description": "Send notification to tenant admins or customer users when a device, asset or customer is created"
          },
          "templateName": "Entity action notification",
          "deliveryMethods": [
            "WEB"
          ]
        }
        ```

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: saveNotificationRuleUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRule'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRule'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/rule/{id}:
    get:
      tags:
        - notification-rule-controller
      summary: Get notification rule by id (getNotificationRuleById)
      description: |-
        Fetches notification rule info by rule's id.
        In addition to regular notification rule fields, there are `templateName` and `deliveryMethods` in the response.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationRuleByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRuleInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - notification-rule-controller
      summary: Delete notification rule (deleteNotificationRule)
      description: |-
        Deletes notification rule by id.
        Cancels all related scheduled notification requests (e.g. due to escalation table)

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: deleteNotificationRuleUsingDELETE
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/rules:
    get:
      tags:
        - notification-rule-controller
      summary: Get notification rules (getNotificationRules)
      description: |-
        Returns the page of notification rules.

        You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationRulesUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: Case-insensitive 'substring' filter based on rule's name
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«NotificationRuleInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/target:
    post:
      tags:
        - notification-target-controller
      summary: Save notification target (saveNotificationTarget)
      description: |-
        Creates or updates notification target.

        Available `configuration` types are `PLATFORM_USERS` and `SLACK`.
        For `PLATFORM_USERS` the `usersFilter` must be specified. For tenant, there are following users filter types available: `USER_LIST`, `CUSTOMER_USERS`, `TENANT_ADMINISTRATORS`, `ALL_USERS`, `ORIGINATOR_ENTITY_OWNER_USERS`, `AFFECTED_USER`.
        For sysadmin: `TENANT_ADMINISTRATORS`, `AFFECTED_TENANT_ADMINISTRATORS`, `SYSTEM_ADMINISTRATORS`, `ALL_USERS`.

        Here is an example of tenant-level notification target to send notification to customer's users:
        ```json
        {
          "name": "Users of Customer A",
          "configuration": {
            "type": "PLATFORM_USERS",
            "usersFilter": {
              "type": "CUSTOMER_USERS",
              "customerId": "32499a20-d785-11ed-a06c-21dd57dd88ca"
            },
            "description": "Users of Customer A"
          }
        }
        ```

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: saveNotificationTargetUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTarget'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationTarget'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/target/recipients:
    post:
      tags:
        - notification-target-controller
      summary: Get recipients for notification target config (getRecipientsForNotificationTargetConfig)
      description: |-
        Returns the page of recipients for such notification target configuration.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getRecipientsForNotificationTargetConfigUsingPOST
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTarget'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«User»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/target/{id}:
    get:
      tags:
        - notification-target-controller
      summary: Get notification target by id (getNotificationTargetById)
      description: |-
        Fetches notification target by id.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationTargetByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationTarget'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - notification-target-controller
      summary: Delete notification target by id (deleteNotificationTargetById)
      description: |-
        Deletes notification target by its id.

        This target cannot be referenced by existing scheduled notification requests or any notification rules.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: deleteNotificationTargetByIdUsingDELETE
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/targets:
    get:
      tags:
        - notification-target-controller
      summary: Get notification targets by supported notification type (getNotificationTargetsBySupportedNotificationType)
      description: |-
        Returns the page of notification targets filtered by notification type that they can be used for.

        You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationTargetsBySupportedNotificationTypeUsingGET
      parameters:
        - name: ids
          in: query
          description: Comma-separated list of uuids representing targets ids
          required: true
          style: form
          explode: true
          allowReserved: true
          schema:
            type: string
            format: uuid
        - name: notificationType
          in: query
          description: notificationType
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
            enum:
              - ALARM
              - ALARM_ASSIGNMENT
              - ALARM_COMMENT
              - API_USAGE_LIMIT
              - DEVICE_ACTIVITY
              - ENTITIES_LIMIT
              - ENTITY_ACTION
              - GENERAL
              - NEW_PLATFORM_VERSION
              - RATE_LIMITS
              - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
              - RULE_NODE
        - name: pageSize
          in: query
          description: pageSize
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: textSearch
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: sortProperty
          required: false
          style: form
          schema:
            type: string
        - name: sortOrder
          in: query
          description: sortOrder
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«NotificationTarget»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/slack/conversations:
    get:
      tags:
        - notification-template-controller
      summary: List Slack conversations (listSlackConversations)
      description: |-
        List available Slack conversations by type.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: listSlackConversationsUsingGET
      parameters:
        - name: type
          in: query
          description: type
          required: true
          style: form
          schema:
            type: string
            enum:
              - DIRECT
              - PRIVATE_CHANNEL
              - PUBLIC_CHANNEL
        - name: token
          in: query
          description: Slack bot token. If absent - system Slack settings will be used
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SlackConversation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/template:
    post:
      tags:
        - notification-template-controller
      summary: Save notification template (saveNotificationTemplate)
      description: |-
        Creates or updates notification template.

        Here is an example of template to send notification via Web, SMS and Slack:
        ```json
        {
          "name": "Greetings",
          "notificationType": "GENERAL",
          "configuration": {
            "deliveryMethodsTemplates": {
              "WEB": {
                "enabled": true,
                "subject": "Greetings",
                "body": "Hi there, ${recipientTitle}",
                "additionalConfig": {
                  "icon": {
                    "enabled": true,
                    "icon": "back_hand",
                    "color": "#757575"
                  },
                  "actionButtonConfig": {
                    "enabled": false
                  }
                },
                "method": "WEB"
              },
              "SMS": {
                "enabled": true,
                "body": "Hi there, ${recipientTitle}",
                "method": "SMS"
              },
              "SLACK": {
                "enabled": true,
                "body": "Hi there, @${recipientTitle}",
                "method": "SLACK"
              }
            }
          }
        }
        ```

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: saveNotificationTemplateUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTemplate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationTemplate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/template/{id}:
    get:
      tags:
        - notification-template-controller
      summary: Get notification template by id (getNotificationTemplateById)
      description: |-
        Fetches notification template by id.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationTemplateByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationTemplate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - notification-template-controller
      summary: Delete notification template by id (deleteNotificationTemplateById
      description: |-
        Deletes notification template by its id.

        This template cannot be referenced by existing scheduled notification requests or any notification rules.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: deleteNotificationTemplateByIdUsingDELETE
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/notification/templates:
    get:
      tags:
        - notification-template-controller
      summary: Get notification templates (getNotificationTemplates)
      description: |-
        Returns the page of notification templates owned by sysadmin or tenant.

        You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getNotificationTemplatesUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: Case-insensitive 'substring' filter based on template's name and notification type
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
        - name: notificationTypes
          in: query
          description: Comma-separated list of notification types to filter the templates
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - ALARM
              - ALARM_ASSIGNMENT
              - ALARM_COMMENT
              - API_USAGE_LIMIT
              - DEVICE_ACTIVITY
              - ENTITIES_LIMIT
              - ENTITY_ACTION
              - GENERAL
              - NEW_PLATFORM_VERSION
              - RATE_LIMITS
              - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
              - RULE_NODE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«NotificationTemplate»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/oauth2/config/template:
    get:
      tags:
        - o-auth-2-config-template-controller
      summary: |-
        Get the list of all OAuth2 client registration templates (getClientRegistrationTemplates)

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      description: Client registration template is OAuth2 provider configuration template with default settings for registering new OAuth2 clients
      operationId: getClientRegistrationTemplatesUsingGET_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2ClientRegistrationTemplate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - o-auth-2-config-template-controller
      summary: |-
        Create or update OAuth2 client registration template (saveClientRegistrationTemplate)

        Available for users with 'SYS_ADMIN' authority.
      description: Client registration template is OAuth2 provider configuration template with default settings for registering new OAuth2 clients
      operationId: saveClientRegistrationTemplateUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2ClientRegistrationTemplate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ClientRegistrationTemplate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/oauth2/config/template/{clientRegistrationTemplateId}:
    delete:
      tags:
        - o-auth-2-config-template-controller
      summary: |-
        Delete OAuth2 client registration template by id (deleteClientRegistrationTemplate)

        Available for users with 'SYS_ADMIN' authority.
      description: Client registration template is OAuth2 provider configuration template with default settings for registering new OAuth2 clients
      operationId: deleteClientRegistrationTemplateUsingDELETE
      parameters:
        - name: clientRegistrationTemplateId
          in: path
          description: String representation of client registration template id to delete
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/noauth/oauth2Clients:
    post:
      tags:
        - o-auth-2-controller
      summary: Get OAuth2 clients (getOAuth2Clients)
      description: Get the list of OAuth2 clients to log in with, available for such domain scheme (HTTP or HTTPS) (if x-forwarded-proto request header is present - the scheme is known from it) and domain name and port (port may be known from x-forwarded-port header)
      operationId: getOAuth2ClientsUsingPOST
      parameters:
        - name: pkgName
          in: query
          description: Mobile application package name, to find OAuth2 clients where there is configured mobile application with such package name
          required: false
          style: form
          schema:
            type: string
        - name: platform
          in: query
          description: Platform type to search OAuth2 clients for which the usage with this platform type is allowed in the settings. If platform type is not one of allowable values - it will just be ignored
          required: false
          style: form
          schema:
            type: string
            enum:
              - ANDROID
              - IOS
              - WEB
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2ClientInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
  /api/oauth2/config:
    get:
      tags:
        - o-auth-2-controller
      summary: Get current OAuth2 settings (getCurrentOAuth2Info)
      description: |-


        Available for users with 'SYS_ADMIN' authority.
      operationId: getCurrentOAuth2InfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Info'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - o-auth-2-controller
      summary: Save OAuth2 settings (saveOAuth2Info)
      description: |-


        Available for users with 'SYS_ADMIN' authority.
      operationId: saveOAuth2InfoUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Info'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Info'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/oauth2/loginProcessingUrl:
    get:
      tags:
        - o-auth-2-controller
      summary: Get OAuth2 log in processing URL (getLoginProcessingUrl)
      description: |-
        Returns the URL enclosed in double quotes. After successful authentication with OAuth2 provider, it makes a redirect to this path so that the platform can do further log in processing. This URL may be configured as 'security.oauth2.loginProcessingUrl' property in yml configuration file, or as 'SECURITY_OAUTH2_LOGIN_PROCESSING_URL' env variable. By default it is '/login/oauth2/code/'

        Available for users with 'SYS_ADMIN' authority.
      operationId: getLoginProcessingUrlUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/otaPackage:
    post:
      tags:
        - ota-package-controller
      summary: Create Or Update OTA Package Info (saveOtaPackageInfo)
      description: |-
        Create or update the OTA Package Info. When creating OTA Package Info, platform generates OTA Package id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created OTA Package id will be present in the response. Specify existing OTA Package id to update the OTA Package Info. Referencing non-existing OTA Package Id will cause 'Not Found' error. 

        OTA Package combination of the title with the version is unique in the scope of tenant. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveOtaPackageInfoUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveOtaPackageInfoRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtaPackageInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/otaPackage/info/{otaPackageId}:
    get:
      tags:
        - ota-package-controller
      summary: Get OTA Package Info (getOtaPackageInfoById)
      description: |-
        Fetch the OTA Package Info object based on the provided OTA Package Id. OTA Package Info is a lightweight object that includes main information about the OTA Package excluding the heavyweight data. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getOtaPackageInfoByIdUsingGET
      parameters:
        - name: otaPackageId
          in: path
          description: A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtaPackageInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/otaPackage/{otaPackageId}:
    get:
      tags:
        - ota-package-controller
      summary: Get OTA Package (getOtaPackageById)
      description: |-
        Fetch the OTA Package object based on the provided OTA Package Id. The server checks that the OTA Package is owned by the same tenant. OTA Package is a heavyweight object that includes main information about the OTA Package and also data. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getOtaPackageByIdUsingGET
      parameters:
        - name: otaPackageId
          in: path
          description: A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtaPackage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - ota-package-controller
      summary: Save OTA Package data (saveOtaPackageData)
      description: |-
        Update the OTA Package. Adds the date to the existing OTA Package Info

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveOtaPackageDataUsingPOST
      parameters:
        - name: otaPackageId
          in: path
          description: A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - checksumAlgorithm
                - file
              type: object
              properties:
                checksum:
                  type: string
                  description: OTA Package checksum. For example, '0xd87f7e0c'
                checksumAlgorithm:
                  type: string
                  description: OTA Package checksum algorithm.
                file:
                  type: string
                  description: OTA Package data.
                  format: binary
            encoding:
              checksum:
                contentType: text/plain
              checksumAlgorithm:
                contentType: text/plain
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtaPackageInfo'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/OtaPackageInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - ota-package-controller
      summary: Delete OTA Package (deleteOtaPackage)
      description: |-
        Deletes the OTA Package. Referencing non-existing OTA Package Id will cause an error. Can't delete the OTA Package if it is referenced by existing devices or device profile.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteOtaPackageUsingDELETE
      parameters:
        - name: otaPackageId
          in: path
          description: A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/otaPackage/{otaPackageId}/download:
    get:
      tags:
        - ota-package-controller
      summary: Download OTA Package (downloadOtaPackage)
      description: |-
        Download OTA Package based on the provided OTA Package Id.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: downloadOtaPackageUsingGET
      parameters:
        - name: otaPackageId
          in: path
          description: A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/otaPackages/{deviceProfileId}/{type}:
    get:
      tags:
        - ota-package-controller
      summary: Get OTA Package Infos (getOtaPackages)
      description: |-
        Returns a page of OTA Package Info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. OTA Package Info is a lightweight object that includes main information about the OTA Package excluding the heavyweight data. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getOtaPackagesUsingGET_1
      parameters:
        - name: deviceProfileId
          in: path
          description: A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: type
          in: path
          description: OTA Package type.
          required: true
          style: simple
          schema:
            type: string
            enum:
              - FIRMWARE
              - SOFTWARE
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the ota package title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - checksum
              - createdTime
              - dataSize
              - fileName
              - tag
              - title
              - type
              - url
              - version
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«OtaPackageInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/otaPackages:
    get:
      tags:
        - ota-package-controller
      summary: Get OTA Package Infos (getOtaPackages)
      description: |-
        Returns a page of OTA Package Info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. OTA Package Info is a lightweight object that includes main information about the OTA Package excluding the heavyweight data. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getOtaPackagesUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the ota package title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - checksum
              - createdTime
              - dataSize
              - fileName
              - tag
              - title
              - type
              - url
              - version
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«OtaPackageInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/queues/name/{queueName}:
    get:
      tags:
        - queue-controller
      summary: Get Queue (getQueueByName)
      description: |-
        Fetch the Queue object based on the provided Queue name. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getQueueByNameUsingGET
      parameters:
        - name: queueName
          in: path
          description: A string value representing the queue id. For example, 'Main'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/queues/{queueId}:
    get:
      tags:
        - queue-controller
      summary: Get Queue (getQueueById)
      description: |-
        Fetch the Queue object based on the provided Queue Id. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getQueueByIdUsingGET
      parameters:
        - name: queueId
          in: path
          description: A string value representing the queue id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - queue-controller
      summary: Delete Queue (deleteQueue)
      description: |-
        Deletes the Queue. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: deleteQueueUsingDELETE
      parameters:
        - name: queueId
          in: path
          description: A string value representing the queue id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/queues:
    get:
      tags:
        - queue-controller
      summary: Get Queues (getTenantQueuesByServiceType)
      description: |-
        Returns a page of queues registered in the platform. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getTenantQueuesByServiceTypeUsingGET
      parameters:
        - name: serviceType
          in: query
          description: Service type (implemented only for the TB-RULE-ENGINE)
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
            enum:
              - JS-EXECUTOR
              - TB-CORE
              - TB-RULE-ENGINE
              - TB-TRANSPORT
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the queue name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - name
              - topic
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Queue»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/rpc/oneway/{deviceId}:
    post:
      tags:
        - rpc-v-1-controller
      summary: Send one-way RPC request (handleOneWayDeviceRPCRequest)
      description: |-
        Deprecated. See 'Rpc V 2 Controller' instead.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: handleOneWayDeviceRPCRequestUsingPOST
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/rpc/twoway/{deviceId}:
    post:
      tags:
        - rpc-v-1-controller
      summary: Send two-way RPC request (handleTwoWayDeviceRPCRequest)
      description: |-
        Deprecated. See 'Rpc V 2 Controller' instead.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: handleTwoWayDeviceRPCRequestUsingPOST
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/rpc/oneway/{deviceId}:
    post:
      tags:
        - rpc-v-2-controller
      summary: Send one-way RPC request
      description: |-
        Sends the one-way remote-procedure call (RPC) request to device. Sends the one-way remote-procedure call (RPC) request to device. The RPC call is A JSON that contains the method name ('method'), parameters ('params') and multiple optional fields. See example below. We will review the properties of the RPC call one-by-one below. 

        ```json
        {
          "method": "setGpio",
          "params": {
            "pin": 7,
            "value": 1
          },
          "persistent": false,
          "timeout": 5000
        }
        ```

        ### Server-side RPC structure

        The body of server-side RPC request consists of multiple fields:

        * **method** - mandatory, name of the method to distinct the RPC calls.
          For example, "getCurrentTime" or "getWeatherForecast". The value of the parameter is a string.
        * **params** - mandatory, parameters used for processing of the request. The value is a JSON. Leave empty JSON "{}" if no parameters needed.
        * **timeout** - optional, value of the processing timeout in milliseconds. The default value is 10000 (10 seconds). The minimum value is 5000 (5 seconds).
        * **expirationTime** - optional, value of the epoch time (in milliseconds, UTC timezone). Overrides **timeout** if present.
        * **persistent** - optional, indicates persistent RPC. The default value is "false".
        * **retries** - optional, defines how many times persistent RPC will be re-sent in case of failures on the network and/or device side.
        * **additionalInfo** - optional, defines metadata for the persistent RPC that will be added to the persistent RPC events.

        ### RPC Result
        In case of persistent RPC, the result of this call is 'rpcId' UUID. In case of lightweight RPC, the result of this call is either 200 OK if the message was sent to device, or 504 Gateway Timeout if device is offline.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: handleOneWayDeviceRPCRequestUsingPOST_1
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Persistent RPC request was saved to the database or lightweight RPC request was sent to the device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Invalid structure of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: User is not authorized to send the RPC request. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '504':
          description: Timeout to process the RPC call. Most likely, device is offline.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/rpc/persistent/device/{deviceId}:
    get:
      tags:
        - rpc-v-2-controller
      summary: Get persistent RPC requests
      description: |-
        Allows to query RPC calls for specific device using pagination.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getPersistedRpcByDeviceUsingGET
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: rpcStatus
          in: query
          description: Status of the RPC
          required: false
          style: form
          schema:
            type: string
            enum:
              - DELIVERED
              - EXPIRED
              - FAILED
              - QUEUED
              - SENT
              - SUCCESSFUL
              - TIMEOUT
        - name: textSearch
          in: query
          description: Not implemented. Leave empty.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - expirationTime
              - request
              - response
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/rpc/persistent/{rpcId}:
    get:
      tags:
        - rpc-v-2-controller
      summary: Get persistent RPC request
      description: |-
        Get information about the status of the RPC call.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getPersistedRpcUsingGET
      parameters:
        - name: rpcId
          in: path
          description: A string value representing the rpc id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rpc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - rpc-v-2-controller
      summary: Delete persistent RPC
      description: |-
        Deletes the persistent RPC request.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteRpcUsingDELETE
      parameters:
        - name: rpcId
          in: path
          description: A string value representing the rpc id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/rpc/twoway/{deviceId}:
    post:
      tags:
        - rpc-v-2-controller
      summary: Send two-way RPC request
      description: |-
        Sends the two-way remote-procedure call (RPC) request to device. Sends the one-way remote-procedure call (RPC) request to device. The RPC call is A JSON that contains the method name ('method'), parameters ('params') and multiple optional fields. See example below. We will review the properties of the RPC call one-by-one below. 

        ```json
        {
          "method": "setGpio",
          "params": {
            "pin": 7,
            "value": 1
          },
          "persistent": false,
          "timeout": 5000
        }
        ```

        ### Server-side RPC structure

        The body of server-side RPC request consists of multiple fields:

        * **method** - mandatory, name of the method to distinct the RPC calls.
          For example, "getCurrentTime" or "getWeatherForecast". The value of the parameter is a string.
        * **params** - mandatory, parameters used for processing of the request. The value is a JSON. Leave empty JSON "{}" if no parameters needed.
        * **timeout** - optional, value of the processing timeout in milliseconds. The default value is 10000 (10 seconds). The minimum value is 5000 (5 seconds).
        * **expirationTime** - optional, value of the epoch time (in milliseconds, UTC timezone). Overrides **timeout** if present.
        * **persistent** - optional, indicates persistent RPC. The default value is "false".
        * **retries** - optional, defines how many times persistent RPC will be re-sent in case of failures on the network and/or device side.
        * **additionalInfo** - optional, defines metadata for the persistent RPC that will be added to the persistent RPC events.

        ### RPC Result
        In case of persistent RPC, the result of this call is 'rpcId' UUID. In case of lightweight RPC, the result of this call is the response from device, or 504 Gateway Timeout if device is offline.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: handleTwoWayDeviceRPCRequestUsingPOST_1
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Persistent RPC request was saved to the database or lightweight RPC response received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Invalid structure of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: User is not authorized to send the RPC request. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '504':
          description: Timeout to process the RPC call. Most likely, device is offline.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/ruleChain/{ruleChainId}:
    post:
      tags:
        - rule-chain-controller
      summary: Assign rule chain to edge (assignRuleChainToEdge)
      description: |-
        Creates assignment of an existing rule chain to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment rule chain (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once rule chain will be delivered to edge service, it's going to start processing messages locally. 

        Only rule chain with type 'EDGE' can be assigned to edge.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: assignRuleChainToEdgeUsingPOST
      parameters:
        - name: edgeId
          in: path
          description: edgeId
          required: true
          style: simple
          schema:
            type: string
        - name: ruleChainId
          in: path
          description: ruleChainId
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - rule-chain-controller
      summary: Unassign rule chain from edge (unassignRuleChainFromEdge)
      description: |-
        Clears assignment of the rule chain to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove rule chain (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove rule chain locally.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unassignRuleChainFromEdgeUsingDELETE
      parameters:
        - name: edgeId
          in: path
          description: edgeId
          required: true
          style: simple
          schema:
            type: string
        - name: ruleChainId
          in: path
          description: ruleChainId
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/edge/{edgeId}/ruleChains:
    get:
      tags:
        - rule-chain-controller
      summary: Get Edge Rule Chains (getEdgeRuleChains)
      description: |-
        Returns a page of Rule Chains assigned to the specified edge. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getEdgeRuleChainsUsingGET
      parameters:
        - name: edgeId
          in: path
          description: A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the rule chain name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - name
              - root
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«RuleChain»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain:
    post:
      tags:
        - rule-chain-controller
      summary: Create Or Update Rule Chain (saveRuleChain)
      description: |-
        Create or update the Rule Chain. When creating Rule Chain, platform generates Rule Chain Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Rule Chain Id will be present in the response. Specify existing Rule Chain id to update the rule chain. Referencing non-existing rule chain Id will cause 'Not Found' error.

        The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.Remove 'id', 'tenantId' from the request body example (below) to create new Rule Chain entity.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveRuleChainUsingPOST_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleChain'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/autoAssignToEdgeRuleChains:
    get:
      tags:
        - rule-chain-controller
      summary: Get Auto Assign To Edge Rule Chains (getAutoAssignToEdgeRuleChains)
      description: |-
        Returns a list of Rule Chains that will be assigned to a newly created edge. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getAutoAssignToEdgeRuleChainsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/device/default:
    post:
      tags:
        - rule-chain-controller
      summary: Create Default Rule Chain
      description: |-
        Create rule chain from template, based on the specified name in the request. Creates the rule chain based on the template that is used to create root rule chain. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveRuleChainUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultRuleChainCreateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/metadata:
    post:
      tags:
        - rule-chain-controller
      summary: Update Rule Chain Metadata
      description: |-
        Updates the rule chain metadata. The metadata object contains information about the rule nodes and their connections.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: saveRuleChainMetaDataUsingPOST
      parameters:
        - name: updateRelated
          in: query
          description: Update related rule nodes.
          required: false
          style: form
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleChainMetaData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChainMetaData'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/tbelEnabled:
    get:
      tags:
        - rule-chain-controller
      summary: Is TBEL script executor enabled
      description: |-
        Returns 'True' if the TBEL script execution is enabled

        Available for users with 'TENANT_ADMIN' authority.
      operationId: isTbelEnabledUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/testScript:
    post:
      tags:
        - rule-chain-controller
      summary: Test Script function
      description: |-
        Execute the Script function and return the result. The format of request: 

        ```json
        {
          "script": "Your Function as String",
          "scriptType": "One of: update, generate, filter, switch, json, string",
          "argNames": ["msg", "metadata", "type"],
          "msg": "{\"temperature\": 42}", 
          "metadata": {
            "deviceName": "Device A",
            "deviceType": "Thermometer"
          },
          "msgType": "POST_TELEMETRY_REQUEST"
        }
        ```

         Expected result JSON contains "output" and "error".

        Available for users with 'TENANT_ADMIN' authority.
      operationId: testScriptUsingPOST
      parameters:
        - name: scriptLang
          in: query
          description: 'Script language: JS or TBEL'
          required: false
          style: form
          schema:
            type: string
            enum:
              - JS
              - TBEL
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/{ruleChainId}:
    get:
      tags:
        - rule-chain-controller
      summary: Get Rule Chain (getRuleChainById)
      description: |-
        Fetch the Rule Chain object based on the provided Rule Chain Id. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getRuleChainByIdUsingGET
      parameters:
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - rule-chain-controller
      summary: Delete rule chain (deleteRuleChain)
      description: |-
        Deletes the rule chain. Referencing non-existing rule chain Id will cause an error. Referencing rule chain that is used in the device profiles will cause an error.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: deleteRuleChainUsingDELETE
      parameters:
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/{ruleChainId}/autoAssignToEdge:
    post:
      tags:
        - rule-chain-controller
      summary: Set Auto Assign To Edge Rule Chain (setAutoAssignToEdgeRuleChain)
      description: |-
        Makes the rule chain to be automatically assigned for any new edge that will be created. Does not assign this rule chain for already created edges. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: setAutoAssignToEdgeRuleChainUsingPOST
      parameters:
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - rule-chain-controller
      summary: Unset Auto Assign To Edge Rule Chain (unsetAutoAssignToEdgeRuleChain)
      description: |-
        Removes the rule chain from the list of rule chains that are going to be automatically assigned for any new edge that will be created. Does not unassign this rule chain for already assigned edges. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: unsetAutoAssignToEdgeRuleChainUsingDELETE
      parameters:
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/{ruleChainId}/edgeTemplateRoot:
    post:
      tags:
        - rule-chain-controller
      summary: Set Edge Template Root Rule Chain (setEdgeTemplateRootRuleChain)
      description: |-
        Makes the rule chain to be root rule chain for any new edge that will be created. Does not update root rule chain for already created edges. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: setEdgeTemplateRootRuleChainUsingPOST
      parameters:
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/{ruleChainId}/metadata:
    get:
      tags:
        - rule-chain-controller
      summary: Get Rule Chain (getRuleChainById)
      description: |-
        Fetch the Rule Chain Metadata object based on the provided Rule Chain Id. The metadata object contains information about the rule nodes and their connections.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getRuleChainMetaDataUsingGET
      parameters:
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChainMetaData'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/{ruleChainId}/output/labels:
    get:
      tags:
        - rule-chain-controller
      summary: Get Rule Chain output labels (getRuleChainOutputLabels)
      description: |-
        Fetch the unique labels for the "output" Rule Nodes that belong to the Rule Chain based on the provided Rule Chain Id. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getRuleChainOutputLabelsUsingGET
      parameters:
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/{ruleChainId}/output/labels/usage:
    get:
      tags:
        - rule-chain-controller
      summary: Get output labels usage (getRuleChainOutputLabelsUsage)
      description: |-
        Fetch the list of rule chains and the relation types (labels) they use to process output of the current rule chain based on the provided Rule Chain Id. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getRuleChainOutputLabelsUsageUsingGET
      parameters:
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleChainOutputLabelsUsage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChain/{ruleChainId}/root:
    post:
      tags:
        - rule-chain-controller
      summary: Set Root Rule Chain (setRootRuleChain)
      description: |-
        Makes the rule chain to be root rule chain. Updates previous root rule chain as well. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: setRootRuleChainUsingPOST
      parameters:
        - name: ruleChainId
          in: path
          description: A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChain'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChains/export:
    get:
      tags:
        - rule-chain-controller
      summary: Export Rule Chains
      description: |-
        Exports all tenant rule chains as one JSON.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: exportRuleChainsUsingGET
      parameters:
        - name: limit
          in: query
          description: A limit of rule chains to export.
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleChainData'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChains/import:
    post:
      tags:
        - rule-chain-controller
      summary: Import Rule Chains
      description: |-
        Imports all tenant rule chains as one JSON.

        Available for users with 'TENANT_ADMIN' authority.
      operationId: importRuleChainsUsingPOST
      parameters:
        - name: overwrite
          in: query
          description: Enables overwrite for existing rule chains with the same name.
          required: false
          style: form
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleChainData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleChainImportResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleChains:
    get:
      tags:
        - rule-chain-controller
      summary: Get Rule Chains (getRuleChains)
      description: |-
        Returns a page of Rule Chains owned by tenant. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getRuleChainsUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Rule chain type (CORE or EDGE)
          required: false
          style: form
          schema:
            type: string
            enum:
              - CORE
              - EDGE
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the rule chain name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - name
              - root
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«RuleChain»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/ruleNode/{ruleNodeId}/debugIn:
    get:
      tags:
        - rule-chain-controller
      summary: Get latest input message (getLatestRuleNodeDebugInput)
      description: |-
        Gets the input message from the debug events for specified Rule Chain Id. Referencing non-existing rule chain Id will cause an error. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getLatestRuleNodeDebugInputUsingGET
      parameters:
        - name: ruleNodeId
          in: path
          description: A string value representing the rule node id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/noauth/activateByEmailCode:
    post:
      tags:
        - sign-up-controller
      summary: activateUserByEmailCode
      operationId: activateUserByEmailCodeUsingPOST
      parameters:
        - name: emailCode
          in: query
          description: emailCode
          required: true
          style: form
          schema:
            type: string
        - name: pkgName
          in: query
          description: pkgName
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT Pair'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
  /api/noauth/activateEmail:
    get:
      tags:
        - sign-up-controller
      summary: activateEmail
      operationId: activateEmailUsingGET
      parameters:
        - name: emailCode
          in: query
          description: emailCode
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pkgName
          in: query
          description: pkgName
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
  /api/noauth/login:
    get:
      tags:
        - sign-up-controller
      summary: mobileLogin
      operationId: mobileLoginUsingGET
      parameters:
        - name: pkgName
          in: query
          description: pkgName
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
  /api/noauth/resendEmailActivation:
    post:
      tags:
        - sign-up-controller
      summary: resendEmailActivation
      operationId: resendEmailActivationUsingPOST
      parameters:
        - name: email
          in: query
          description: email
          required: true
          style: form
          schema:
            type: string
        - name: pkgName
          in: query
          description: pkgName
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
  /api/noauth/signup:
    post:
      tags:
        - sign-up-controller
      summary: signUp
      operationId: signUpUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                enum:
                  - INACTIVE_USER_EXISTS
                  - SUCCESS
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
  /api/noauth/signup/recaptchaParams:
    get:
      tags:
        - sign-up-controller
      summary: getRecaptchaParams
      operationId: getRecaptchaParamsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaClientParams'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
  /api/noauth/signup/recaptchaPublicKey:
    get:
      tags:
        - sign-up-controller
      summary: getRecaptchaPublicKey
      operationId: getRecaptchaPublicKeyUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
  /api/signup/acceptPrivacyPolicy:
    post:
      tags:
        - sign-up-controller
      summary: acceptPrivacyPolicy
      operationId: acceptPrivacyPolicyUsingPOST
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT Pair'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/signup/privacyPolicyAccepted:
    get:
      tags:
        - sign-up-controller
      summary: privacyPolicyAccepted
      operationId: privacyPolicyAcceptedUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/signup/tenantAccount:
    delete:
      tags:
        - sign-up-controller
      summary: deleteTenantAccount
      operationId: deleteTenantAccountUsingDELETE
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource:
    get:
      tags:
        - tb-resource-controller
      summary: Get Resource Infos (getResources)
      description: |-
        Returns a page of Resource Info objects owned by tenant or sysadmin. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Resource Info is a lightweight object that includes main information about the Resource excluding the heavyweight data. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getResourcesUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: resourceType
          in: query
          description: A string value representing the resource type.
          required: false
          style: form
          schema:
            type: string
            enum:
              - JKS
              - JS_MODULE
              - LWM2M_MODEL
              - PKCS_12
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the resource title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - resourceType
              - tenantId
              - title
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«TbResourceInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - tb-resource-controller
      summary: Create Or Update Resource (saveResource)
      description: |-
        Create or update the Resource. When creating the Resource, platform generates Resource id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Resource id will be present in the response. Specify existing Resource id to update the Resource. Referencing non-existing Resource Id will cause 'Not Found' error. 

        Resource combination of the title with the key is unique in the scope of tenant. Remove 'id', 'tenantId' from the request body example (below) to create new Resource entity.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: saveResourceUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TbResource'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TbResourceInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/info/{resourceId}:
    get:
      tags:
        - tb-resource-controller
      summary: Get Resource Info (getResourceInfoById)
      description: |-
        Fetch the Resource Info object based on the provided Resource Id. Resource Info is a lightweight object that includes main information about the Resource excluding the heavyweight data. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getResourceInfoByIdUsingGET
      parameters:
        - name: resourceId
          in: path
          description: A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TbResourceInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/jks/{resourceId}/download:
    get:
      tags:
        - tb-resource-controller
      summary: Download JKS Resource (downloadJksResourceIfChanged)
      description: |-
        Download Resource based on the provided Resource Id or return 304 status code if resource was not changed.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: downloadJksResourceIfChangedUsingGET
      parameters:
        - name: resourceId
          in: path
          description: A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: If-None-Match
          in: header
          description: If-None-Match
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/x-java-keystore:
              schema:
                $ref: '#/components/schemas/ByteArrayResource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/js/{resourceId}/download:
    get:
      tags:
        - tb-resource-controller
      summary: Download JS Resource (downloadJsResourceIfChanged)
      description: |-
        Download Resource based on the provided Resource Id or return 304 status code if resource was not changed.

        Available for any authorized user. 
      operationId: downloadJsResourceIfChangedUsingGET
      parameters:
        - name: resourceId
          in: path
          description: A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: If-None-Match
          in: header
          description: If-None-Match
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/javascript:
              schema:
                $ref: '#/components/schemas/ByteArrayResource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/lwm2m/page:
    get:
      tags:
        - tb-resource-controller
      summary: Get LwM2M Objects (getLwm2mListObjectsPage)
      description: |-
        Returns a page of LwM2M objects parsed from Resources with type 'LWM2M_MODEL' owned by tenant or sysadmin. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. LwM2M Object is a object that includes information about the LwM2M model which can be used in transport configuration for the LwM2M device profile. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getLwm2mListObjectsPageUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the resource title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - id
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LwM2mObject'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/lwm2m/{resourceId}/download:
    get:
      tags:
        - tb-resource-controller
      summary: Download LWM2M Resource (downloadLwm2mResourceIfChanged)
      description: |-
        Download Resource based on the provided Resource Id or return 304 status code if resource was not changed.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: downloadLwm2mResourceIfChangedUsingGET
      parameters:
        - name: resourceId
          in: path
          description: A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: If-None-Match
          in: header
          description: If-None-Match
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ByteArrayResource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/lwm2m:
    get:
      tags:
        - tb-resource-controller
      summary: Get LwM2M Objects (getLwm2mListObjects)
      description: |-
        Returns a page of LwM2M objects parsed from Resources with type 'LWM2M_MODEL' owned by tenant or sysadmin. You can specify parameters to filter the results. LwM2M Object is a object that includes information about the LwM2M model which can be used in transport configuration for the LwM2M device profile. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getLwm2mListObjectsUsingGET
      parameters:
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: true
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: true
          style: form
          schema:
            type: string
            enum:
              - id
              - name
        - name: objectIds
          in: query
          description: LwM2M Object ids.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LwM2mObject'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/pkcs12/{resourceId}/download:
    get:
      tags:
        - tb-resource-controller
      summary: Download PKCS_12 Resource (downloadPkcs12ResourceIfChanged)
      description: |-
        Download Resource based on the provided Resource Id or return 304 status code if resource was not changed.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: downloadPkcs12ResourceIfChangedUsingGET
      parameters:
        - name: resourceId
          in: path
          description: A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: If-None-Match
          in: header
          description: If-None-Match
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/x-pkcs12:
              schema:
                $ref: '#/components/schemas/ByteArrayResource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/tenant:
    get:
      tags:
        - tb-resource-controller
      summary: Get All Resource Infos (getAllResources)
      description: |-
        Returns a page of Resource Info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Resource Info is a lightweight object that includes main information about the Resource excluding the heavyweight data. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getTenantResourcesUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the resource title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - resourceType
              - tenantId
              - title
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«TbResourceInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/{resourceId}:
    delete:
      tags:
        - tb-resource-controller
      summary: Delete Resource (deleteResource)
      description: |-
        Deletes the Resource. Referencing non-existing Resource Id will cause an error.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: deleteResourceUsingDELETE
      parameters:
        - name: resourceId
          in: path
          description: A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/resource/{resourceId}/download:
    get:
      tags:
        - tb-resource-controller
      summary: Download Resource (downloadResource)
      description: |-
        Download Resource based on the provided Resource Id.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: downloadResourceUsingGET
      parameters:
        - name: resourceId
          in: path
          description: A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ByteArrayResource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{deviceId}/{scope}:
    delete:
      tags:
        - telemetry-controller
      summary: Delete device attributes (deleteDeviceAttributes)
      description: |-
        Delete device attributes using provided Device Id, scope and a list of keys. Referencing a non-existing Device Id will cause an error

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: deleteDeviceAttributesUsingDELETE
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: scope
          in: path
          description: A string value representing the attributes scope. For example, 'SERVER_SCOPE'.
          required: true
          style: simple
          schema:
            type: string
            enum:
              - CLIENT_SCOPE
              - SERVER_SCOPE
              - SHARED_SCOPE
        - name: keys
          in: query
          description: A string value representing the comma-separated list of attributes keys. For example, 'active,inactivityAlarmTime'.
          required: true
          style: form
          schema:
            type: string
      responses:
        '200':
          description: Device attributes was removed for the selected keys in the request. Platform creates an audit log event about device attributes removal with action type 'ATTRIBUTES_DELETED'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Platform returns a bad request in case if keys or scope are not specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: User is not authorized to delete device attributes for selected entity. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '500':
          description: The exception was thrown during processing the request. Platform creates an audit log event about device attributes removal with action type 'ATTRIBUTES_DELETED' that includes an error stacktrace.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - telemetry-controller
      summary: Save device attributes (saveDeviceAttributes)
      description: |-
        Creates or updates the device attributes based on device id and specified attribute scope. The request payload is a JSON object with key-value format of attributes to create or update. For example:

        ```json
        {
         "stringKey":"value1", 
         "booleanKey":true, 
         "doubleKey":42.0, 
         "longKey":73, 
         "jsonKey": {
            "someNumber": 42,
            "someArray": [1,2,3],
            "someNestedObject": {"key": "value"}
         }
        }
        ```


        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveDeviceAttributesUsingPOST
      parameters:
        - name: deviceId
          in: path
          description: A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: scope
          in: path
          description: A string value representing the attributes scope. For example, 'SERVER_SCOPE'.
          required: true
          style: simple
          schema:
            type: string
            enum:
              - SERVER_SCOPE
              - SHARED_SCOPE
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        '200':
          description: Attribute from the request was created or updated. Platform creates an audit log event about device attributes updates with action type 'ATTRIBUTES_UPDATED', and also sends event msg to the rule engine with msg type 'ATTRIBUTES_UPDATED'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Invalid structure of the request or invalid attributes scope provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: User is not authorized to save device attributes for selected device. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '500':
          description: The exception was thrown during processing the request. Platform creates an audit log event about device attributes updates with action type 'ATTRIBUTES_UPDATED' that includes an error stacktrace.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/attributes/{scope}:
    post:
      tags:
        - telemetry-controller
      summary: Save entity attributes (saveEntityAttributesV2)
      description: |-
        Creates or updates the entity attributes based on Entity Id and the specified attribute scope.  List of possible attribute scopes depends on the entity type: 

         * SERVER_SCOPE - supported for all entity types;
         * SHARED_SCOPE - supported for devices.

        The request payload is a JSON object with key-value format of attributes to create or update. For example:

        ```json
        {
         "stringKey":"value1", 
         "booleanKey":true, 
         "doubleKey":42.0, 
         "longKey":73, 
         "jsonKey": {
            "someNumber": 42,
            "someArray": [1,2,3],
            "someNestedObject": {"key": "value"}
         }
        }
        ```
        Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveEntityAttributesV2UsingPOST
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: scope
          in: path
          description: A string value representing the attributes scope. For example, 'SERVER_SCOPE'.
          required: true
          style: simple
          schema:
            type: string
            enum:
              - SERVER_SCOPE
              - SHARED_SCOPE
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        '200':
          description: Attribute from the request was created or updated. Platform creates an audit log event about entity attributes updates with action type 'ATTRIBUTES_UPDATED', and also sends event msg to the rule engine with msg type 'ATTRIBUTES_UPDATED'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Invalid structure of the request or invalid attributes scope provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: User is not authorized to save entity attributes for selected entity. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '500':
          description: The exception was thrown during processing the request. Platform creates an audit log event about entity attributes updates with action type 'ATTRIBUTES_UPDATED' that includes an error stacktrace.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/keys/attributes:
    get:
      tags:
        - telemetry-controller
      summary: Get all attribute keys (getAttributeKeys)
      description: |-
        Returns a set of unique attribute key names for the selected entity. The response will include merged key names set for all attribute scopes:

         * SERVER_SCOPE - supported for all entity types;
         * CLIENT_SCOPE - supported for devices;
         * SHARED_SCOPE - supported for devices. 

        Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAttributeKeysUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/keys/attributes/{scope}:
    get:
      tags:
        - telemetry-controller
      summary: Get all attribute keys by scope (getAttributeKeysByScope)
      description: |-
        Returns a set of unique attribute key names for the selected entity and attributes scope: 

         * SERVER_SCOPE - supported for all entity types;
         * CLIENT_SCOPE - supported for devices;
         * SHARED_SCOPE - supported for devices. 

        Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAttributeKeysByScopeUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: scope
          in: path
          description: A string value representing the attributes scope. For example, 'SERVER_SCOPE'.
          required: true
          style: simple
          schema:
            type: string
            enum:
              - CLIENT_SCOPE
              - SERVER_SCOPE
              - SHARED_SCOPE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/keys/timeseries:
    get:
      tags:
        - telemetry-controller
      summary: Get time-series keys (getTimeseriesKeys)
      description: |-
        Returns a set of unique time-series key names for the selected entity. 

        Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getTimeseriesKeysUsingGET_1
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/timeseries/delete:
    delete:
      tags:
        - telemetry-controller
      summary: Delete entity time-series data (deleteEntityTimeseries)
      description: |-
        Delete time-series for selected entity based on entity id, entity type and keys. Use 'deleteAllDataForKeys' to delete all time-series data. Use 'startTs' and 'endTs' to specify time-range instead.  Use 'deleteLatest' to delete latest value (stored in separate table for performance) if the value's timestamp matches the time-range.  Use 'rewriteLatestIfDeleted' to rewrite latest value (stored in separate table for performance) if the value's timestamp matches the time-range and 'deleteLatest' param is true. The replacement value will be fetched from the 'time-series' table, and its timestamp will be the most recent one before the defined time-range. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: deleteEntityTimeseriesUsingDELETE
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: keys
          in: query
          description: A string value representing the comma-separated list of telemetry keys. If keys are not selected, the result will return all latest timeseries. For example, 'temperature,humidity'.
          required: true
          style: form
          schema:
            type: string
        - name: deleteAllDataForKeys
          in: query
          description: A boolean value to specify if should be deleted all data for selected keys or only data that are in the selected time range.
          required: false
          style: form
          schema:
            type: boolean
        - name: startTs
          in: query
          description: A long value representing the start timestamp of removal time range in milliseconds.
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: endTs
          in: query
          description: A long value representing the end timestamp of removal time range in milliseconds.
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: deleteLatest
          in: query
          description: If the parameter is set to true, the latest telemetry can be removed, otherwise, in case that parameter is set to false the latest value will not removed.
          required: false
          style: form
          schema:
            type: boolean
        - name: rewriteLatestIfDeleted
          in: query
          description: If the parameter is set to true, the latest telemetry will be rewritten in case that current latest value was removed, otherwise, in case that parameter is set to false the new latest value will not set.
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: Timeseries for the selected keys in the request was removed. Platform creates an audit log event about entity timeseries removal with action type 'TIMESERIES_DELETED'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Platform returns a bad request in case if keys list is empty or start and end timestamp values is empty when deleteAllDataForKeys is set to false.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: User is not authorized to delete entity timeseries for selected entity. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '500':
          description: The exception was thrown during processing the request. Platform creates an audit log event about entity timeseries removal with action type 'TIMESERIES_DELETED' that includes an error stacktrace.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/timeseries/{scope}/{ttl}:
    post:
      tags:
        - telemetry-controller
      summary: Save or update time-series data with TTL (saveEntityTelemetryWithTTL)
      description: |-
        Creates or updates the entity time-series data based on the Entity Id and request payload.The request payload is a JSON document with three possible formats:

        Simple format without timestamp. In such a case, current server time will be used: 

        ```json
        {"temperature": 26}
        ```

         Single JSON object with timestamp: 

        ```json
        {"ts":1634712287000,"values":{"temperature":26, "humidity":87}}
        ```

         JSON array with timestamps: 

        ```json
        [{"ts":1634712287000,"values":{"temperature":26, "humidity":87}}, {"ts":1634712588000,"values":{"temperature":25, "humidity":88}}]
        ```

         The scope parameter is not used in the API call implementation but should be specified whatever value because it is used as a path variable. 

        The ttl parameter takes affect only in case of Cassandra DB.Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveEntityTelemetryWithTTLUsingPOST
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: scope
          in: path
          description: Value is deprecated, reserved for backward compatibility and not used in the API call implementation. Specify any scope for compatibility
          required: true
          style: simple
          schema:
            type: string
            enum:
              - ANY
        - name: ttl
          in: path
          description: A long value representing TTL (Time to Live) parameter.
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Timeseries from the request was created or updated. Platform creates an audit log event about entity timeseries updates with action type 'TIMESERIES_UPDATED'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Invalid structure of the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: User is not authorized to save entity timeseries for selected entity. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '500':
          description: The exception was thrown during processing the request. Platform creates an audit log event about entity timeseries updates with action type 'TIMESERIES_UPDATED' that includes an error stacktrace.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/timeseries/{scope}:
    post:
      tags:
        - telemetry-controller
      summary: Save or update time-series data (saveEntityTelemetry)
      description: |-
        Creates or updates the entity time-series data based on the Entity Id and request payload.The request payload is a JSON document with three possible formats:

        Simple format without timestamp. In such a case, current server time will be used: 

        ```json
        {"temperature": 26}
        ```

         Single JSON object with timestamp: 

        ```json
        {"ts":1634712287000,"values":{"temperature":26, "humidity":87}}
        ```

         JSON array with timestamps: 

        ```json
        [{"ts":1634712287000,"values":{"temperature":26, "humidity":87}}, {"ts":1634712588000,"values":{"temperature":25, "humidity":88}}]
        ```

         The scope parameter is not used in the API call implementation but should be specified whatever value because it is used as a path variable. Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveEntityTelemetryUsingPOST
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: scope
          in: path
          description: Value is deprecated, reserved for backward compatibility and not used in the API call implementation. Specify any scope for compatibility
          required: true
          style: simple
          schema:
            type: string
            enum:
              - ANY
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Timeseries from the request was created or updated. Platform creates an audit log event about entity timeseries updates with action type 'TIMESERIES_UPDATED'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Invalid structure of the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: User is not authorized to save entity timeseries for selected entity. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '500':
          description: The exception was thrown during processing the request. Platform creates an audit log event about entity timeseries updates with action type 'TIMESERIES_UPDATED' that includes an error stacktrace.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/values/attributes/{scope}:
    get:
      tags:
        - telemetry-controller
      summary: Get attributes by scope (getAttributesByScope)
      description: |-
        Returns all attributes of a specified scope that belong to specified entity. List of possible attribute scopes depends on the entity type: 

         * SERVER_SCOPE - supported for all entity types;
         * SHARED_SCOPE - supported for devices;
         * CLIENT_SCOPE - supported for devices. 

        Use optional 'keys' parameter to return specific attributes.
         Example of the result: 

        ```json
        [
          {"key": "stringAttributeKey", "value": "value", "lastUpdateTs": 1609459200000},
          {"key": "booleanAttributeKey", "value": false, "lastUpdateTs": 1609459200001},
          {"key": "doubleAttributeKey", "value": 42.2, "lastUpdateTs": 1609459200002},
          {"key": "longKeyExample", "value": 73, "lastUpdateTs": 1609459200003},
          {"key": "jsonKeyExample",
            "value": {
              "someNumber": 42,
              "someArray": [1,2,3],
              "someNestedObject": {"key": "value"}
            },
            "lastUpdateTs": 1609459200004
          }
        ]
        ```

         Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAttributesByScopeUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: scope
          in: path
          description: A string value representing the attributes scope. For example, 'SERVER_SCOPE'.
          required: true
          style: simple
          schema:
            type: string
            enum:
              - CLIENT_SCOPE
              - SERVER_SCOPE
              - SHARED_SCOPE
        - name: keys
          in: query
          description: A string value representing the comma-separated list of attributes keys. For example, 'active,inactivityAlarmTime'.
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/values/attributes:
    get:
      tags:
        - telemetry-controller
      summary: Get attributes (getAttributes)
      description: |-
        Returns all attributes that belong to specified entity. Use optional 'keys' parameter to return specific attributes.
         Example of the result: 

        ```json
        [
          {"key": "stringAttributeKey", "value": "value", "lastUpdateTs": 1609459200000},
          {"key": "booleanAttributeKey", "value": false, "lastUpdateTs": 1609459200001},
          {"key": "doubleAttributeKey", "value": 42.2, "lastUpdateTs": 1609459200002},
          {"key": "longKeyExample", "value": 73, "lastUpdateTs": 1609459200003},
          {"key": "jsonKeyExample",
            "value": {
              "someNumber": 42,
              "someArray": [1,2,3],
              "someNestedObject": {"key": "value"}
            },
            "lastUpdateTs": 1609459200004
          }
        ]
        ```

         Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getAttributesUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: keys
          in: query
          description: A string value representing the comma-separated list of attributes keys. For example, 'active,inactivityAlarmTime'.
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/values/timeseries:
    get:
      tags:
        - telemetry-controller
      summary: Get time-series data (getTimeseries)
      description: |-
        Returns a range of time-series values for specified entity. Returns not aggregated data by default. Use aggregation function ('agg') and aggregation interval ('interval') to enable aggregation of the results on the database / server side. The aggregation is generally more efficient then fetching all records. 

        ```json
        {
          "temperature": [
            {
              "value": 36.7,
              "ts": 1609459200000
            },
            {
              "value": 36.6,
              "ts": 1609459201000
            }
          ]
        }
        ```

        Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getTimeseriesUsingGET
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: keys
          in: query
          description: A string value representing the comma-separated list of telemetry keys.
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: startTs
          in: query
          description: A long value representing the start timestamp of the time range in milliseconds, UTC.
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int64
        - name: endTs
          in: query
          description: A long value representing the end timestamp of the time range in milliseconds, UTC.
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int64
        - name: interval
          in: query
          description: A long value representing the aggregation interval range in milliseconds.
          required: false
          style: form
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: An integer value that represents a max number of timeseries data points to fetch. This parameter is used only in the case if 'agg' parameter is set to 'NONE'.
          required: false
          style: form
          schema:
            type: integer
            format: int32
        - name: agg
          in: query
          description: A string value representing the aggregation function. If the interval is not specified, 'agg' parameter will use 'NONE' value.
          required: false
          style: form
          schema:
            type: string
            enum:
              - AVG
              - COUNT
              - MAX
              - MIN
              - NONE
              - SUM
        - name: orderBy
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: useStrictDataTypes
          in: query
          description: Enables/disables conversion of telemetry values to strings. Conversion is enabled by default. Set parameter to 'true' in order to disable the conversion.
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/plugins/telemetry/{entityType}/{entityId}/{scope}:
    delete:
      tags:
        - telemetry-controller
      summary: Delete entity attributes (deleteEntityAttributes)
      description: |-
        Delete entity attributes using provided Entity Id, scope and a list of keys. Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: deleteEntityAttributesUsingDELETE
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: scope
          in: path
          description: A string value representing the attributes scope. For example, 'SERVER_SCOPE'.
          required: true
          style: simple
          schema:
            type: string
            enum:
              - CLIENT_SCOPE
              - SERVER_SCOPE
              - SHARED_SCOPE
        - name: keys
          in: query
          description: A string value representing the comma-separated list of attributes keys. For example, 'active,inactivityAlarmTime'.
          required: true
          style: form
          schema:
            type: string
      responses:
        '200':
          description: Entity attributes was removed for the selected keys in the request. Platform creates an audit log event about entity attributes removal with action type 'ATTRIBUTES_DELETED'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Platform returns a bad request in case if keys or scope are not specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: User is not authorized to delete entity attributes for selected entity. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '500':
          description: The exception was thrown during processing the request. Platform creates an audit log event about entity attributes removal with action type 'ATTRIBUTES_DELETED' that includes an error stacktrace.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - telemetry-controller
      summary: Save entity attributes (saveEntityAttributesV1)
      description: |-
        Creates or updates the entity attributes based on Entity Id and the specified attribute scope.  List of possible attribute scopes depends on the entity type: 

         * SERVER_SCOPE - supported for all entity types;
         * SHARED_SCOPE - supported for devices.

        The request payload is a JSON object with key-value format of attributes to create or update. For example:

        ```json
        {
         "stringKey":"value1", 
         "booleanKey":true, 
         "doubleKey":42.0, 
         "longKey":73, 
         "jsonKey": {
            "someNumber": 42,
            "someArray": [1,2,3],
            "someNestedObject": {"key": "value"}
         }
        }
        ```
        Referencing a non-existing entity Id or invalid entity type will cause an error. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveEntityAttributesV1UsingPOST
      parameters:
        - name: entityType
          in: path
          description: A string value representing the entity type. For example, 'DEVICE'
          required: true
          style: simple
          schema:
            type: string
        - name: entityId
          in: path
          description: A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: scope
          in: path
          description: A string value representing the attributes scope. For example, 'SERVER_SCOPE'.
          required: true
          style: simple
          schema:
            type: string
            enum:
              - SERVER_SCOPE
              - SHARED_SCOPE
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        '200':
          description: Attribute from the request was created or updated. Platform creates an audit log event about entity attributes updates with action type 'ATTRIBUTES_UPDATED', and also sends event msg to the rule engine with msg type 'ATTRIBUTES_UPDATED'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredResult«ResponseEntity»'
        '400':
          description: Invalid structure of the request or invalid attributes scope provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: User is not authorized to save entity attributes for selected entity. Most likely, User belongs to different Customer or Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '500':
          description: The exception was thrown during processing the request. Platform creates an audit log event about entity attributes updates with action type 'ATTRIBUTES_UPDATED' that includes an error stacktrace.
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant:
    post:
      tags:
        - tenant-controller
      summary: Create Or update Tenant (saveTenant)
      description: |-
        Create or update the Tenant. When creating tenant, platform generates Tenant Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). Default Rule Chain and Device profile are also generated for the new tenants automatically. The newly created Tenant Id will be present in the response. Specify existing Tenant Id id to update the Tenant. Referencing non-existing Tenant Id will cause 'Not Found' error.Remove 'id', 'tenantId' from the request body example (below) to create new Tenant entity.

        Available for users with 'SYS_ADMIN' authority.
      operationId: saveTenantUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/info/{tenantId}:
    get:
      tags:
        - tenant-controller
      summary: Get Tenant Info (getTenantInfoById)
      description: |-
        Fetch the Tenant Info object based on the provided Tenant Id. The Tenant Info object extends regular Tenant object and includes Tenant Profile name. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getTenantInfoByIdUsingGET
      parameters:
        - name: tenantId
          in: path
          description: A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/{tenantId}:
    get:
      tags:
        - tenant-controller
      summary: Get Tenant (getTenantById)
      description: |-
        Fetch the Tenant object based on the provided Tenant Id. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getTenantByIdUsingGET
      parameters:
        - name: tenantId
          in: path
          description: A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - tenant-controller
      summary: Delete Tenant (deleteTenant)
      description: |-
        Deletes the tenant, it's customers, rule chains, devices and all other related entities. Referencing non-existing tenant Id will cause an error.

        Available for users with 'SYS_ADMIN' authority.
      operationId: deleteTenantUsingDELETE
      parameters:
        - name: tenantId
          in: path
          description: A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenantInfos:
    get:
      tags:
        - tenant-controller
      summary: Get Tenants Info (getTenants)
      description: |-
        Returns a page of tenant info objects registered in the platform. The Tenant Info object extends regular Tenant object and includes Tenant Profile name. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getTenantInfosUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the tenant name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - address
              - address2
              - city
              - country
              - createdTime
              - email
              - phone
              - state
              - tenantProfileName
              - title
              - zip
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«TenantInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenants:
    get:
      tags:
        - tenant-controller
      summary: Get Tenants (getTenants)
      description: |-
        Returns a page of tenants registered in the platform. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getTenantsUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the tenant name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - address
              - address2
              - city
              - country
              - createdTime
              - email
              - phone
              - state
              - title
              - zip
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«Tenant»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenantProfile:
    post:
      tags:
        - tenant-profile-controller
      summary: Create Or update Tenant Profile (saveTenantProfile)
      description: |-
        Create or update the Tenant Profile. When creating tenant profile, platform generates Tenant Profile Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Tenant Profile Id will be present in the response. Specify existing Tenant Profile Id id to update the Tenant Profile. Referencing non-existing Tenant Profile Id will cause 'Not Found' error. 

        Update of the tenant profile configuration will cause immediate recalculation of API limits for all affected Tenants. 

        The **'profileData'** object is the part of Tenant Profile that defines API limits and Rate limits. 

        You have an ability to define maximum number of devices ('maxDevice'), assets ('maxAssets') and other entities. You may also define maximum number of messages to be processed per month ('maxTransportMessages', 'maxREExecutions', etc). The '*RateLimit' defines the rate limits using simple syntax. For example, '1000:1,20000:60' means up to 1000 events per second but no more than 20000 event per minute. Let's review the example of tenant profile data below: 

        ```json
        {
          "name": "Default",
          "description": "Default tenant profile",
          "isolatedTbRuleEngine": false,
          "profileData": {
            "configuration": {
              "type": "DEFAULT",
              "maxDevices": 0,
              "maxAssets": 0,
              "maxCustomers": 0,
              "maxUsers": 0,
              "maxDashboards": 0,
              "maxRuleChains": 0,
              "maxResourcesInBytes": 0,
              "maxOtaPackagesInBytes": 0,
              "maxResourceSize": 0,
              "transportTenantMsgRateLimit": "1000:1,20000:60",
              "transportTenantTelemetryMsgRateLimit": "1000:1,20000:60",
              "transportTenantTelemetryDataPointsRateLimit": "1000:1,20000:60",
              "transportDeviceMsgRateLimit": "20:1,600:60",
              "transportDeviceTelemetryMsgRateLimit": "20:1,600:60",
              "transportDeviceTelemetryDataPointsRateLimit": "20:1,600:60",
              "maxTransportMessages": 10000000,
              "maxTransportDataPoints": 10000000,
              "maxREExecutions": 4000000,
              "maxJSExecutions": 5000000,
              "maxDPStorageDays": 0,
              "maxRuleNodeExecutionsPerMessage": 50,
              "maxEmails": 0,
              "maxSms": 0,
              "maxCreatedAlarms": 1000,
              "defaultStorageTtlDays": 0,
              "alarmsTtlDays": 0,
              "rpcTtlDays": 0,
              "queueStatsTtlDays": 0,
              "ruleEngineExceptionsTtlDays": 0,
              "warnThreshold": 0
            }
          },
          "default": true
        }
        ```Remove 'id', from the request body example (below) to create new Tenant Profile entity.

        Available for users with 'SYS_ADMIN' authority.
      operationId: saveTenantProfileUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantProfile'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantProfile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenantProfile/{tenantProfileId}:
    get:
      tags:
        - tenant-profile-controller
      summary: Get Tenant Profile (getTenantProfileById)
      description: |-
        Fetch the Tenant Profile object based on the provided Tenant Profile Id. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getTenantProfileByIdUsingGET
      parameters:
        - name: tenantProfileId
          in: path
          description: A string value representing the tenant profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantProfile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - tenant-profile-controller
      summary: Delete Tenant Profile (deleteTenantProfile)
      description: |-
        Deletes the tenant profile. Referencing non-existing tenant profile Id will cause an error. Referencing profile that is used by the tenants will cause an error. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: deleteTenantProfileUsingDELETE
      parameters:
        - name: tenantProfileId
          in: path
          description: A string value representing the tenant profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenantProfile/{tenantProfileId}/default:
    post:
      tags:
        - tenant-profile-controller
      summary: Make tenant profile default (setDefaultTenantProfile)
      description: |-
        Makes specified tenant profile to be default. Referencing non-existing tenant profile Id will cause an error. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: setDefaultTenantProfileUsingPOST
      parameters:
        - name: tenantProfileId
          in: path
          description: A string value representing the tenant profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantProfile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenantProfileInfo/default:
    get:
      tags:
        - tenant-profile-controller
      summary: Get default Tenant Profile Info (getDefaultTenantProfileInfo)
      description: |-
        Fetch the default Tenant Profile Info object based. Tenant Profile Info is a lightweight object that contains only id and name of the profile. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getDefaultTenantProfileInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenantProfileInfo/{tenantProfileId}:
    get:
      tags:
        - tenant-profile-controller
      summary: Get Tenant Profile Info (getTenantProfileInfoById)
      description: |-
        Fetch the Tenant Profile Info object based on the provided Tenant Profile Id. Tenant Profile Info is a lightweight object that contains only id and name of the profile. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getTenantProfileInfoByIdUsingGET
      parameters:
        - name: tenantProfileId
          in: path
          description: A string value representing the tenant profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenantProfileInfos:
    get:
      tags:
        - tenant-profile-controller
      summary: Get Tenant Profiles Info (getTenantProfileInfos)
      description: |-
        Returns a page of tenant profile info objects registered in the platform. Tenant Profile Info is a lightweight object that contains only id and name of the profile. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getTenantProfileInfosUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the tenant profile name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - id
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«EntityInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenantProfiles:
    get:
      tags:
        - tenant-profile-controller
      summary: Get Tenant Profiles (getTenantProfiles)
      description: |-
        Returns a page of tenant profiles registered in the platform. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getTenantProfilesUsingGET
      parameters:
        - name: ids
          in: query
          description: ids
          required: true
          style: form
          explode: true
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the tenant profile name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - description
              - isDefault
              - name
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«TenantProfile»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/2fa/account/config/generate:
    post:
      tags:
        - two-factor-auth-config-controller
      summary: Generate 2FA account config (generateTwoFaAccountConfig)
      description: |-
        Generate new 2FA account config template for specified provider type. 

        For TOTP, this will return a corresponding account config template with a generated OTP auth URL (with new random secret key for each API call) that can be then converted to a QR code to scan with an authenticator app. Example:
        ```
        {
          "providerType": "TOTP",
          "useByDefault": false,
          "authUrl": "otpauth://totp/TB%202FA:tenant@thingsboard.org?issuer=TB+2FA&secret=PNJDNWJVAK4ZTUYT7RFGPQLXA7XGU7PX"
        }
        ```

        For EMAIL, the generated config will contain email from user's account:
        ```
        {
          "providerType": "EMAIL",
          "useByDefault": false,
          "email": "tenant@thingsboard.org"
        }
        ```

        For SMS 2FA this method will just return a config with empty/default values as there is nothing to generate/preset:
        ```
        {
          "providerType": "SMS",
          "useByDefault": false,
          "phoneNumber": null
        }
        ```

        Will throw an error (Bad Request) if the provider is not configured for usage. 

        Available for any authorized user. 
      operationId: generateTwoFaAccountConfigUsingPOST
      parameters:
        - name: providerType
          in: query
          description: 2FA provider type to generate new account config for
          required: true
          style: form
          schema:
            type: string
            enum:
              - BACKUP_CODE
              - EMAIL
              - SMS
              - TOTP
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFaAccountConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/2fa/account/config/submit:
    post:
      tags:
        - two-factor-auth-config-controller
      summary: Submit 2FA account config (submitTwoFaAccountConfig)
      description: |-
        Submit 2FA account config to prepare for a future verification. Basically, this method will send a verification code for a given account config, if this has sense for a chosen 2FA provider. This code is needed to then verify and save the account config.

        Example of EMAIL 2FA account config:
        ```
        {
          "providerType": "EMAIL",
          "useByDefault": true,
          "email": "separate-email-for-2fa@thingsboard.org"
        }
        ```

        Example of SMS 2FA account config:
        ```
        {
          "providerType": "SMS",
          "useByDefault": false,
          "phoneNumber": "+38012312321"
        }
        ```

        For TOTP this method does nothing.

        Will throw an error (Bad Request) if submitted account config is not valid, or if the provider is not configured for usage. 

        Available for any authorized user. 
      operationId: submitTwoFaAccountConfigUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFaAccountConfig'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/2fa/account/config:
    put:
      tags:
        - two-factor-auth-config-controller
      summary: Update 2FA account config (updateTwoFaAccountConfig)
      description: |-
        Update config for a given provider type. 
        Update request example:
        ```
        {
          "useByDefault": true
        }
        ```
        Returns whole account's 2FA settings object.


        Available for any authorized user. 
      operationId: updateTwoFaAccountConfigUsingPUT
      parameters:
        - name: providerType
          in: query
          description: providerType
          required: true
          style: form
          schema:
            type: string
            enum:
              - BACKUP_CODE
              - EMAIL
              - SMS
              - TOTP
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFaAccountConfigUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTwoFaSettings'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - two-factor-auth-config-controller
      summary: Delete 2FA account config (deleteTwoFaAccountConfig)
      description: |-
        Delete 2FA config for a given 2FA provider type. 
        Returns whole account's 2FA settings object.


        Available for any authorized user. 
      operationId: deleteTwoFaAccountConfigUsingDELETE
      parameters:
        - name: providerType
          in: query
          description: providerType
          required: true
          style: form
          schema:
            type: string
            enum:
              - BACKUP_CODE
              - EMAIL
              - SMS
              - TOTP
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTwoFaSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - two-factor-auth-config-controller
      summary: Verify and save 2FA account config (verifyAndSaveTwoFaAccountConfig)
      description: |-
        Checks the verification code for submitted config, and if it is correct, saves the provided account config. 

        Returns whole account's 2FA settings object.
        Will throw an error (Bad Request) if the provider is not configured for usage. 

        Available for any authorized user. 
      operationId: verifyAndSaveTwoFaAccountConfigUsingPOST
      parameters:
        - name: verificationCode
          in: query
          description: verificationCode
          required: false
          style: form
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFaAccountConfig'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTwoFaSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/2fa/account/settings:
    get:
      tags:
        - two-factor-auth-config-controller
      summary: Get account 2FA settings (getAccountTwoFaSettings)
      description: |-
        Get user's account 2FA configuration. Configuration contains configs for different 2FA providers.

        Example:
        ```
        {
          "configs": {
            "EMAIL": {
              "providerType": "EMAIL",
              "useByDefault": true,
              "email": "tenant@thingsboard.org"
            },
            "TOTP": {
              "providerType": "TOTP",
              "useByDefault": false,
              "authUrl": "otpauth://totp/TB%202FA:tenant@thingsboard.org?issuer=TB+2FA&secret=P6Z2TLYTASOGP6LCJZAD24ETT5DACNNX"
            },
            "SMS": {
              "providerType": "SMS",
              "useByDefault": false,
              "phoneNumber": "+380501253652"
            }
          }
        }
        ```

        Available for any authorized user. 
      operationId: getAccountTwoFaSettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTwoFaSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/2fa/providers:
    get:
      tags:
        - two-factor-auth-config-controller
      summary: Get available 2FA providers (getAvailableTwoFaProviders)
      description: |-
        Get the list of provider types available for user to use (the ones configured by tenant or sysadmin).
        Example of response:
        ```
        [
          "TOTP",
          "EMAIL",
          "SMS"
        ]
        ```

        Available for any authorized user. 
      operationId: getAvailableTwoFaProvidersUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/2fa/settings:
    get:
      tags:
        - two-factor-auth-config-controller
      summary: Get platform 2FA settings (getPlatformTwoFaSettings)
      description: |-
        Get platform settings for 2FA. The settings are described for savePlatformTwoFaSettings API method. If 2FA is not configured, then an empty response will be returned.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getPlatformTwoFaSettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformTwoFaSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - two-factor-auth-config-controller
      summary: Save platform 2FA settings (savePlatformTwoFaSettings)
      description: |-
        Save 2FA settings for platform. The settings have following properties:
        - `providers` - the list of 2FA providers' configs. Users will only be allowed to use 2FA providers from this list. 

        - `minVerificationCodeSendPeriod` - minimal period in seconds to wait after verification code send request to send next request. 
        - `verificationCodeCheckRateLimit` - rate limit configuration for verification code checking.
        The format is standard: 'amountOfRequests:periodInSeconds'. The value of '1:60' would limit verification code checking requests to one per minute.
        - `maxVerificationFailuresBeforeUserLockout` - maximum number of verification failures before a user gets disabled.
        - `totalAllowedTimeForVerification` - total amount of time in seconds allotted for verification. Basically, this property sets a lifetime for pre-verification token. If not set, default value of 30 minutes is used.


        TOTP 2FA provider config has following settings:
        - `issuerName` - issuer name that will be displayed in an authenticator app near a username. Must not be blank.

        For SMS 2FA provider:
        - `smsVerificationMessageTemplate` - verification message template.  Available template variables are ${code} and ${userEmail}. It must not be blank and must contain verification code variable.
        - `verificationCodeLifetime` - verification code lifetime in seconds. Required to be positive.

        For EMAIL provider type:
        - `verificationCodeLifetime` - the same as for SMS.

        Example of the settings:
        ```
        {
          "providers": [
            {
              "providerType": "TOTP",
              "issuerName": "TB"
            },
            {
              "providerType": "EMAIL",
              "verificationCodeLifetime": 60
            },
            {
              "providerType": "SMS",
              "verificationCodeLifetime": 60,
              "smsVerificationMessageTemplate": "Here is your verification code: ${code}"
            }
          ],
          "minVerificationCodeSendPeriod": 60,
          "verificationCodeCheckRateLimit": "3:900",
          "maxVerificationFailuresBeforeUserLockout": 10,
          "totalAllowedTimeForVerification": 600
        }
        ```

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: savePlatformTwoFaSettingsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformTwoFaSettings'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformTwoFaSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/auth/2fa/providers:
    get:
      tags:
        - two-factor-auth-controller
      summary: Get available 2FA providers (getAvailableTwoFaProviders)
      description: |-
        Get the list of 2FA provider infos available for user to use. Example:
        ```
        [
          {
            "type": "EMAIL",
            "default": true,
            "contact": "ab*****ko@gmail.com"
          },
          {
            "type": "TOTP",
            "default": false,
            "contact": null
          },
          {
            "type": "SMS",
            "default": false,
            "contact": "+38********12"
          }
        ]
        ```
      operationId: getAvailableTwoFaProvidersUsingGET_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TwoFaProviderInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/auth/2fa/verification/check:
    post:
      tags:
        - two-factor-auth-controller
      summary: Check 2FA verification code (checkTwoFaVerificationCode)
      description: |-
        Checks 2FA verification code, and if it is correct the method returns a regular access and refresh token pair.

        The API method is rate limited (using rate limit config from TwoFactorAuthSettings), and also will block a user after X unsuccessful verification attempts if such behavior is configured (in TwoFactorAuthSettings).

        Will return a Bad Request error if provider is not configured for usage, and Too Many Requests error if rate limits are exceeded.
      operationId: checkTwoFaVerificationCodeUsingPOST
      parameters:
        - name: providerType
          in: query
          description: providerType
          required: true
          style: form
          schema:
            type: string
            enum:
              - BACKUP_CODE
              - EMAIL
              - SMS
              - TOTP
        - name: verificationCode
          in: query
          description: verificationCode
          required: true
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT Pair'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/auth/2fa/verification/send:
    post:
      tags:
        - two-factor-auth-controller
      summary: Request 2FA verification code (requestTwoFaVerificationCode)
      description: |-
        Request 2FA verification code.

        To make a request to this endpoint, you need an access token with the scope of PRE_VERIFICATION_TOKEN, which is issued on username/password auth if 2FA is enabled.

        The API method is rate limited (using rate limit config from TwoFactorAuthSettings). Will return a Bad Request error if provider is not configured for usage, and Too Many Requests error if rate limits are exceeded.
      operationId: requestTwoFaVerificationCodeUsingPOST
      parameters:
        - name: providerType
          in: query
          description: providerType
          required: true
          style: form
          schema:
            type: string
            enum:
              - BACKUP_CODE
              - EMAIL
              - SMS
              - TOTP
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/uiSettings/helpBaseUrl:
    get:
      tags:
        - ui-settings-controller
      summary: Get UI help base url (getHelpBaseUrl)
      description: Get UI help base url used to fetch help assets. The actual value of the base url is configurable in the system configuration file.
      operationId: getHelpBaseUrlUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/usage:
    get:
      tags:
        - usage-info-controller
      summary: getTenantUsageInfo
      operationId: getTenantUsageInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/customer/{customerId}/users:
    get:
      tags:
        - user-controller
      summary: Get Customer Users (getCustomerUsers)
      description: |-
        Returns a page of users owned by customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: getCustomerUsersUsingGET
      parameters:
        - name: customerId
          in: path
          description: A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the user email.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - email
              - firstName
              - lastName
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«User»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/tenant/{tenantId}/users:
    get:
      tags:
        - user-controller
      summary: Get Tenant Users (getTenantAdmins)
      description: |-
        Returns a page of users owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'SYS_ADMIN' authority.
      operationId: getTenantAdminsUsingGET
      parameters:
        - name: tenantId
          in: path
          description: A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the user email.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - email
              - firstName
              - lastName
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«User»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/dashboards:
    get:
      tags:
        - user-controller
      summary: Get information about last visited and starred dashboards (getLastVisitedDashboards)
      description: |-
        Fetch the list of last visited and starred dashboards. Both lists are limited to 10 items.

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getUserDashboardsInfoUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDashboardsInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/dashboards/{dashboardId}/{action}:
    get:
      tags:
        - user-controller
      summary: Report action of User over the dashboard (reportUserDashboardAction)
      description: |-
        Report action of User over the dashboard. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: reportUserDashboardActionUsingGET
      parameters:
        - name: dashboardId
          in: path
          description: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: action
          in: path
          description: 'Dashboard action, one of: "visit", "star" or "unstar".'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDashboardsInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/sendActivationMail:
    post:
      tags:
        - user-controller
      summary: Send or re-send the activation email
      description: |-
        Force send the activation email to the user. Useful to resend the email if user has accidentally deleted it. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: sendActivationEmailUsingPOST
      parameters:
        - name: email
          in: query
          description: Email of the user
          required: true
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/settings:
    get:
      tags:
        - user-controller
      summary: Get user settings (getUserSettings)
      description: 'Fetch the User settings based on authorized user. '
      operationId: getUserSettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    put:
      tags:
        - user-controller
      summary: Update user settings (saveUserSettings)
      description: 'Update user settings for authorized user. Only specified json elements will be updated.Example: you have such settings: {A:5, B:{C:10, D:20}}. Updating it with {B:{C:10, D:30}} will result in{A:5, B:{C:10, D:30}}. The same could be achieved by putting {B.D:30}'
      operationId: putUserSettingsUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - user-controller
      summary: Save user settings (saveUserSettings)
      description: 'Save user settings represented in json format for authorized user. '
      operationId: saveUserSettingsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/settings/{paths}:
    delete:
      tags:
        - user-controller
      summary: Delete user settings (deleteUserSettings)
      description: |-
        Delete user settings by specifying list of json element xpaths. 
         Example: to delete B and C element in { "A": {"B": 5}, "C": 15} send A.B,C in jsonPaths request parameter
      operationId: deleteUserSettingsUsingDELETE_1
      parameters:
        - name: paths
          in: path
          description: paths
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/settings/{type}:
    get:
      tags:
        - user-controller
      summary: Get user settings (getUserSettings)
      description: 'Fetch the User settings based on authorized user. '
      operationId: getUserSettingsUsingGET_1
      parameters:
        - name: type
          in: path
          description: 'Settings type, case insensitive, one of: "general", "quick_links", "doc_links" or "dashboards".'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    put:
      tags:
        - user-controller
      summary: Update user settings (saveUserSettings)
      description: 'Update user settings for authorized user. Only specified json elements will be updated.Example: you have such settings: {A:5, B:{C:10, D:20}}. Updating it with {B:{C:10, D:30}} will result in{A:5, B:{C:10, D:30}}. The same could be achieved by putting {B.D:30}'
      operationId: putUserSettingsUsingPUT_1
      parameters:
        - name: type
          in: path
          description: 'Settings type, case insensitive, one of: "general", "quick_links", "doc_links" or "dashboards".'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/settings/{type}/{paths}:
    delete:
      tags:
        - user-controller
      summary: Delete user settings (deleteUserSettings)
      description: |-
        Delete user settings by specifying list of json element xpaths. 
         Example: to delete B and C element in { "A": {"B": 5}, "C": 15} send A.B,C in jsonPaths request parameter
      operationId: deleteUserSettingsUsingDELETE
      parameters:
        - name: paths
          in: path
          description: paths
          required: true
          style: simple
          schema:
            type: string
        - name: type
          in: path
          description: 'Settings type, case insensitive, one of: "general", "quick_links", "doc_links" or "dashboards".'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/tokenAccessEnabled:
    get:
      tags:
        - user-controller
      summary: Check Token Access Enabled (isUserTokenAccessEnabled)
      description: 'Checks that the system is configured to allow administrators to impersonate themself as other users. If the user who performs the request has the authority of ''SYS_ADMIN'', it is possible to login as any tenant administrator. If the user who performs the request has the authority of ''TENANT_ADMIN'', it is possible to login as any customer user. '
      operationId: isUserTokenAccessEnabledUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/{userId}:
    get:
      tags:
        - user-controller
      summary: Get User (getUserById)
      description: Fetch the User object based on the provided User Id. If the user has the authority of 'SYS_ADMIN', the server does not perform additional checks. If the user has the authority of 'TENANT_ADMIN', the server checks that the requested user is owned by the same tenant. If the user has the authority of 'CUSTOMER_USER', the server checks that the requested user is owned by the same customer.
      operationId: getUserByIdUsingGET
      parameters:
        - name: userId
          in: path
          description: A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - user-controller
      summary: Delete User (deleteUser)
      description: |-
        Deletes the User, it's credentials and all the relations (from and to the User). Referencing non-existing User Id will cause an error. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: deleteUserUsingDELETE
      parameters:
        - name: userId
          in: path
          description: A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/{userId}/activationLink:
    get:
      tags:
        - user-controller
      summary: Get the activation link (getActivationLink)
      description: |-
        Get the activation link for the user. The base url for activation link is configurable in the general settings of system administrator. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getActivationLinkUsingGET
      parameters:
        - name: userId
          in: path
          description: A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/{userId}/token:
    get:
      tags:
        - user-controller
      summary: Get User Token (getUserToken)
      description: 'Returns the token of the User based on the provided User Id. If the user who performs the request has the authority of ''SYS_ADMIN'', it is possible to get the token of any tenant administrator. If the user who performs the request has the authority of ''TENANT_ADMIN'', it is possible to get the token of any customer user that belongs to the same tenant. '
      operationId: getUserTokenUsingGET
      parameters:
        - name: userId
          in: path
          description: A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT Pair'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user/{userId}/userCredentialsEnabled:
    post:
      tags:
        - user-controller
      summary: Enable/Disable User credentials (setUserCredentialsEnabled)
      description: |-
        Enables or Disables user credentials. Useful when you would like to block user account without deleting it. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' authority.
      operationId: setUserCredentialsEnabledUsingPOST
      parameters:
        - name: userId
          in: path
          description: A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: userCredentialsEnabled
          in: query
          description: Enable ("true") or disable ("false") the credentials.
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/users/assign/{alarmId}:
    get:
      tags:
        - user-controller
      summary: Get usersForAssign (getUsersForAssign)
      description: |-
        Returns page of user data objects that can be assigned to provided alarmId. Search is been executed by email, firstName and lastName fields. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getUsersForAssignUsingGET
      parameters:
        - name: alarmId
          in: path
          description: A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the user email.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - email
              - firstName
              - lastName
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«UserEmailInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/users/info:
    get:
      tags:
        - user-controller
      summary: Find users by query (findUsersByQuery)
      description: |-
        Returns page of user data objects. Search is been executed by email, firstName and lastName fields. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: findUsersByQueryUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the user email.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - email
              - firstName
              - lastName
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«UserEmailInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/users:
    get:
      tags:
        - user-controller
      summary: Get Users (getUsers)
      description: |-
        Returns a page of users owned by tenant or customer. The scope depends on authority of the user that performs the request.You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: getUsersUsingGET
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the user email.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - email
              - firstName
              - lastName
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«User»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/user:
    post:
      tags:
        - user-controller
      summary: Save Or update User (saveUser)
      description: |-
        Create or update the User. When creating user, platform generates User Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created User Id will be present in the response. Specify existing User Id to update the device. Referencing non-existing User Id will cause 'Not Found' error.

        Device email is unique for entire platform setup.Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new User entity.

        Available for users with 'SYS_ADMIN', 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.
      operationId: saveUserUsingPOST
      parameters:
        - name: sendActivationMail
          in: query
          description: Send activation email (or use activation link)
          required: false
          style: form
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetType/{widgetTypeId}:
    delete:
      tags:
        - widget-type-controller
      summary: Delete widget type (deleteWidgetType)
      description: |-
        Deletes the  Widget Type. Referencing non-existing Widget Type Id will cause an error.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: deleteWidgetTypeUsingDELETE
      parameters:
        - name: widgetTypeId
          in: path
          description: A string value representing the widget type id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    get:
      tags:
        - widget-type-controller
      summary: Get Widget Type Details (getWidgetTypeById)
      description: |-
        Get the Widget Type Details based on the provided Widget Type Id. Widget Type Details extend Widget Type and add image and description properties. Those properties are useful to edit the Widget Type but they are not required for Dashboard rendering. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getWidgetTypeByIdUsingGET
      parameters:
        - name: widgetTypeId
          in: path
          description: A string value representing the widget type id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: inlineImages
          in: query
          description: Inline images as a data URL (Base64)
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetTypeDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetTypeFqns:
    get:
      tags:
        - widget-type-controller
      summary: Get all Widget type fqns for specified Bundle (getBundleWidgetTypeFqns)
      description: |-
        Returns an array of Widget Type fqns that belong to specified Widget Bundle.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getBundleWidgetTypeFqnsUsingGET
      parameters:
        - name: widgetsBundleId
          in: query
          description: Widget Bundle Id
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetTypeInfo/{widgetTypeId}:
    get:
      tags:
        - widget-type-controller
      summary: Get Widget Type Info (getWidgetTypeInfoById)
      description: |-
        Get the Widget Type Info based on the provided Widget Type Id. Widget Type Details extend Widget Type and add image and description properties. Those properties are useful to edit the Widget Type but they are not required for Dashboard rendering. 

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getWidgetTypeInfoByIdUsingGET
      parameters:
        - name: widgetTypeId
          in: path
          description: A string value representing the widget type id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetTypeInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetTypesDetails:
    get:
      tags:
        - widget-type-controller
      summary: Get all Widget types details for specified Bundle (getBundleWidgetTypes)
      description: |-
        Returns an array of Widget Type Details objects that belong to specified Widget Bundle.Widget Type Details extend Widget Type and add image and description properties. Those properties are useful to edit the Widget Type but they are not required for Dashboard rendering.  

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: getBundleWidgetTypesDetailsUsingGET
      parameters:
        - name: isSystem
          in: query
          description: System or Tenant
          required: true
          style: form
          allowReserved: true
          schema:
            type: boolean
        - name: bundleAlias
          in: query
          description: Widget Bundle alias
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: widgetsBundleId
          in: query
          description: Widget Bundle Id
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: inlineImages
          in: query
          description: Inline images as a data URL (Base64)
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WidgetTypeDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetTypesInfos:
    get:
      tags:
        - widget-type-controller
      summary: Get Widget Type Info objects (getBundleWidgetTypesInfos)
      description: |-
        Get the Widget Type Info objects based on the provided parameters. Widget Type Info is a lightweight object that represents Widget Type but does not contain the heavyweight widget descriptor JSON

        Available for any authorized user. 
      operationId: getBundleWidgetTypesInfosUsingGET
      parameters:
        - name: isSystem
          in: query
          description: System or Tenant
          required: true
          style: form
          allowReserved: true
          schema:
            type: boolean
        - name: bundleAlias
          in: query
          description: Widget Bundle alias
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: widgetsBundleId
          in: query
          description: Widget Bundle Id
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the widget type name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - deprecated
              - name
              - tenantId
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: fullSearch
          in: query
          description: Optional boolean parameter indicating whether search widgets by description not only by name
          required: false
          style: form
          schema:
            type: boolean
        - name: deprecatedFilter
          in: query
          description: Optional string parameter indicating whether to include deprecated widgets
          required: false
          style: form
          schema:
            type: string
            enum:
              - ACTUAL
              - ALL
              - DEPRECATED
        - name: widgetTypeList
          in: query
          description: A list of string values separated by comma ',' representing one of the widget type value
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - alarm
              - control
              - latest
              - static
              - timeseries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«WidgetTypeInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetTypes:
    get:
      tags:
        - widget-type-controller
      summary: Get Widget Types (getWidgetTypes)
      description: |-
        Returns a page of Widget Type objects available for current user. Widget Type represents the template for widget creation. Widget Type and Widget are similar to class and object in OOP theory. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for any authorized user. 
      operationId: getWidgetTypesUsingGET
      parameters:
        - name: widgetsBundleId
          in: query
          description: Widget Bundle Id
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: isSystem
          in: query
          description: System or Tenant
          required: true
          style: form
          allowReserved: true
          schema:
            type: boolean
        - name: bundleAlias
          in: query
          description: Widget Bundle alias
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the widget type name.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - deprecated
              - name
              - tenantId
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: tenantOnly
          in: query
          description: Optional boolean parameter indicating whether only tenant widget types should be returned
          required: false
          style: form
          schema:
            type: boolean
        - name: fullSearch
          in: query
          description: Optional boolean parameter indicating whether search widgets by description not only by name
          required: false
          style: form
          schema:
            type: boolean
        - name: deprecatedFilter
          in: query
          description: Optional string parameter indicating whether to include deprecated widgets
          required: false
          style: form
          schema:
            type: string
            enum:
              - ACTUAL
              - ALL
              - DEPRECATED
        - name: widgetTypeList
          in: query
          description: A list of string values separated by comma ',' representing one of the widget type value
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - alarm
              - control
              - latest
              - static
              - timeseries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«WidgetTypeInfo»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetType:
    get:
      tags:
        - widget-type-controller
      summary: Get Widget Type (getWidgetTypeByBundleAliasAndTypeAlias) (Deprecated)
      description: |-
        Get the Widget Type based on the provided parameters. Widget Type represents the template for widget creation. Widget Type and Widget are similar to class and object in OOP theory.

        Available for any authorized user. 
      operationId: getWidgetTypeByBundleAliasAndTypeAliasUsingGET
      parameters:
        - name: fqn
          in: query
          description: Widget Type fqn
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: isSystem
          in: query
          description: System or Tenant
          required: true
          style: form
          allowReserved: true
          schema:
            type: boolean
        - name: bundleAlias
          in: query
          description: Widget Bundle alias
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
        - name: alias
          in: query
          description: Widget Type alias
          required: true
          style: form
          allowReserved: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetType'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    post:
      tags:
        - widget-type-controller
      summary: Create Or Update Widget Type (saveWidgetType)
      description: |-
        Create or update the Widget Type. Widget Type represents the template for widget creation. Widget Type and Widget are similar to class and object in OOP theory. When creating the Widget Type, platform generates Widget Type Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Widget Type Id will be present in the response. Specify existing Widget Type id to update the Widget Type. Referencing non-existing Widget Type Id will cause 'Not Found' error.

        Widget Type fqn is unique in the scope of System or Tenant. Special Tenant Id '13814000-1dd2-11b2-8080-808080808080' is automatically used if the create request is sent by user with 'SYS_ADMIN' authority.Remove 'id', 'tenantId' rom the request body example (below) to create new Widget Type entity.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: saveWidgetTypeUsingPOST
      parameters:
        - name: updateExistingByFqn
          in: query
          description: Optional boolean parameter indicating whether to update existing widget type by FQN if present instead of creating new one
          required: false
          style: form
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetTypeDetails'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetTypeDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetsBundle:
    post:
      tags:
        - widgets-bundle-controller
      summary: Create Or Update Widget Bundle (saveWidgetsBundle)
      description: |-
        Create or update the Widget Bundle. Widget Bundle represents a group(bundle) of widgets. Widgets are grouped into bundle by type or use case.  When creating the bundle, platform generates Widget Bundle Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Widget Bundle Id will be present in the response. Specify existing Widget Bundle id to update the Widget Bundle. Referencing non-existing Widget Bundle Id will cause 'Not Found' error.

        Widget Bundle alias is unique in the scope of tenant. Special Tenant Id '13814000-1dd2-11b2-8080-808080808080' is automatically used if the create bundle request is sent by user with 'SYS_ADMIN' authority.Remove 'id', 'tenantId' from the request body example (below) to create new Widgets Bundle entity.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: saveWidgetsBundleUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetsBundle'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetsBundle'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetsBundle/{widgetsBundleId}:
    get:
      tags:
        - widgets-bundle-controller
      summary: Get Widget Bundle (getWidgetsBundleById)
      description: |-
        Get the Widget Bundle based on the provided Widget Bundle Id. Widget Bundle represents a group(bundle) of widgets. Widgets are grouped into bundle by type or use case. 

        Available for any authorized user. 
      operationId: getWidgetsBundleByIdUsingGET
      parameters:
        - name: widgetsBundleId
          in: path
          description: A string value representing the widget bundle id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
        - name: inlineImages
          in: query
          description: Inline images as a data URL (Base64)
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetsBundle'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
    delete:
      tags:
        - widgets-bundle-controller
      summary: Delete widgets bundle (deleteWidgetsBundle)
      description: |-
        Deletes the widget bundle. Referencing non-existing Widget Bundle Id will cause an error.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: deleteWidgetsBundleUsingDELETE
      parameters:
        - name: widgetsBundleId
          in: path
          description: A string value representing the widget bundle id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.736+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetsBundle/{widgetsBundleId}/widgetTypeFqns:
    post:
      tags:
        - widgets-bundle-controller
      summary: Update widgets bundle widgets list from widget type FQNs list (updateWidgetsBundleWidgetFqns)
      description: |-
        Updates widgets bundle widgets list from widget type FQNs list.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: updateWidgetsBundleWidgetFqnsUsingPOST
      parameters:
        - name: widgetsBundleId
          in: path
          description: A string value representing the widget bundle id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetsBundle/{widgetsBundleId}/widgetTypes:
    post:
      tags:
        - widgets-bundle-controller
      summary: Update widgets bundle widgets types list (updateWidgetsBundleWidgetTypes)
      description: |-
        Updates widgets bundle widgets list.

        Available for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.
      operationId: updateWidgetsBundleWidgetTypesUsingPOST
      parameters:
        - name: widgetsBundleId
          in: path
          description: A string value representing the widget bundle id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: Invalid request body
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.735+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.736+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
  /api/widgetsBundles:
    get:
      tags:
        - widgets-bundle-controller
      summary: Get Widget Bundles (getWidgetsBundles)
      description: |-
        Returns a page of Widget Bundle objects available for current user. Widget Bundle represents a group(bundle) of widgets. Widgets are grouped into bundle by type or use case.  You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. 

        Available for any authorized user. 
      operationId: getWidgetsBundlesUsingGET_1
      parameters:
        - name: pageSize
          in: query
          description: Maximum amount of entities in a one page
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Sequence number of page starting from 0
          required: true
          style: form
          allowReserved: true
          schema:
            type: integer
            format: int32
        - name: textSearch
          in: query
          description: The case insensitive 'substring' filter based on the widget bundle title.
          required: false
          style: form
          schema:
            type: string
        - name: sortProperty
          in: query
          description: Property of entity to sort by
          required: false
          style: form
          schema:
            type: string
            enum:
              - createdTime
              - tenantId
              - title
        - name: sortOrder
          in: query
          description: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
          required: false
          style: form
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: tenantOnly
          in: query
          description: Optional boolean parameter to include only tenant-level bundles without system
          required: false
          style: form
          schema:
            type: boolean
        - name: fullSearch
          in: query
          description: Optional boolean parameter indicating extended search of widget bundles by description and by name / description of related widget types
          required: false
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageData«WidgetsBundle»'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-400:
                  summary: Bad Request
                  value:
                    status: 400
                    message: 'Invalid UUID string: 123'
                    errorCode: 31
                    timestamp: '2023-12-28T09:16:56.709+00:00'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-401:
                  summary: Unauthorized
                  value:
                    status: 401
                    message: Authentication failed
                    errorCode: 10
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-403:
                  summary: Forbidden
                  value:
                    status: 403
                    message: You don't have permission to perform this operation!
                    errorCode: 20
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-404:
                  summary: Not Found
                  value:
                    status: 404
                    message: Requested item wasn't found!
                    errorCode: 32
                    timestamp: '2023-12-28T09:16:56.734+00:00'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsboardErrorResponse'
              examples:
                error-code-429:
                  summary: Too Many Requests
                  value:
                    status: 429
                    message: Too many requests for current tenant!
                    errorCode: 33
                    timestamp: '2023-12-28T09:16:56.734+00:00'
      security:
        - HTTP login form:
            - SYS_ADMIN
            - TENANT_ADMIN
            - CUSTOMER_USER
components:
  schemas:
    AccountTwoFaSettings:
      title: AccountTwoFaSettings
      type: object
      properties:
        configs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TwoFaAccountConfig'
    ActivateUserRequest:
      title: ActivateUserRequest
      type: object
      properties:
        activateToken:
          type: string
          description: The activate token to verify
          example: AAB254FF67D..
        password:
          type: string
          description: The new password to set
          example: secret
    AdminSettings:
      title: AdminSettings
      type: object
      properties:
        id:
          description: The Id of the Administration Settings, auto-generated, UUID
          $ref: '#/components/schemas/AdminSettingsId'
        createdTime:
          type: integer
          description: Timestamp of the settings creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        key:
          type: string
          description: The Administration Settings key, (e.g. 'general' or 'mail')
          example: mail
        jsonValue:
          description: JSON representation of the Administration Settings value
          $ref: '#/components/schemas/JsonNode'
    AdminSettingsId:
      title: AdminSettingsId
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: string
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
    AffectedTenantAdministratorsFilter:
      title: AffectedTenantAdministratorsFilter
      type: object
    AffectedUserFilter:
      title: AffectedUserFilter
      type: object
    Alarm:
      title: Alarm
      required:
        - acknowledged
        - cleared
        - name
        - originator
        - severity
        - status
        - type
      type: object
      properties:
        id:
          description: JSON object with the alarm Id. Specify this field to update the alarm. Referencing non-existing alarm Id will cause error. Omit this field to create new alarm.
          $ref: '#/components/schemas/AlarmId'
        createdTime:
          type: integer
          description: Timestamp of the alarm creation, in milliseconds
          format: int64
          readOnly: true
          example: 1634058704567
        tenantId:
          description: JSON object with Tenant Id
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        name:
          type: string
          description: representing type of the Alarm
          example: High Temperature Alarm
        type:
          type: string
          description: representing type of the Alarm
          example: High Temperature Alarm
        originator:
          description: JSON object with alarm originator id
          $ref: '#/components/schemas/EntityId'
        severity:
          type: string
          description: Alarm severity
          example: CRITICAL
          enum:
            - CRITICAL
            - INDETERMINATE
            - MAJOR
            - MINOR
            - WARNING
        acknowledged:
          type: boolean
          description: Acknowledged
          example: true
        cleared:
          type: boolean
          description: Cleared
          example: false
        assigneeId:
          description: Alarm assignee user id
          $ref: '#/components/schemas/UserId'
        startTs:
          type: integer
          description: Timestamp of the alarm start time, in milliseconds
          format: int64
          example: 1634058704565
        endTs:
          type: integer
          description: Timestamp of the alarm end time(last time update), in milliseconds
          format: int64
          example: 1634111163522
        ackTs:
          type: integer
          description: Timestamp of the alarm acknowledgement, in milliseconds
          format: int64
          example: 1634115221948
        clearTs:
          type: integer
          description: Timestamp of the alarm clearing, in milliseconds
          format: int64
          example: 1634114528465
        assignTs:
          type: integer
          description: Timestamp of the alarm assignment, in milliseconds
          format: int64
          example: 1634115928465
        details:
          description: JSON object with alarm details
          $ref: '#/components/schemas/JsonNode'
        propagate:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to parent entities of alarm originator
          example: true
        propagateToOwner:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to the owner (tenant or customer) of alarm originator
          example: true
        propagateToTenant:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to the tenant entity
          example: true
        propagateRelationTypes:
          type: array
          description: JSON array of relation types that should be used for propagation. By default, 'propagateRelationTypes' array is empty which means that the alarm will be propagated based on any relation type to parent entities. This parameter should be used only in case when 'propagate' parameter is set to true, otherwise, 'propagateRelationTypes' array will be ignored.
          items:
            type: string
        status:
          type: string
          description: status of the Alarm
          readOnly: true
          example: ACTIVE_UNACK
          enum:
            - ACTIVE_ACK
            - ACTIVE_UNACK
            - CLEARED_ACK
            - CLEARED_UNACK
    AlarmAssignee:
      title: AlarmAssignee
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        id:
          $ref: '#/components/schemas/UserId'
        lastName:
          type: string
    AlarmAssignmentNotificationRuleTriggerConfig:
      title: AlarmAssignmentNotificationRuleTriggerConfig
      properties:
        alarmSeverities:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - CRITICAL
              - INDETERMINATE
              - MAJOR
              - MINOR
              - WARNING
        alarmStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
        alarmTypes:
          uniqueItems: true
          type: array
          items:
            type: string
        notifyOn:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ASSIGNED
              - UNASSIGNED
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
      allOf:
        - $ref: '#/components/schemas/NotificationRuleTriggerConfig'
        - title: AlarmAssignmentNotificationRuleTriggerConfig
          type: object
          properties:
            alarmSeverities:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - CRITICAL
                  - INDETERMINATE
                  - MAJOR
                  - MINOR
                  - WARNING
            alarmStatuses:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - ACK
                  - ACTIVE
                  - ANY
                  - CLEARED
                  - UNACK
            alarmTypes:
              uniqueItems: true
              type: array
              items:
                type: string
            notifyOn:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - ASSIGNED
                  - UNASSIGNED
            triggerType:
              type: string
              enum:
                - ALARM
                - ALARM_ASSIGNMENT
                - ALARM_COMMENT
                - API_USAGE_LIMIT
                - DEVICE_ACTIVITY
                - ENTITIES_LIMIT
                - ENTITY_ACTION
                - NEW_PLATFORM_VERSION
                - RATE_LIMITS
                - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    AlarmComment:
      title: AlarmComment
      required:
        - name
      type: object
      properties:
        id:
          description: JSON object with the alarm comment Id. Specify this field to update the alarm comment. Referencing non-existing alarm Id will cause error. Omit this field to create new alarm.
          $ref: '#/components/schemas/AlarmCommentId'
        createdTime:
          type: integer
          description: Timestamp of the alarm comment creation, in milliseconds
          format: int64
          readOnly: true
          example: 1634058704567
        alarmId:
          description: JSON object with Alarm id.
          $ref: '#/components/schemas/EntityId'
          readOnly: true
        userId:
          description: JSON object with User id.
          $ref: '#/components/schemas/UserId'
          readOnly: true
        name:
          type: string
          description: representing comment text
          example: Please take a look
        type:
          type: string
          description: Defines origination of comment. System type means comment was created by TB. OTHER type means comment was created by user.
          readOnly: true
          example: SYSTEM/OTHER
          enum:
            - OTHER
            - SYSTEM
        comment:
          description: JSON object with text of comment.
          $ref: '#/components/schemas/JsonNode'
    AlarmCommentId:
      title: AlarmCommentId
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: string
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
    AlarmCommentInfo:
      title: AlarmCommentInfo
      required:
        - name
      type: object
      properties:
        id:
          description: JSON object with the alarm comment Id. Specify this field to update the alarm comment. Referencing non-existing alarm Id will cause error. Omit this field to create new alarm.
          $ref: '#/components/schemas/AlarmCommentId'
        createdTime:
          type: integer
          description: Timestamp of the alarm comment creation, in milliseconds
          format: int64
          readOnly: true
          example: 1634058704567
        alarmId:
          description: JSON object with Alarm id.
          $ref: '#/components/schemas/EntityId'
          readOnly: true
        userId:
          description: JSON object with User id.
          $ref: '#/components/schemas/UserId'
          readOnly: true
        name:
          type: string
          description: representing comment text
          example: Please take a look
        type:
          type: string
          description: Defines origination of comment. System type means comment was created by TB. OTHER type means comment was created by user.
          readOnly: true
          example: SYSTEM/OTHER
          enum:
            - OTHER
            - SYSTEM
        comment:
          description: JSON object with text of comment.
          $ref: '#/components/schemas/JsonNode'
        email:
          type: string
          description: User email address
          example: johnBrown@gmail.com
        firstName:
          type: string
          description: User first name
          example: John
        lastName:
          type: string
          description: User last name
          example: Brown
    AlarmCommentNotificationRuleTriggerConfig:
      title: AlarmCommentNotificationRuleTriggerConfig
      type: object
      properties:
        alarmSeverities:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - CRITICAL
              - INDETERMINATE
              - MAJOR
              - MINOR
              - WARNING
        alarmStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
        alarmTypes:
          uniqueItems: true
          type: array
          items:
            type: string
        notifyOnCommentUpdate:
          type: boolean
        onlyUserComments:
          type: boolean
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    AlarmCondition:
      title: AlarmCondition
      type: object
      properties:
        condition:
          type: array
          description: JSON array of alarm condition filters
          items:
            $ref: '#/components/schemas/AlarmConditionFilter'
        spec:
          description: JSON object representing alarm condition type
          $ref: '#/components/schemas/AlarmConditionSpec'
    AlarmConditionFilter:
      title: AlarmConditionFilter
      type: object
      properties:
        key:
          description: JSON object for specifying alarm condition by specific key
          $ref: '#/components/schemas/AlarmConditionFilterKey'
        valueType:
          type: string
          description: String representation of the type of the value
          example: NUMERIC
          enum:
            - BOOLEAN
            - DATE_TIME
            - NUMERIC
            - STRING
        value:
          type: object
          description: Value used in Constant comparison. For other types, such as TIME_SERIES or ATTRIBUTE, the predicate condition is used
        predicate:
          description: JSON object representing filter condition
          $ref: '#/components/schemas/KeyFilterPredicate'
    AlarmConditionFilterKey:
      title: AlarmConditionFilterKey
      type: object
      properties:
        type:
          type: string
          description: The key type
          example: TIME_SERIES
          enum:
            - ATTRIBUTE
            - CONSTANT
            - ENTITY_FIELD
            - TIME_SERIES
        key:
          type: string
          description: String value representing the key
          example: temp
    AlarmConditionSpec:
      title: AlarmConditionSpec
      type: object
    AlarmCountQuery:
      title: AlarmCountQuery
      type: object
      properties:
        assigneeId:
          $ref: '#/components/schemas/UserId'
        endTs:
          type: integer
          format: int64
        entityFilter:
          $ref: '#/components/schemas/EntityFilter'
        keyFilters:
          type: array
          items:
            $ref: '#/components/schemas/KeyFilter'
        searchPropagatedAlarms:
          type: boolean
        severityList:
          type: array
          items:
            type: string
            enum:
              - CRITICAL
              - INDETERMINATE
              - MAJOR
              - MINOR
              - WARNING
        startTs:
          type: integer
          format: int64
        statusList:
          type: array
          items:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
        timeWindow:
          type: integer
          format: int64
        typeList:
          type: array
          items:
            type: string
    AlarmData:
      title: AlarmData
      required:
        - acknowledged
        - cleared
        - name
        - originator
        - severity
        - status
        - type
      type: object
      properties:
        entityId:
          $ref: '#/components/schemas/EntityId'
        latest:
          type: object
          additionalProperties:
            type: object
        id:
          description: JSON object with the alarm Id. Specify this field to update the alarm. Referencing non-existing alarm Id will cause error. Omit this field to create new alarm.
          $ref: '#/components/schemas/AlarmId'
        createdTime:
          type: integer
          description: Timestamp of the alarm creation, in milliseconds
          format: int64
          readOnly: true
          example: 1634058704567
        tenantId:
          description: JSON object with Tenant Id
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        name:
          type: string
          description: representing type of the Alarm
          example: High Temperature Alarm
        type:
          type: string
          description: representing type of the Alarm
          example: High Temperature Alarm
        originator:
          description: JSON object with alarm originator id
          $ref: '#/components/schemas/EntityId'
        severity:
          type: string
          description: Alarm severity
          example: CRITICAL
          enum:
            - CRITICAL
            - INDETERMINATE
            - MAJOR
            - MINOR
            - WARNING
        acknowledged:
          type: boolean
          description: Acknowledged
          example: true
        cleared:
          type: boolean
          description: Cleared
          example: false
        assigneeId:
          description: Alarm assignee user id
          $ref: '#/components/schemas/UserId'
        startTs:
          type: integer
          description: Timestamp of the alarm start time, in milliseconds
          format: int64
          example: 1634058704565
        endTs:
          type: integer
          description: Timestamp of the alarm end time(last time update), in milliseconds
          format: int64
          example: 1634111163522
        ackTs:
          type: integer
          description: Timestamp of the alarm acknowledgement, in milliseconds
          format: int64
          example: 1634115221948
        clearTs:
          type: integer
          description: Timestamp of the alarm clearing, in milliseconds
          format: int64
          example: 1634114528465
        assignTs:
          type: integer
          description: Timestamp of the alarm assignment, in milliseconds
          format: int64
          example: 1634115928465
        details:
          description: JSON object with alarm details
          $ref: '#/components/schemas/JsonNode'
        propagate:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to parent entities of alarm originator
          example: true
        originatorName:
          type: string
          description: Alarm originator name
          example: Thermostat
        propagateToOwner:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to the owner (tenant or customer) of alarm originator
          example: true
        originatorLabel:
          type: string
          description: Alarm originator label
          example: Thermostat label
        propagateToTenant:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to the tenant entity
          example: true
        assignee:
          description: Alarm assignee
          $ref: '#/components/schemas/AlarmAssignee'
        propagateRelationTypes:
          type: array
          description: JSON array of relation types that should be used for propagation. By default, 'propagateRelationTypes' array is empty which means that the alarm will be propagated based on any relation type to parent entities. This parameter should be used only in case when 'propagate' parameter is set to true, otherwise, 'propagateRelationTypes' array will be ignored.
          items:
            type: string
        status:
          type: string
          description: status of the Alarm
          readOnly: true
          example: ACTIVE_UNACK
          enum:
            - ACTIVE_ACK
            - ACTIVE_UNACK
            - CLEARED_ACK
            - CLEARED_UNACK
    AlarmDataPageLink:
      title: AlarmDataPageLink
      type: object
      properties:
        assigneeId:
          $ref: '#/components/schemas/UserId'
        dynamic:
          type: boolean
        endTs:
          type: integer
          format: int64
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        searchPropagatedAlarms:
          type: boolean
        severityList:
          type: array
          items:
            type: string
            enum:
              - CRITICAL
              - INDETERMINATE
              - MAJOR
              - MINOR
              - WARNING
        sortOrder:
          $ref: '#/components/schemas/EntityDataSortOrder'
        startTs:
          type: integer
          format: int64
        statusList:
          type: array
          items:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
        textSearch:
          type: string
        timeWindow:
          type: integer
          format: int64
        typeList:
          type: array
          items:
            type: string
    AlarmDataQuery:
      title: AlarmDataQuery
      type: object
      properties:
        alarmFields:
          type: array
          items:
            $ref: '#/components/schemas/EntityKey'
        entityFields:
          type: array
          items:
            $ref: '#/components/schemas/EntityKey'
        entityFilter:
          $ref: '#/components/schemas/EntityFilter'
        keyFilters:
          type: array
          items:
            $ref: '#/components/schemas/KeyFilter'
        latestValues:
          type: array
          items:
            $ref: '#/components/schemas/EntityKey'
        pageLink:
          $ref: '#/components/schemas/AlarmDataPageLink'
    AlarmId:
      title: AlarmId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: ALARM
          enum:
            - ALARM
    AlarmInfo:
      title: AlarmInfo
      required:
        - acknowledged
        - cleared
        - name
        - originator
        - severity
        - status
        - type
      type: object
      properties:
        id:
          description: JSON object with the alarm Id. Specify this field to update the alarm. Referencing non-existing alarm Id will cause error. Omit this field to create new alarm.
          $ref: '#/components/schemas/AlarmId'
        createdTime:
          type: integer
          description: Timestamp of the alarm creation, in milliseconds
          format: int64
          readOnly: true
          example: 1634058704567
        tenantId:
          description: JSON object with Tenant Id
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        name:
          type: string
          description: representing type of the Alarm
          example: High Temperature Alarm
        type:
          type: string
          description: representing type of the Alarm
          example: High Temperature Alarm
        originator:
          description: JSON object with alarm originator id
          $ref: '#/components/schemas/EntityId'
        severity:
          type: string
          description: Alarm severity
          example: CRITICAL
          enum:
            - CRITICAL
            - INDETERMINATE
            - MAJOR
            - MINOR
            - WARNING
        acknowledged:
          type: boolean
          description: Acknowledged
          example: true
        cleared:
          type: boolean
          description: Cleared
          example: false
        assigneeId:
          description: Alarm assignee user id
          $ref: '#/components/schemas/UserId'
        startTs:
          type: integer
          description: Timestamp of the alarm start time, in milliseconds
          format: int64
          example: 1634058704565
        endTs:
          type: integer
          description: Timestamp of the alarm end time(last time update), in milliseconds
          format: int64
          example: 1634111163522
        ackTs:
          type: integer
          description: Timestamp of the alarm acknowledgement, in milliseconds
          format: int64
          example: 1634115221948
        clearTs:
          type: integer
          description: Timestamp of the alarm clearing, in milliseconds
          format: int64
          example: 1634114528465
        assignTs:
          type: integer
          description: Timestamp of the alarm assignment, in milliseconds
          format: int64
          example: 1634115928465
        details:
          description: JSON object with alarm details
          $ref: '#/components/schemas/JsonNode'
        propagate:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to parent entities of alarm originator
          example: true
        originatorName:
          type: string
          description: Alarm originator name
          example: Thermostat
        propagateToOwner:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to the owner (tenant or customer) of alarm originator
          example: true
        originatorLabel:
          type: string
          description: Alarm originator label
          example: Thermostat label
        propagateToTenant:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to the tenant entity
          example: true
        assignee:
          description: Alarm assignee
          $ref: '#/components/schemas/AlarmAssignee'
        propagateRelationTypes:
          type: array
          description: JSON array of relation types that should be used for propagation. By default, 'propagateRelationTypes' array is empty which means that the alarm will be propagated based on any relation type to parent entities. This parameter should be used only in case when 'propagate' parameter is set to true, otherwise, 'propagateRelationTypes' array will be ignored.
          items:
            type: string
        status:
          type: string
          description: status of the Alarm
          readOnly: true
          example: ACTIVE_UNACK
          enum:
            - ACTIVE_ACK
            - ACTIVE_UNACK
            - CLEARED_ACK
            - CLEARED_UNACK
    AlarmNotificationRuleTriggerConfig:
      title: AlarmNotificationRuleTriggerConfig
      properties:
        alarmSeverities:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - CRITICAL
              - INDETERMINATE
              - MAJOR
              - MINOR
              - WARNING
        alarmTypes:
          uniqueItems: true
          type: array
          items:
            type: string
        clearRule:
          $ref: '#/components/schemas/ClearRule'
        notifyOn:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ACKNOWLEDGED
              - CLEARED
              - CREATED
              - SEVERITY_CHANGED
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
      allOf:
        - $ref: '#/components/schemas/NotificationRuleTriggerConfig'
        - title: AlarmNotificationRuleTriggerConfig
          type: object
          properties:
            alarmSeverities:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - CRITICAL
                  - INDETERMINATE
                  - MAJOR
                  - MINOR
                  - WARNING
            alarmTypes:
              uniqueItems: true
              type: array
              items:
                type: string
            clearRule:
              $ref: '#/components/schemas/ClearRule'
            notifyOn:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - ACKNOWLEDGED
                  - CLEARED
                  - CREATED
                  - SEVERITY_CHANGED
            triggerType:
              type: string
              enum:
                - ALARM
                - ALARM_ASSIGNMENT
                - ALARM_COMMENT
                - API_USAGE_LIMIT
                - DEVICE_ACTIVITY
                - ENTITIES_LIMIT
                - ENTITY_ACTION
                - NEW_PLATFORM_VERSION
                - RATE_LIMITS
                - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    AlarmRule:
      title: AlarmRule
      type: object
      properties:
        condition:
          description: JSON object representing the alarm rule condition
          $ref: '#/components/schemas/AlarmCondition'
        schedule:
          description: JSON object representing time interval during which the rule is active
          $ref: '#/components/schemas/AlarmSchedule'
        alarmDetails:
          type: string
          description: String value representing the additional details for an alarm rule
        dashboardId:
          description: JSON object with the dashboard Id representing the reference to alarm details dashboard used by mobile application
          $ref: '#/components/schemas/DashboardId'
    AlarmSchedule:
      title: AlarmSchedule
      type: object
      properties:
        dynamicValue:
          $ref: '#/components/schemas/DynamicValue«string»'
        type:
          type: string
          enum:
            - ANY_TIME
            - CUSTOM
            - SPECIFIC_TIME
    AllUsersFilter:
      title: AllUsersFilter
      type: object
    AllowCreateNewDevicesDeviceProfileProvisionConfiguration:
      title: AllowCreateNewDevicesDeviceProfileProvisionConfiguration
      type: object
      properties:
        provisionDeviceSecret:
          type: string
    AnyTimeSchedule:
      title: AnyTimeSchedule
      type: object
      properties:
        dynamicValue:
          $ref: '#/components/schemas/DynamicValue«string»'
        type:
          type: string
          enum:
            - ANY_TIME
            - CUSTOM
            - SPECIFIC_TIME
    ApiUsageLimitNotificationRuleTriggerConfig:
      title: ApiUsageLimitNotificationRuleTriggerConfig
      properties:
        apiFeatures:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ALARM
              - DB
              - EMAIL
              - JS
              - RE
              - SMS
              - TBEL
              - TRANSPORT
        notifyOn:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - DISABLED
              - ENABLED
              - WARNING
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
      allOf:
        - $ref: '#/components/schemas/NotificationRuleTriggerConfig'
        - title: ApiUsageLimitNotificationRuleTriggerConfig
          type: object
          properties:
            apiFeatures:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - ALARM
                  - DB
                  - EMAIL
                  - JS
                  - RE
                  - SMS
                  - TBEL
                  - TRANSPORT
            notifyOn:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - DISABLED
                  - ENABLED
                  - WARNING
            triggerType:
              type: string
              enum:
                - ALARM
                - ALARM_ASSIGNMENT
                - ALARM_COMMENT
                - API_USAGE_LIMIT
                - DEVICE_ACTIVITY
                - ENTITIES_LIMIT
                - ENTITY_ACTION
                - NEW_PLATFORM_VERSION
                - RATE_LIMITS
                - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    ApiUsageStateFilter:
      title: ApiUsageStateFilter
      properties:
        customerId:
          $ref: '#/components/schemas/CustomerId'
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: ApiUsageStateFilter
          type: object
          properties:
            customerId:
              $ref: '#/components/schemas/CustomerId'
    Asset:
      title: Asset
      required:
        - name
      type: object
      properties:
        id:
          description: JSON object with the asset Id. Specify this field to update the asset. Referencing non-existing asset Id will cause error. Omit this field to create new asset.
          $ref: '#/components/schemas/AssetId'
        createdTime:
          type: integer
          description: Timestamp of the asset creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id. Use 'assignAssetToCustomer' to change the Customer Id.
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        name:
          type: string
          description: Unique Asset Name in scope of Tenant
          example: Empire State Building
        type:
          type: string
          description: Asset type
          example: Building
        label:
          type: string
          description: Label that may be used in widgets
          example: NY Building
        assetProfileId:
          description: JSON object with Asset Profile Id.
          $ref: '#/components/schemas/AssetProfileId'
        additionalInfo:
          description: Additional parameters of the asset
          $ref: '#/components/schemas/JsonNode'
    AssetId:
      title: AssetId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: ASSET
          enum:
            - ASSET
    AssetInfo:
      title: AssetInfo
      required:
        - name
      type: object
      properties:
        id:
          description: JSON object with the asset Id. Specify this field to update the asset. Referencing non-existing asset Id will cause error. Omit this field to create new asset.
          $ref: '#/components/schemas/AssetId'
        createdTime:
          type: integer
          description: Timestamp of the asset creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id. Use 'assignAssetToCustomer' to change the Customer Id.
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        name:
          type: string
          description: Unique Asset Name in scope of Tenant
          example: Empire State Building
        type:
          type: string
          description: Asset type
          example: Building
        label:
          type: string
          description: Label that may be used in widgets
          example: NY Building
        assetProfileId:
          description: JSON object with Asset Profile Id.
          $ref: '#/components/schemas/AssetProfileId'
        additionalInfo:
          description: Additional parameters of the asset
          $ref: '#/components/schemas/JsonNode'
        customerTitle:
          type: string
          description: Title of the Customer that owns the asset.
          readOnly: true
        customerIsPublic:
          type: boolean
          description: Indicates special 'Public' Customer that is auto-generated to use the assets on public dashboards.
          readOnly: true
          example: false
        assetProfileName:
          type: string
          description: Name of the corresponding Asset Profile.
          readOnly: true
    AssetProfile:
      title: AssetProfile
      type: object
      properties:
        id:
          description: JSON object with the asset profile Id. Specify this field to update the asset profile. Referencing non-existing asset profile Id will cause error. Omit this field to create new asset profile.
          $ref: '#/components/schemas/AssetProfileId'
        createdTime:
          type: integer
          description: Timestamp of the profile creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id that owns the profile.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        name:
          type: string
          description: Unique Asset Profile Name in scope of Tenant.
          example: Building
        default:
          type: boolean
          description: Used to mark the default profile. Default profile is used when the asset profile is not specified during asset creation.
          example: false
        defaultDashboardId:
          description: Reference to the dashboard. Used in the mobile application to open the default dashboard when user navigates to asset details.
          $ref: '#/components/schemas/DashboardId'
        defaultRuleChainId:
          description: Reference to the rule chain. If present, the specified rule chain will be used to process all messages related to asset, including asset updates, telemetry, attribute updates, etc. Otherwise, the root rule chain will be used to process those messages.
          $ref: '#/components/schemas/RuleChainId'
        defaultQueueName:
          type: string
          description: Rule engine queue name. If present, the specified queue will be used to store all unprocessed messages related to asset, including asset updates, telemetry, attribute updates, etc. Otherwise, the 'Main' queue will be used to store those messages.
        description:
          type: string
          description: 'Asset Profile description. '
        image:
          type: string
          description: 'Either URL or Base64 data of the icon. Used in the mobile application to visualize set of asset profiles in the grid view. '
        defaultEdgeRuleChainId:
          description: Reference to the edge rule chain. If present, the specified edge rule chain will be used on the edge to process all messages related to asset, including asset updates, telemetry, attribute updates, etc. Otherwise, the edge root rule chain will be used to process those messages.
          $ref: '#/components/schemas/RuleChainId'
    AssetProfileId:
      title: AssetProfileId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: ASSET_PROFILE
          enum:
            - ASSET_PROFILE
    AssetProfileInfo:
      title: AssetProfileInfo
      type: object
      properties:
        id:
          description: 'JSON object with the entity Id. '
          $ref: '#/components/schemas/EntityId'
        name:
          type: string
          description: Entity Name
        image:
          type: string
          description: 'Either URL or Base64 data of the icon. Used in the mobile application to visualize set of asset profiles in the grid view. '
        defaultDashboardId:
          description: Reference to the dashboard. Used in the mobile application to open the default dashboard when user navigates to asset details.
          $ref: '#/components/schemas/DashboardId'
        tenantId:
          description: Tenant id.
          $ref: '#/components/schemas/TenantId'
    AssetSearchQuery:
      title: AssetSearchQuery
      type: object
      properties:
        relationType:
          type: string
          description: Type of the relation between root entity and asset (e.g. 'Contains' or 'Manages').
        assetTypes:
          type: array
          description: Array of asset types to filter the related entities (e.g. 'Building', 'Vehicle').
          items:
            type: string
        parameters:
          description: Main search parameters.
          $ref: '#/components/schemas/RelationsSearchParameters'
    AssetSearchQueryFilter:
      title: AssetSearchQueryFilter
      properties:
        assetTypes:
          type: array
          items:
            type: string
        direction:
          type: string
          enum:
            - FROM
            - TO
        fetchLastLevelOnly:
          type: boolean
        maxLevel:
          type: integer
          format: int32
        relationType:
          type: string
        rootEntity:
          $ref: '#/components/schemas/EntityId'
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: AssetSearchQueryFilter
          type: object
          properties:
            assetTypes:
              type: array
              items:
                type: string
            direction:
              type: string
              enum:
                - FROM
                - TO
            fetchLastLevelOnly:
              type: boolean
            maxLevel:
              type: integer
              format: int32
            relationType:
              type: string
            rootEntity:
              $ref: '#/components/schemas/EntityId'
    AssetTypeFilter:
      title: AssetTypeFilter
      properties:
        assetNameFilter:
          type: string
        assetTypes:
          type: array
          items:
            type: string
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: AssetTypeFilter
          type: object
          properties:
            assetNameFilter:
              type: string
            assetTypes:
              type: array
              items:
                type: string
    AtomicInteger:
      title: AtomicInteger
      type: object
      properties:
        acquire:
          type: integer
          format: int32
        andDecrement:
          type: integer
          format: int32
        andIncrement:
          type: integer
          format: int32
        opaque:
          type: integer
          format: int32
        plain:
          type: integer
          format: int32
    AttributeExportData:
      title: AttributeExportData
      type: object
      properties:
        booleanValue:
          type: boolean
        doubleValue:
          type: number
          format: double
        jsonValue:
          type: string
        key:
          type: string
        lastUpdateTs:
          type: integer
          format: int64
        longValue:
          type: integer
          format: int64
        strValue:
          type: string
    AttributesEntityView:
      title: AttributesEntityView
      required:
        - cs
        - sh
        - ss
      type: object
      properties:
        cs:
          type: array
          description: List of client-side attribute keys to expose
          example: currentConfiguration
          items:
            type: string
        sh:
          type: array
          description: List of shared attribute keys to expose
          example: targetConfiguration
          items:
            type: string
        ss:
          type: array
          description: List of server-side attribute keys to expose
          example: model
          items:
            type: string
    AuditLog:
      title: AuditLog
      type: object
      properties:
        id:
          description: JSON object with the auditLog Id
          $ref: '#/components/schemas/AuditLogId'
        createdTime:
          type: integer
          description: Timestamp of the auditLog creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        entityId:
          description: JSON object with Entity id
          $ref: '#/components/schemas/EntityId'
          readOnly: true
        entityName:
          type: string
          description: Name of the logged entity
          readOnly: true
          example: Thermometer
        userId:
          description: JSON object with User id.
          $ref: '#/components/schemas/UserId'
          readOnly: true
        userName:
          type: string
          description: Unique user name(email) of the user that performed some action on logged entity
          readOnly: true
          example: tenant@thingsboard.org
        actionType:
          type: string
          description: String represented Action type
          readOnly: true
          example: ADDED
          enum:
            - ACTIVATED
            - ADDED
            - ADDED_COMMENT
            - ALARM_ACK
            - ALARM_ASSIGNED
            - ALARM_CLEAR
            - ALARM_DELETE
            - ALARM_UNASSIGNED
            - ASSIGNED_FROM_TENANT
            - ASSIGNED_TO_CUSTOMER
            - ASSIGNED_TO_EDGE
            - ASSIGNED_TO_TENANT
            - ATTRIBUTES_DELETED
            - ATTRIBUTES_READ
            - ATTRIBUTES_UPDATED
            - CREDENTIALS_READ
            - CREDENTIALS_UPDATED
            - DELETED
            - DELETED_COMMENT
            - LOCKOUT
            - LOGIN
            - LOGOUT
            - PROVISION_FAILURE
            - PROVISION_SUCCESS
            - RELATIONS_DELETED
            - RELATION_ADD_OR_UPDATE
            - RELATION_DELETED
            - RPC_CALL
            - SMS_SENT
            - SUSPENDED
            - TIMESERIES_DELETED
            - TIMESERIES_UPDATED
            - UNASSIGNED_FROM_CUSTOMER
            - UNASSIGNED_FROM_EDGE
            - UPDATED
            - UPDATED_COMMENT
        actionData:
          description: JsonNode represented action data
          $ref: '#/components/schemas/JsonNode'
          readOnly: true
        actionStatus:
          type: string
          description: String represented Action status
          readOnly: true
          example: SUCCESS
          enum:
            - FAILURE
            - SUCCESS
        actionFailureDetails:
          type: string
          description: Failure action details info. An empty string in case of action status type 'SUCCESS', otherwise includes stack trace of the caused exception.
          readOnly: true
    AuditLogId:
      title: AuditLogId
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: string
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
    AutoVersionCreateConfig:
      title: AutoVersionCreateConfig
      type: object
      properties:
        branch:
          type: string
        saveAttributes:
          type: boolean
        saveCredentials:
          type: boolean
        saveRelations:
          type: boolean
    AwsSnsSmsProviderConfiguration:
      title: AwsSnsSmsProviderConfiguration
      properties:
        accessKeyId:
          type: string
          description: The AWS SNS Access Key ID.
        secretAccessKey:
          type: string
          description: The AWS SNS Access Key.
        region:
          type: string
          description: The AWS region.
      allOf:
        - $ref: '#/components/schemas/SmsProviderConfiguration'
        - title: AwsSnsSmsProviderConfiguration
          type: object
          properties:
            accessKeyId:
              type: string
              description: The AWS SNS Access Key ID.
            secretAccessKey:
              type: string
              description: The AWS SNS Access Key.
            region:
              type: string
              description: The AWS region.
    BackupCodeTwoFaAccountConfig:
      title: BackupCodeTwoFaAccountConfig
      type: object
      properties:
        codes:
          uniqueItems: true
          type: array
          items:
            type: string
        codesLeft:
          type: integer
          format: int32
        useByDefault:
          type: boolean
    BackupCodeTwoFaProviderConfig:
      title: BackupCodeTwoFaProviderConfig
      type: object
      properties:
        codesQuantity:
          type: integer
          format: int32
    BooleanFilterPredicate:
      title: BooleanFilterPredicate
      properties:
        operation:
          type: string
          enum:
            - EQUAL
            - NOT_EQUAL
        value:
          $ref: '#/components/schemas/FilterPredicateValue«boolean»'
      allOf:
        - $ref: '#/components/schemas/KeyFilterPredicate'
        - title: BooleanFilterPredicate
          type: object
          properties:
            operation:
              type: string
              enum:
                - EQUAL
                - NOT_EQUAL
            value:
              $ref: '#/components/schemas/FilterPredicateValue«boolean»'
    BranchInfo:
      title: BranchInfo
      type: object
      properties:
        default:
          type: boolean
        name:
          type: string
    BulkImportRequest:
      title: BulkImportRequest
      type: object
      properties:
        file:
          type: string
        mapping:
          $ref: '#/components/schemas/Mapping'
    BulkImportResult«Asset»:
      title: BulkImportResult«Asset»
      type: object
      properties:
        created:
          $ref: '#/components/schemas/AtomicInteger'
        errors:
          $ref: '#/components/schemas/AtomicInteger'
        errorsList:
          type: array
          items:
            type: string
        updated:
          $ref: '#/components/schemas/AtomicInteger'
    BulkImportResult«Device»:
      title: BulkImportResult«Device»
      type: object
      properties:
        created:
          $ref: '#/components/schemas/AtomicInteger'
        errors:
          $ref: '#/components/schemas/AtomicInteger'
        errorsList:
          type: array
          items:
            type: string
        updated:
          $ref: '#/components/schemas/AtomicInteger'
    BulkImportResult«Edge»:
      title: BulkImportResult«Edge»
      type: object
      properties:
        created:
          $ref: '#/components/schemas/AtomicInteger'
        errors:
          $ref: '#/components/schemas/AtomicInteger'
        errorsList:
          type: array
          items:
            type: string
        updated:
          $ref: '#/components/schemas/AtomicInteger'
    Button:
      title: Button
      type: object
      properties:
        dashboardId:
          type: string
          format: uuid
        dashboardState:
          type: string
        enabled:
          type: boolean
        link:
          type: string
        linkType:
          type: string
          enum:
            - DASHBOARD
            - LINK
        setEntityIdInState:
          type: boolean
        text:
          type: string
    ByteArrayResource:
      title: ByteArrayResource
      type: object
      properties:
        byteArray:
          type: string
          format: byte
        description:
          type: string
        file:
          type: string
          format: binary
        filename:
          type: string
        inputStream:
          $ref: '#/components/schemas/InputStream'
        open:
          type: boolean
        readable:
          type: boolean
        uri:
          type: string
          format: uri
        url:
          type: string
          format: url
    ByteBuffer:
      title: ByteBuffer
      type: object
      properties:
        char:
          type: string
        direct:
          type: boolean
        double:
          type: number
          format: double
        float:
          type: number
          format: float
        int:
          type: integer
          format: int32
        long:
          type: integer
          format: int64
        readOnly:
          type: boolean
        short:
          type: integer
          format: int32
    CaptchaClientParams:
      title: CaptchaClientParams
      type: object
      properties:
        captchaAction:
          type: string
        captchaSiteKey:
          type: string
        captchaVersion:
          type: string
    ChangePasswordRequest:
      title: ChangePasswordRequest
      type: object
      properties:
        currentPassword:
          type: string
          description: The old password
          example: OldPassword
        newPassword:
          type: string
          description: The new password
          example: NewPassword
    CheckPreProvisionedDevicesDeviceProfileProvisionConfiguration:
      title: CheckPreProvisionedDevicesDeviceProfileProvisionConfiguration
      type: object
      properties:
        provisionDeviceSecret:
          type: string
    ClaimRequest:
      title: ClaimRequest
      type: object
      properties:
        secretKey:
          type: string
    ClearRule:
      title: ClearRule
      type: object
      properties:
        alarmStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ACK
              - ACTIVE
              - ANY
              - CLEARED
              - UNACK
    ClientAttributesQueryingSnmpCommunicationConfig:
      title: ClientAttributesQueryingSnmpCommunicationConfig
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/SnmpMapping'
        queryingFrequencyMs:
          type: integer
          format: int64
        spec:
          type: string
          enum:
            - CLIENT_ATTRIBUTES_QUERYING
            - SHARED_ATTRIBUTES_SETTING
            - TELEMETRY_QUERYING
            - TO_DEVICE_RPC_REQUEST
            - TO_SERVER_RPC_REQUEST
    CoapDeviceProfileTransportConfiguration:
      title: CoapDeviceProfileTransportConfiguration
      properties:
        clientSettings:
          $ref: '#/components/schemas/PowerSavingConfiguration'
        coapDeviceTypeConfiguration:
          $ref: '#/components/schemas/CoapDeviceTypeConfiguration'
      allOf:
        - $ref: '#/components/schemas/DeviceProfileTransportConfiguration'
        - title: CoapDeviceProfileTransportConfiguration
          type: object
          properties:
            clientSettings:
              $ref: '#/components/schemas/PowerSavingConfiguration'
            coapDeviceTypeConfiguration:
              $ref: '#/components/schemas/CoapDeviceTypeConfiguration'
    CoapDeviceTransportConfiguration:
      title: CoapDeviceTransportConfiguration
      properties:
        edrxCycle:
          type: integer
          format: int64
        pagingTransmissionWindow:
          type: integer
          format: int64
        powerMode:
          type: string
          enum:
            - DRX
            - E_DRX
            - PSM
        psmActivityTimer:
          type: integer
          format: int64
      allOf:
        - $ref: '#/components/schemas/DeviceTransportConfiguration'
        - title: CoapDeviceTransportConfiguration
          type: object
          properties:
            edrxCycle:
              type: integer
              format: int64
            pagingTransmissionWindow:
              type: integer
              format: int64
            powerMode:
              type: string
              enum:
                - DRX
                - E_DRX
                - PSM
            psmActivityTimer:
              type: integer
              format: int64
    CoapDeviceTypeConfiguration:
      title: CoapDeviceTypeConfiguration
      type: object
    ColumnMapping:
      title: ColumnMapping
      type: object
      properties:
        key:
          type: string
        type:
          type: string
          enum:
            - ACCESS_TOKEN
            - DESCRIPTION
            - IS_GATEWAY
            - LABEL
            - LWM2M_BOOTSTRAP_SERVER_PUBLIC_KEY_OR_ID
            - LWM2M_BOOTSTRAP_SERVER_SECRET_KEY
            - LWM2M_BOOTSTRAP_SERVER_SECURITY_MODE
            - LWM2M_CLIENT_CERT
            - LWM2M_CLIENT_ENDPOINT
            - LWM2M_CLIENT_IDENTITY
            - LWM2M_CLIENT_KEY
            - LWM2M_CLIENT_SECURITY_CONFIG_MODE
            - LWM2M_SERVER_CLIENT_PUBLIC_KEY_OR_ID
            - LWM2M_SERVER_CLIENT_SECRET_KEY
            - LWM2M_SERVER_SECURITY_MODE
            - MQTT_CLIENT_ID
            - MQTT_PASSWORD
            - MQTT_USER_NAME
            - NAME
            - ROUTING_KEY
            - SECRET
            - SERVER_ATTRIBUTE
            - SHARED_ATTRIBUTE
            - SNMP_COMMUNITY_STRING
            - SNMP_HOST
            - SNMP_PORT
            - SNMP_VERSION
            - TIMESERIES
            - TYPE
            - X509
    ComparisonTsValue:
      title: ComparisonTsValue
      type: object
      properties:
        current:
          $ref: '#/components/schemas/TsValue'
        previous:
          $ref: '#/components/schemas/TsValue'
    ComplexFilterPredicate:
      title: ComplexFilterPredicate
      properties:
        operation:
          type: string
          enum:
            - AND
            - OR
        predicates:
          type: array
          items:
            $ref: '#/components/schemas/KeyFilterPredicate'
      allOf:
        - $ref: '#/components/schemas/KeyFilterPredicate'
        - title: ComplexFilterPredicate
          type: object
          properties:
            operation:
              type: string
              enum:
                - AND
                - OR
            predicates:
              type: array
              items:
                $ref: '#/components/schemas/KeyFilterPredicate'
    ComplexVersionCreateRequest:
      title: ComplexVersionCreateRequest
      properties:
        branch:
          type: string
        entityTypes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EntityTypeVersionCreateConfig'
        syncStrategy:
          type: string
          enum:
            - MERGE
            - OVERWRITE
        type:
          type: string
          enum:
            - COMPLEX
            - SINGLE_ENTITY
        versionName:
          type: string
      allOf:
        - $ref: '#/components/schemas/VersionCreateRequest'
        - title: ComplexVersionCreateRequest
          type: object
          properties:
            branch:
              type: string
            entityTypes:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/EntityTypeVersionCreateConfig'
            syncStrategy:
              type: string
              enum:
                - MERGE
                - OVERWRITE
            type:
              type: string
              enum:
                - COMPLEX
                - SINGLE_ENTITY
            versionName:
              type: string
    ComponentDescriptor:
      title: ComponentDescriptor
      type: object
      properties:
        id:
          description: JSON object with the descriptor Id. Specify existing descriptor id to update the descriptor. Referencing non-existing descriptor Id will cause error. Omit this field to create new descriptor.
          $ref: '#/components/schemas/ComponentDescriptorId'
        createdTime:
          type: integer
          description: Timestamp of the descriptor creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        type:
          type: string
          description: Type of the Rule Node
          readOnly: true
          enum:
            - ACTION
            - ENRICHMENT
            - EXTERNAL
            - FILTER
            - FLOW
            - TRANSFORMATION
        scope:
          type: string
          description: Scope of the Rule Node. Always set to 'TENANT', since no rule chains on the 'SYSTEM' level yet.
          readOnly: true
          example: TENANT
          enum:
            - TENANT
        clusteringMode:
          type: string
          description: Clustering mode of the RuleNode. This mode represents the ability to start Rule Node in multiple microservices.
          readOnly: true
          example: ENABLED
          enum:
            - ENABLED
            - SINGLETON
            - USER_PREFERENCE
        name:
          type: string
          description: Name of the Rule Node. Taken from the @RuleNode annotation.
          readOnly: true
          example: Custom Rule Node
        clazz:
          type: string
          description: Full name of the Java class that implements the Rule Engine Node interface.
          readOnly: true
          example: com.mycompany.CustomRuleNode
        configurationDescriptor:
          description: Complex JSON object that represents the Rule Node configuration.
          $ref: '#/components/schemas/JsonNode'
          readOnly: true
        configurationVersion:
          type: integer
          description: Rule node configuration version. By default, this value is 0. If the rule node is a versioned node, this value might be greater than 0.
          format: int32
          readOnly: true
        actions:
          type: string
          description: Rule Node Actions. Deprecated. Always null.
          readOnly: true
    ComponentDescriptorId:
      title: ComponentDescriptorId
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: string
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
    CustomTimeSchedule:
      title: CustomTimeSchedule
      type: object
      properties:
        dynamicValue:
          $ref: '#/components/schemas/DynamicValue«string»'
        items:
          type: array
          items:
            $ref: '#/components/schemas/CustomTimeScheduleItem'
        timezone:
          type: string
        type:
          type: string
          enum:
            - ANY_TIME
            - CUSTOM
            - SPECIFIC_TIME
    CustomTimeScheduleItem:
      title: CustomTimeScheduleItem
      type: object
      properties:
        dayOfWeek:
          type: integer
          format: int32
        enabled:
          type: boolean
        endsOn:
          type: integer
          format: int64
        startsOn:
          type: integer
          format: int64
    Customer:
      title: Customer
      required:
        - email
        - title
      type: object
      properties:
        id:
          description: JSON object with the customer Id. Specify this field to update the customer. Referencing non-existing customer Id will cause error. Omit this field to create new customer.
          $ref: '#/components/schemas/CustomerId'
        createdTime:
          type: integer
          description: Timestamp of the customer creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        title:
          type: string
          description: Title of the customer
          example: Company A
        name:
          type: string
          description: Name of the customer. Read-only, duplicated from title for backward compatibility
          readOnly: true
          example: Company A
        tenantId:
          description: JSON object with Tenant Id
          $ref: '#/components/schemas/TenantId'
        country:
          type: string
          description: Country
          example: US
        state:
          type: string
          description: State
          example: NY
        city:
          type: string
          description: City
          example: New York
        address:
          type: string
          description: Address Line 1
          example: 42 Broadway Suite 12-400
        address2:
          type: string
          description: Address Line 2
        zip:
          type: string
          description: Zip code
          example: '10004'
        phone:
          type: string
          description: Phone number
          example: +1(415)777-7777
        email:
          type: string
          description: Email
          example: example@company.com
        additionalInfo:
          description: Additional parameters of the device
          $ref: '#/components/schemas/JsonNode'
    CustomerId:
      title: CustomerId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: CUSTOMER
          enum:
            - CUSTOMER
    CustomerUsersFilter:
      title: CustomerUsersFilter
      required:
        - customerId
      type: object
      properties:
        customerId:
          type: string
          format: uuid
    Dashboard:
      title: Dashboard
      required:
        - title
      type: object
      properties:
        createdTime:
          type: integer
          description: Timestamp of the dashboard creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Tenant Id of the dashboard can't be changed.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        name:
          type: string
          description: Same as title of the dashboard. Read-only field. Update the 'title' to change the 'name' of the dashboard.
          readOnly: true
        title:
          type: string
          description: Title of the dashboard.
        assignedCustomers:
          uniqueItems: true
          type: array
          description: List of assigned customers with their info.
          readOnly: true
          items:
            $ref: '#/components/schemas/ShortCustomerInfo'
        mobileHide:
          type: boolean
          description: Hide dashboard from mobile devices. Useful if the dashboard is not designed for small screens.
          readOnly: true
          example: false
        mobileOrder:
          type: integer
          description: Order on mobile devices. Useful to adjust sorting of the dashboards for mobile applications
          format: int32
          readOnly: true
        image:
          type: string
          description: Thumbnail picture for rendering of the dashboards in a grid view on mobile devices.
          readOnly: true
        configuration:
          description: 'JSON object with main configuration of the dashboard: layouts, widgets, aliases, etc. The JSON structure of the dashboard configuration is quite complex. The easiest way to learn it is to export existing dashboard to JSON.'
          $ref: '#/components/schemas/JsonNode'
    DashboardId:
      title: DashboardId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: DASHBOARD
          enum:
            - DASHBOARD
    DashboardInfo:
      title: DashboardInfo
      required:
        - title
      type: object
      properties:
        id:
          description: JSON object with the dashboard Id. Specify existing dashboard Id to update the dashboard. Referencing non-existing dashboard id will cause error. Omit this field to create new dashboard.
          $ref: '#/components/schemas/DashboardId'
        createdTime:
          type: integer
          description: Timestamp of the dashboard creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Tenant Id of the dashboard can't be changed.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        name:
          type: string
          description: Same as title of the dashboard. Read-only field. Update the 'title' to change the 'name' of the dashboard.
          readOnly: true
        title:
          type: string
          description: Title of the dashboard.
        assignedCustomers:
          uniqueItems: true
          type: array
          description: List of assigned customers with their info.
          readOnly: true
          items:
            $ref: '#/components/schemas/ShortCustomerInfo'
        mobileHide:
          type: boolean
          description: Hide dashboard from mobile devices. Useful if the dashboard is not designed for small screens.
          readOnly: true
          example: false
        mobileOrder:
          type: integer
          description: Order on mobile devices. Useful to adjust sorting of the dashboards for mobile applications
          format: int32
          readOnly: true
        image:
          type: string
          description: Thumbnail picture for rendering of the dashboards in a grid view on mobile devices.
          readOnly: true
    DefaultCoapDeviceTypeConfiguration:
      title: DefaultCoapDeviceTypeConfiguration
      properties:
        transportPayloadTypeConfiguration:
          $ref: '#/components/schemas/TransportPayloadTypeConfiguration'
      allOf:
        - $ref: '#/components/schemas/CoapDeviceTypeConfiguration'
        - title: DefaultCoapDeviceTypeConfiguration
          type: object
          properties:
            transportPayloadTypeConfiguration:
              $ref: '#/components/schemas/TransportPayloadTypeConfiguration'
    DefaultDeviceConfiguration:
      title: DefaultDeviceConfiguration
      allOf:
        - $ref: '#/components/schemas/DeviceConfiguration'
        - title: DefaultDeviceConfiguration
          type: object
    DefaultDeviceProfileConfiguration:
      title: DefaultDeviceProfileConfiguration
      type: object
    DefaultDeviceProfileTransportConfiguration:
      title: DefaultDeviceProfileTransportConfiguration
      type: object
    DefaultDeviceTransportConfiguration:
      title: DefaultDeviceTransportConfiguration
      allOf:
        - $ref: '#/components/schemas/DeviceTransportConfiguration'
        - title: DefaultDeviceTransportConfiguration
          type: object
    DefaultRuleChainCreateRequest:
      title: DefaultRuleChainCreateRequest
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of the new rule chain
          example: Root Rule Chain
    DefaultTenantProfileConfiguration:
      title: DefaultTenantProfileConfiguration
      type: object
      properties:
        alarmsTtlDays:
          type: integer
          format: int32
        cassandraQueryTenantRateLimitsConfiguration:
          type: string
        customerServerRestLimitsConfiguration:
          type: string
        defaultStorageTtlDays:
          type: integer
          format: int32
        maxAssets:
          type: integer
          format: int64
        maxCreatedAlarms:
          type: integer
          format: int64
        maxCustomers:
          type: integer
          format: int64
        maxDPStorageDays:
          type: integer
          format: int64
        maxDashboards:
          type: integer
          format: int64
        maxDevices:
          type: integer
          format: int64
        maxEmails:
          type: integer
          format: int64
        maxJSExecutions:
          type: integer
          format: int64
        maxOtaPackagesInBytes:
          type: integer
          format: int64
        maxREExecutions:
          type: integer
          format: int64
        maxResourceSize:
          type: integer
          format: int64
        maxResourcesInBytes:
          type: integer
          format: int64
        maxRuleChains:
          type: integer
          format: int64
        maxRuleNodeExecutionsPerMessage:
          type: integer
          format: int32
        maxSms:
          type: integer
          format: int64
        maxTbelExecutions:
          type: integer
          format: int64
        maxTransportDataPoints:
          type: integer
          format: int64
        maxTransportMessages:
          type: integer
          format: int64
        maxUsers:
          type: integer
          format: int64
        maxWsSessionsPerCustomer:
          type: integer
          format: int32
        maxWsSessionsPerPublicUser:
          type: integer
          format: int32
        maxWsSessionsPerRegularUser:
          type: integer
          format: int32
        maxWsSessionsPerTenant:
          type: integer
          format: int32
        maxWsSubscriptionsPerCustomer:
          type: integer
          format: int64
        maxWsSubscriptionsPerPublicUser:
          type: integer
          format: int64
        maxWsSubscriptionsPerRegularUser:
          type: integer
          format: int64
        maxWsSubscriptionsPerTenant:
          type: integer
          format: int64
        queueStatsTtlDays:
          type: integer
          format: int32
        rpcTtlDays:
          type: integer
          format: int32
        ruleEngineExceptionsTtlDays:
          type: integer
          format: int32
        smsEnabled:
          type: boolean
        tenantEntityExportRateLimit:
          type: string
        tenantEntityImportRateLimit:
          type: string
        tenantNotificationRequestsPerRuleRateLimit:
          type: string
        tenantNotificationRequestsRateLimit:
          type: string
        tenantServerRestLimitsConfiguration:
          type: string
        transportDeviceMsgRateLimit:
          type: string
        transportDeviceTelemetryDataPointsRateLimit:
          type: string
        transportDeviceTelemetryMsgRateLimit:
          type: string
        transportTenantMsgRateLimit:
          type: string
        transportTenantTelemetryDataPointsRateLimit:
          type: string
        transportTenantTelemetryMsgRateLimit:
          type: string
        warnThreshold:
          type: number
          format: double
        wsMsgQueueLimitPerSession:
          type: integer
          format: int32
        wsUpdatesPerSessionRateLimit:
          type: string
    DeferredResult«EntityDataDiff»:
      title: DeferredResult«EntityDataDiff»
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    DeferredResult«EntityDataInfo»:
      title: DeferredResult«EntityDataInfo»
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    DeferredResult«List«BranchInfo»»:
      title: DeferredResult«List«BranchInfo»»
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    DeferredResult«List«VersionedEntityInfo»»:
      title: DeferredResult«List«VersionedEntityInfo»»
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    DeferredResult«PageData«EntityVersion»»:
      title: DeferredResult«PageData«EntityVersion»»
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    DeferredResult«RepositorySettings»:
      title: DeferredResult«RepositorySettings»
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    DeferredResult«ResponseEntity»:
      title: DeferredResult«ResponseEntity»
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    DeferredResult«Void»:
      title: DeferredResult«Void»
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    DeferredResult«uuid»:
      title: DeferredResult«uuid»
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    DeliveryMethodNotificationTemplate:
      title: DeliveryMethodNotificationTemplate
      type: object
      properties:
        body:
          type: string
        enabled:
          type: boolean
    Device:
      title: Device
      required:
        - deviceProfileId
        - name
      type: object
      properties:
        id:
          description: JSON object with the Device Id. Specify this field to update the Device. Referencing non-existing Device Id will cause error. Omit this field to create new Device.
          $ref: '#/components/schemas/DeviceId'
        createdTime:
          type: integer
          description: Timestamp of the device creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Use 'assignDeviceToTenant' to change the Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id. Use 'assignDeviceToCustomer' to change the Customer Id.
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        name:
          type: string
          description: Unique Device Name in scope of Tenant
          example: A4B72CCDFF33
        type:
          type: string
          description: Device Profile Name
          example: Temperature Sensor
        label:
          type: string
          description: Label that may be used in widgets
          example: Room 234 Sensor
        deviceProfileId:
          description: JSON object with Device Profile Id.
          $ref: '#/components/schemas/DeviceProfileId'
        deviceData:
          description: JSON object with content specific to type of transport in the device profile.
          $ref: '#/components/schemas/DeviceData'
        firmwareId:
          description: JSON object with Ota Package Id.
          $ref: '#/components/schemas/OtaPackageId'
        softwareId:
          description: JSON object with Ota Package Id.
          $ref: '#/components/schemas/OtaPackageId'
        additionalInfo:
          description: Additional parameters of the device
          $ref: '#/components/schemas/JsonNode'
    DeviceActivityNotificationRuleTriggerConfig:
      title: DeviceActivityNotificationRuleTriggerConfig
      type: object
      properties:
        deviceProfiles:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
        devices:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
        notifyOn:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    DeviceConfiguration:
      title: DeviceConfiguration
      type: object
    DeviceCredentials:
      title: DeviceCredentials
      required:
        - credentialsId
        - deviceId
        - id
      type: object
      properties:
        id:
          description: 'The Id is automatically generated during device creation. Use ''getDeviceCredentialsByDeviceId'' to obtain the id based on device id. Use ''updateDeviceCredentials'' to update device credentials. '
          $ref: '#/components/schemas/DeviceCredentialsId'
          readOnly: true
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        createdTime:
          type: integer
          description: Timestamp of the device credentials creation, in milliseconds
          format: int64
          example: 1609459200000
        deviceId:
          description: JSON object with the device Id.
          $ref: '#/components/schemas/DeviceId'
        credentialsType:
          type: string
          description: Type of the credentials
          enum:
            - ACCESS_TOKEN
            - LWM2M_CREDENTIALS
            - MQTT_BASIC
            - X509_CERTIFICATE
        credentialsId:
          type: string
          description: Unique Credentials Id per platform instance. Used to lookup credentials from the database. By default, new access token for your device. Depends on the type of the credentials.
          example: Access token or other value that depends on the credentials type
        credentialsValue:
          type: string
          description: Value of the credentials. Null in case of ACCESS_TOKEN credentials type. Base64 value in case of X509_CERTIFICATE. Complex object in case of MQTT_BASIC and LWM2M_CREDENTIALS
          example: Null in case of ACCESS_TOKEN. See model definition.
    DeviceCredentialsId:
      title: DeviceCredentialsId
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: string
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
    DeviceData:
      title: DeviceData
      type: object
      properties:
        configuration:
          description: Device configuration for device profile type. DEFAULT is only supported value for now
          $ref: '#/components/schemas/DeviceConfiguration'
        transportConfiguration:
          description: Device transport configuration used to connect the device
          $ref: '#/components/schemas/DeviceTransportConfiguration'
    DeviceExportData:
      title: DeviceExportData
      properties:
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/AttributeExportData'
        credentials:
          $ref: '#/components/schemas/DeviceCredentials'
        entity:
          $ref: '#/components/schemas/Device'
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        relations:
          type: array
          items:
            $ref: '#/components/schemas/EntityRelation'
      allOf:
        - $ref: '#/components/schemas/EntityExportData«object»'
        - title: DeviceExportData
          type: object
          properties:
            attributes:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeExportData'
            credentials:
              $ref: '#/components/schemas/DeviceCredentials'
            entity:
              $ref: '#/components/schemas/Device'
            entityType:
              type: string
              enum:
                - ALARM
                - API_USAGE_STATE
                - ASSET
                - ASSET_PROFILE
                - CUSTOMER
                - DASHBOARD
                - DEVICE
                - DEVICE_PROFILE
                - EDGE
                - ENTITY_VIEW
                - NOTIFICATION
                - NOTIFICATION_REQUEST
                - NOTIFICATION_RULE
                - NOTIFICATION_TARGET
                - NOTIFICATION_TEMPLATE
                - OTA_PACKAGE
                - QUEUE
                - RPC
                - RULE_CHAIN
                - RULE_NODE
                - TB_RESOURCE
                - TENANT
                - TENANT_PROFILE
                - USER
                - WIDGETS_BUNDLE
                - WIDGET_TYPE
            relations:
              type: array
              items:
                $ref: '#/components/schemas/EntityRelation'
    DeviceId:
      title: DeviceId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: DEVICE
          enum:
            - DEVICE
    DeviceInfo:
      title: DeviceInfo
      required:
        - deviceProfileId
        - name
      type: object
      properties:
        id:
          description: JSON object with the Device Id. Specify this field to update the Device. Referencing non-existing Device Id will cause error. Omit this field to create new Device.
          $ref: '#/components/schemas/DeviceId'
        createdTime:
          type: integer
          description: Timestamp of the device creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Use 'assignDeviceToTenant' to change the Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id. Use 'assignDeviceToCustomer' to change the Customer Id.
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        name:
          type: string
          description: Unique Device Name in scope of Tenant
          example: A4B72CCDFF33
        type:
          type: string
          description: Device Profile Name
          example: Temperature Sensor
        label:
          type: string
          description: Label that may be used in widgets
          example: Room 234 Sensor
        deviceProfileId:
          description: JSON object with Device Profile Id.
          $ref: '#/components/schemas/DeviceProfileId'
        deviceData:
          description: JSON object with content specific to type of transport in the device profile.
          $ref: '#/components/schemas/DeviceData'
        firmwareId:
          description: JSON object with Ota Package Id.
          $ref: '#/components/schemas/OtaPackageId'
        softwareId:
          description: JSON object with Ota Package Id.
          $ref: '#/components/schemas/OtaPackageId'
        additionalInfo:
          description: Additional parameters of the device
          $ref: '#/components/schemas/JsonNode'
        customerTitle:
          type: string
          description: Title of the Customer that owns the device.
          readOnly: true
        customerIsPublic:
          type: boolean
          description: Indicates special 'Public' Customer that is auto-generated to use the devices on public dashboards.
          readOnly: true
          example: false
        deviceProfileName:
          type: string
          description: Name of the corresponding Device Profile.
          readOnly: true
        active:
          type: boolean
          description: Device active flag.
          readOnly: true
          example: false
    DeviceProfile:
      title: DeviceProfile
      type: object
      properties:
        id:
          description: JSON object with the device profile Id. Specify this field to update the device profile. Referencing non-existing device profile Id will cause error. Omit this field to create new device profile.
          $ref: '#/components/schemas/DeviceProfileId'
        createdTime:
          type: integer
          description: Timestamp of the profile creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id that owns the profile.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        name:
          type: string
          description: Unique Device Profile Name in scope of Tenant.
          example: Moisture Sensor
        default:
          type: boolean
          description: Used to mark the default profile. Default profile is used when the device profile is not specified during device creation.
          example: false
        defaultDashboardId:
          description: Reference to the dashboard. Used in the mobile application to open the default dashboard when user navigates to device details.
          $ref: '#/components/schemas/DashboardId'
        defaultRuleChainId:
          description: Reference to the rule chain. If present, the specified rule chain will be used to process all messages related to device, including telemetry, attribute updates, etc. Otherwise, the root rule chain will be used to process those messages.
          $ref: '#/components/schemas/RuleChainId'
        defaultQueueName:
          type: string
          description: Rule engine queue name. If present, the specified queue will be used to store all unprocessed messages related to device, including telemetry, attribute updates, etc. Otherwise, the 'Main' queue will be used to store those messages.
        firmwareId:
          description: 'Reference to the firmware OTA package. If present, the specified package will be used as default device firmware. '
          $ref: '#/components/schemas/OtaPackageId'
        softwareId:
          description: 'Reference to the software OTA package. If present, the specified package will be used as default device software. '
          $ref: '#/components/schemas/OtaPackageId'
        description:
          type: string
          description: 'Device Profile description. '
        image:
          type: string
          description: 'Either URL or Base64 data of the icon. Used in the mobile application to visualize set of device profiles in the grid view. '
        provisionDeviceKey:
          type: string
          description: Unique provisioning key used by 'Device Provisioning' feature.
        transportType:
          type: string
          description: Type of the transport used to connect the device. Default transport supports HTTP, CoAP and MQTT.
          enum:
            - COAP
            - DEFAULT
            - LWM2M
            - MQTT
            - SNMP
        provisionType:
          type: string
          description: Provisioning strategy.
          enum:
            - ALLOW_CREATE_NEW_DEVICES
            - CHECK_PRE_PROVISIONED_DEVICES
            - DISABLED
            - X509_CERTIFICATE_CHAIN
        profileData:
          description: Complex JSON object that includes addition device profile configuration (transport, alarm rules, etc).
          $ref: '#/components/schemas/DeviceProfileData'
        type:
          type: string
          description: Type of the profile. Always 'DEFAULT' for now. Reserved for future use.
          enum:
            - DEFAULT
        defaultEdgeRuleChainId:
          description: Reference to the edge rule chain. If present, the specified edge rule chain will be used on the edge to process all messages related to device, including telemetry, attribute updates, etc. Otherwise, the edge root rule chain will be used to process those messages.
          $ref: '#/components/schemas/RuleChainId'
    DeviceProfileAlarm:
      title: DeviceProfileAlarm
      type: object
      properties:
        id:
          type: string
          description: String value representing the alarm rule id
          example: highTemperatureAlarmID
        alarmType:
          type: string
          description: String value representing type of the alarm
          example: High Temperature Alarm
        createRules:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AlarmRule'
          description: Complex JSON object representing create alarm rules. The unique create alarm rule can be created for each alarm severity type. There can be 5 create alarm rules configured per a single alarm type. See method implementation notes and AlarmRule model for more details
        clearRule:
          description: JSON object representing clear alarm rule
          $ref: '#/components/schemas/AlarmRule'
        propagate:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to parent entities of alarm originator
          example: true
        propagateToOwner:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to the owner (tenant or customer) of alarm originator
          example: true
        propagateToTenant:
          type: boolean
          description: Propagation flag to specify if alarm should be propagated to the tenant entity
          example: true
        propagateRelationTypes:
          type: array
          description: JSON array of relation types that should be used for propagation. By default, 'propagateRelationTypes' array is empty which means that the alarm will be propagated based on any relation type to parent entities. This parameter should be used only in case when 'propagate' parameter is set to true, otherwise, 'propagateRelationTypes' array will be ignored.
          items:
            type: string
    DeviceProfileConfiguration:
      title: DeviceProfileConfiguration
      type: object
    DeviceProfileData:
      title: DeviceProfileData
      type: object
      properties:
        configuration:
          description: JSON object of device profile configuration
          $ref: '#/components/schemas/DeviceProfileConfiguration'
        transportConfiguration:
          description: JSON object of device profile transport configuration
          $ref: '#/components/schemas/DeviceProfileTransportConfiguration'
        provisionConfiguration:
          description: JSON object of provisioning strategy type per device profile
          $ref: '#/components/schemas/DeviceProfileProvisionConfiguration'
        alarms:
          type: array
          description: JSON array of alarm rules configuration per device profile
          items:
            $ref: '#/components/schemas/DeviceProfileAlarm'
    DeviceProfileId:
      title: DeviceProfileId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: DEVICE_PROFILE
          enum:
            - DEVICE_PROFILE
    DeviceProfileInfo:
      title: DeviceProfileInfo
      type: object
      properties:
        id:
          description: 'JSON object with the entity Id. '
          $ref: '#/components/schemas/EntityId'
        name:
          type: string
          description: Entity Name
        image:
          type: string
          description: 'Either URL or Base64 data of the icon. Used in the mobile application to visualize set of device profiles in the grid view. '
        defaultDashboardId:
          description: Reference to the dashboard. Used in the mobile application to open the default dashboard when user navigates to device details.
          $ref: '#/components/schemas/DashboardId'
        type:
          type: string
          description: Type of the profile. Always 'DEFAULT' for now. Reserved for future use.
          enum:
            - DEFAULT
        transportType:
          type: string
          description: Type of the transport used to connect the device. Default transport supports HTTP, CoAP and MQTT.
          enum:
            - COAP
            - DEFAULT
            - LWM2M
            - MQTT
            - SNMP
        tenantId:
          description: Tenant id.
          $ref: '#/components/schemas/TenantId'
    DeviceProfileProvisionConfiguration:
      title: DeviceProfileProvisionConfiguration
      type: object
      properties:
        provisionDeviceSecret:
          type: string
    DeviceProfileTransportConfiguration:
      title: DeviceProfileTransportConfiguration
      type: object
    DeviceSearchQuery:
      title: DeviceSearchQuery
      type: object
      properties:
        relationType:
          type: string
          description: Type of the relation between root entity and device (e.g. 'Contains' or 'Manages').
        deviceTypes:
          type: array
          description: Array of device types to filter the related entities (e.g. 'Temperature Sensor', 'Smoke Sensor').
          items:
            type: string
        parameters:
          description: Main search parameters.
          $ref: '#/components/schemas/RelationsSearchParameters'
    DeviceSearchQueryFilter:
      title: DeviceSearchQueryFilter
      properties:
        deviceTypes:
          type: array
          items:
            type: string
        direction:
          type: string
          enum:
            - FROM
            - TO
        fetchLastLevelOnly:
          type: boolean
        maxLevel:
          type: integer
          format: int32
        relationType:
          type: string
        rootEntity:
          $ref: '#/components/schemas/EntityId'
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: DeviceSearchQueryFilter
          type: object
          properties:
            deviceTypes:
              type: array
              items:
                type: string
            direction:
              type: string
              enum:
                - FROM
                - TO
            fetchLastLevelOnly:
              type: boolean
            maxLevel:
              type: integer
              format: int32
            relationType:
              type: string
            rootEntity:
              $ref: '#/components/schemas/EntityId'
    DeviceTransportConfiguration:
      title: DeviceTransportConfiguration
      type: object
    DeviceTypeFilter:
      title: DeviceTypeFilter
      properties:
        deviceNameFilter:
          type: string
        deviceTypes:
          type: array
          items:
            type: string
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: DeviceTypeFilter
          type: object
          properties:
            deviceNameFilter:
              type: string
            deviceTypes:
              type: array
              items:
                type: string
    DisabledDeviceProfileProvisionConfiguration:
      title: DisabledDeviceProfileProvisionConfiguration
      properties:
        provisionDeviceSecret:
          type: string
      allOf:
        - $ref: '#/components/schemas/DeviceProfileProvisionConfiguration'
        - title: DisabledDeviceProfileProvisionConfiguration
          type: object
          properties:
            provisionDeviceSecret:
              type: string
    DurationAlarmConditionSpec:
      title: DurationAlarmConditionSpec
      properties:
        predicate:
          $ref: '#/components/schemas/FilterPredicateValue«long»'
        unit:
          type: string
          enum:
            - DAYS
            - HOURS
            - MICROSECONDS
            - MILLISECONDS
            - MINUTES
            - NANOSECONDS
            - SECONDS
      allOf:
        - $ref: '#/components/schemas/AlarmConditionSpec'
        - title: DurationAlarmConditionSpec
          type: object
          properties:
            predicate:
              $ref: '#/components/schemas/FilterPredicateValue«long»'
            unit:
              type: string
              enum:
                - DAYS
                - HOURS
                - MICROSECONDS
                - MILLISECONDS
                - MINUTES
                - NANOSECONDS
                - SECONDS
    DynamicValue«boolean»:
      title: DynamicValue«boolean»
      type: object
      properties:
        inherit:
          type: boolean
        sourceAttribute:
          type: string
        sourceType:
          type: string
          enum:
            - CURRENT_CUSTOMER
            - CURRENT_DEVICE
            - CURRENT_TENANT
            - CURRENT_USER
    DynamicValue«double»:
      title: DynamicValue«double»
      type: object
      properties:
        inherit:
          type: boolean
        sourceAttribute:
          type: string
        sourceType:
          type: string
          enum:
            - CURRENT_CUSTOMER
            - CURRENT_DEVICE
            - CURRENT_TENANT
            - CURRENT_USER
    DynamicValue«int»:
      title: DynamicValue«int»
      type: object
      properties:
        inherit:
          type: boolean
        sourceAttribute:
          type: string
        sourceType:
          type: string
          enum:
            - CURRENT_CUSTOMER
            - CURRENT_DEVICE
            - CURRENT_TENANT
            - CURRENT_USER
    DynamicValue«long»:
      title: DynamicValue«long»
      type: object
      properties:
        inherit:
          type: boolean
        sourceAttribute:
          type: string
        sourceType:
          type: string
          enum:
            - CURRENT_CUSTOMER
            - CURRENT_DEVICE
            - CURRENT_TENANT
            - CURRENT_USER
    DynamicValue«string»:
      title: DynamicValue«string»
      type: object
      properties:
        inherit:
          type: boolean
        sourceAttribute:
          type: string
        sourceType:
          type: string
          enum:
            - CURRENT_CUSTOMER
            - CURRENT_DEVICE
            - CURRENT_TENANT
            - CURRENT_USER
    Edge:
      title: Edge
      required:
        - name
        - routingKey
        - secret
        - type
      type: object
      properties:
        additionalInfo:
          $ref: '#/components/schemas/JsonNode'
        id:
          description: JSON object with the Edge Id. Specify this field to update the Edge. Referencing non-existing Edge Id will cause error. Omit this field to create new Edge.
          $ref: '#/components/schemas/EdgeId'
        createdTime:
          type: integer
          description: Timestamp of the edge creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Use 'assignDeviceToTenant' to change the Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id. Use 'assignEdgeToCustomer' to change the Customer Id.
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        rootRuleChainId:
          description: JSON object with Root Rule Chain Id. Use 'setEdgeRootRuleChain' to change the Root Rule Chain Id.
          $ref: '#/components/schemas/RuleChainId'
          readOnly: true
        name:
          type: string
          description: Unique Edge Name in scope of Tenant
          example: Silo_A_Edge
        type:
          type: string
          description: Edge type
          example: Silos
        label:
          type: string
          description: Label that may be used in widgets
          example: Silo Edge on far field
        routingKey:
          type: string
          description: Edge routing key ('username') to authorize on cloud
        secret:
          type: string
          description: Edge secret ('password') to authorize on cloud
    EdgeEvent:
      title: EdgeEvent
      type: object
      properties:
        action:
          type: string
          enum:
            - ADDED
            - ALARM_ACK
            - ALARM_ASSIGNED
            - ALARM_CLEAR
            - ALARM_UNASSIGNED
            - ASSIGNED_TO_CUSTOMER
            - ASSIGNED_TO_EDGE
            - ATTRIBUTES_DELETED
            - ATTRIBUTES_UPDATED
            - CREDENTIALS_REQUEST
            - CREDENTIALS_UPDATED
            - DELETED
            - ENTITY_MERGE_REQUEST
            - POST_ATTRIBUTES
            - RELATION_ADD_OR_UPDATE
            - RELATION_DELETED
            - RPC_CALL
            - TIMESERIES_UPDATED
            - UNASSIGNED_FROM_CUSTOMER
            - UNASSIGNED_FROM_EDGE
            - UPDATED
        body:
          $ref: '#/components/schemas/JsonNode'
        createdTime:
          type: integer
          format: int64
        edgeId:
          $ref: '#/components/schemas/EdgeId'
        entityId:
          type: string
          format: uuid
        id:
          $ref: '#/components/schemas/EdgeEventId'
        seqId:
          type: integer
          format: int64
        tenantId:
          $ref: '#/components/schemas/TenantId'
        type:
          type: string
          enum:
            - ADMIN_SETTINGS
            - ALARM
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - OTA_PACKAGE
            - QUEUE
            - RELATION
            - RULE_CHAIN
            - RULE_CHAIN_METADATA
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        uid:
          type: string
    EdgeEventId:
      title: EdgeEventId
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: string
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
    EdgeId:
      title: EdgeId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: EDGE
          enum:
            - EDGE
    EdgeInfo:
      title: EdgeInfo
      required:
        - name
        - routingKey
        - secret
        - type
      type: object
      properties:
        additionalInfo:
          $ref: '#/components/schemas/JsonNode'
        customerIsPublic:
          type: boolean
        customerTitle:
          type: string
        id:
          description: JSON object with the Edge Id. Specify this field to update the Edge. Referencing non-existing Edge Id will cause error. Omit this field to create new Edge.
          $ref: '#/components/schemas/EdgeId'
        createdTime:
          type: integer
          description: Timestamp of the edge creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Use 'assignDeviceToTenant' to change the Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id. Use 'assignEdgeToCustomer' to change the Customer Id.
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        rootRuleChainId:
          description: JSON object with Root Rule Chain Id. Use 'setEdgeRootRuleChain' to change the Root Rule Chain Id.
          $ref: '#/components/schemas/RuleChainId'
          readOnly: true
        name:
          type: string
          description: Unique Edge Name in scope of Tenant
          example: Silo_A_Edge
        type:
          type: string
          description: Edge type
          example: Silos
        label:
          type: string
          description: Label that may be used in widgets
          example: Silo Edge on far field
        routingKey:
          type: string
          description: Edge routing key ('username') to authorize on cloud
        secret:
          type: string
          description: Edge secret ('password') to authorize on cloud
    EdgeInstructions:
      title: EdgeInstructions
      type: object
      properties:
        instructions:
          type: string
          description: Markdown with install/upgrade instructions
    EdgeSearchQuery:
      title: EdgeSearchQuery
      type: object
      properties:
        relationType:
          type: string
          description: Type of the relation between root entity and edge (e.g. 'Contains' or 'Manages').
        edgeTypes:
          type: array
          description: Array of edge types to filter the related entities (e.g. 'Silos', 'Stores').
          items:
            type: string
        parameters:
          description: Main search parameters.
          $ref: '#/components/schemas/RelationsSearchParameters'
    EdgeSearchQueryFilter:
      title: EdgeSearchQueryFilter
      properties:
        direction:
          type: string
          enum:
            - FROM
            - TO
        edgeTypes:
          type: array
          items:
            type: string
        fetchLastLevelOnly:
          type: boolean
        maxLevel:
          type: integer
          format: int32
        relationType:
          type: string
        rootEntity:
          $ref: '#/components/schemas/EntityId'
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: EdgeSearchQueryFilter
          type: object
          properties:
            direction:
              type: string
              enum:
                - FROM
                - TO
            edgeTypes:
              type: array
              items:
                type: string
            fetchLastLevelOnly:
              type: boolean
            maxLevel:
              type: integer
              format: int32
            relationType:
              type: string
            rootEntity:
              $ref: '#/components/schemas/EntityId'
    EdgeTypeFilter:
      title: EdgeTypeFilter
      properties:
        edgeNameFilter:
          type: string
        edgeTypes:
          type: array
          items:
            type: string
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: EdgeTypeFilter
          type: object
          properties:
            edgeNameFilter:
              type: string
            edgeTypes:
              type: array
              items:
                type: string
    EfentoCoapDeviceTypeConfiguration:
      title: EfentoCoapDeviceTypeConfiguration
      type: object
    EmailDeliveryMethodNotificationTemplate:
      title: EmailDeliveryMethodNotificationTemplate
      properties:
        body:
          type: string
        enabled:
          type: boolean
        subject:
          type: string
      allOf:
        - $ref: '#/components/schemas/DeliveryMethodNotificationTemplate'
        - title: EmailDeliveryMethodNotificationTemplate
          type: object
          properties:
            body:
              type: string
            enabled:
              type: boolean
            subject:
              type: string
    EmailTwoFaAccountConfig:
      title: EmailTwoFaAccountConfig
      required:
        - email
      type: object
      properties:
        email:
          type: string
        useByDefault:
          type: boolean
    EmailTwoFaProviderConfig:
      title: EmailTwoFaProviderConfig
      properties:
        verificationCodeLifetime:
          type: integer
          format: int32
      allOf:
        - $ref: '#/components/schemas/TwoFaProviderConfig'
        - title: EmailTwoFaProviderConfig
          type: object
          properties:
            verificationCodeLifetime:
              type: integer
              format: int32
    EntitiesLimitNotificationRuleTriggerConfig:
      title: EntitiesLimitNotificationRuleTriggerConfig
      properties:
        entityTypes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ALARM
              - API_USAGE_STATE
              - ASSET
              - ASSET_PROFILE
              - CUSTOMER
              - DASHBOARD
              - DEVICE
              - DEVICE_PROFILE
              - EDGE
              - ENTITY_VIEW
              - NOTIFICATION
              - NOTIFICATION_REQUEST
              - NOTIFICATION_RULE
              - NOTIFICATION_TARGET
              - NOTIFICATION_TEMPLATE
              - OTA_PACKAGE
              - QUEUE
              - RPC
              - RULE_CHAIN
              - RULE_NODE
              - TB_RESOURCE
              - TENANT
              - TENANT_PROFILE
              - USER
              - WIDGETS_BUNDLE
              - WIDGET_TYPE
        threshold:
          maximum: 1
          exclusiveMaximum: false
          type: number
          format: float
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
      allOf:
        - $ref: '#/components/schemas/NotificationRuleTriggerConfig'
        - title: EntitiesLimitNotificationRuleTriggerConfig
          type: object
          properties:
            entityTypes:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - ALARM
                  - API_USAGE_STATE
                  - ASSET
                  - ASSET_PROFILE
                  - CUSTOMER
                  - DASHBOARD
                  - DEVICE
                  - DEVICE_PROFILE
                  - EDGE
                  - ENTITY_VIEW
                  - NOTIFICATION
                  - NOTIFICATION_REQUEST
                  - NOTIFICATION_RULE
                  - NOTIFICATION_TARGET
                  - NOTIFICATION_TEMPLATE
                  - OTA_PACKAGE
                  - QUEUE
                  - RPC
                  - RULE_CHAIN
                  - RULE_NODE
                  - TB_RESOURCE
                  - TENANT
                  - TENANT_PROFILE
                  - USER
                  - WIDGETS_BUNDLE
                  - WIDGET_TYPE
            threshold:
              maximum: 1
              exclusiveMaximum: false
              type: number
              format: float
            triggerType:
              type: string
              enum:
                - ALARM
                - ALARM_ASSIGNMENT
                - ALARM_COMMENT
                - API_USAGE_LIMIT
                - DEVICE_ACTIVITY
                - ENTITIES_LIMIT
                - ENTITY_ACTION
                - NEW_PLATFORM_VERSION
                - RATE_LIMITS
                - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    EntityActionNotificationRuleTriggerConfig:
      title: EntityActionNotificationRuleTriggerConfig
      properties:
        created:
          type: boolean
        deleted:
          type: boolean
        entityTypes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ALARM
              - API_USAGE_STATE
              - ASSET
              - ASSET_PROFILE
              - CUSTOMER
              - DASHBOARD
              - DEVICE
              - DEVICE_PROFILE
              - EDGE
              - ENTITY_VIEW
              - NOTIFICATION
              - NOTIFICATION_REQUEST
              - NOTIFICATION_RULE
              - NOTIFICATION_TARGET
              - NOTIFICATION_TEMPLATE
              - OTA_PACKAGE
              - QUEUE
              - RPC
              - RULE_CHAIN
              - RULE_NODE
              - TB_RESOURCE
              - TENANT
              - TENANT_PROFILE
              - USER
              - WIDGETS_BUNDLE
              - WIDGET_TYPE
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
        updated:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/NotificationRuleTriggerConfig'
        - title: EntityActionNotificationRuleTriggerConfig
          type: object
          properties:
            created:
              type: boolean
            deleted:
              type: boolean
            entityTypes:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - ALARM
                  - API_USAGE_STATE
                  - ASSET
                  - ASSET_PROFILE
                  - CUSTOMER
                  - DASHBOARD
                  - DEVICE
                  - DEVICE_PROFILE
                  - EDGE
                  - ENTITY_VIEW
                  - NOTIFICATION
                  - NOTIFICATION_REQUEST
                  - NOTIFICATION_RULE
                  - NOTIFICATION_TARGET
                  - NOTIFICATION_TEMPLATE
                  - OTA_PACKAGE
                  - QUEUE
                  - RPC
                  - RULE_CHAIN
                  - RULE_NODE
                  - TB_RESOURCE
                  - TENANT
                  - TENANT_PROFILE
                  - USER
                  - WIDGETS_BUNDLE
                  - WIDGET_TYPE
            triggerType:
              type: string
              enum:
                - ALARM
                - ALARM_ASSIGNMENT
                - ALARM_COMMENT
                - API_USAGE_LIMIT
                - DEVICE_ACTIVITY
                - ENTITIES_LIMIT
                - ENTITY_ACTION
                - NEW_PLATFORM_VERSION
                - RATE_LIMITS
                - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
            updated:
              type: boolean
    EntityCountQuery:
      title: EntityCountQuery
      type: object
      properties:
        entityFilter:
          $ref: '#/components/schemas/EntityFilter'
        keyFilters:
          type: array
          items:
            $ref: '#/components/schemas/KeyFilter'
    EntityData:
      title: EntityData
      type: object
      properties:
        aggLatest:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComparisonTsValue'
        entityId:
          $ref: '#/components/schemas/EntityId'
        latest:
          type: object
          additionalProperties:
            type: object
        timeseries:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/TsValue'
    EntityDataDiff:
      title: EntityDataDiff
      type: object
      properties:
        currentVersion:
          $ref: '#/components/schemas/EntityExportData«object»'
        otherVersion:
          $ref: '#/components/schemas/EntityExportData«object»'
    EntityDataInfo:
      title: EntityDataInfo
      type: object
      properties:
        hasAttributes:
          type: boolean
        hasCredentials:
          type: boolean
        hasRelations:
          type: boolean
    EntityDataPageLink:
      title: EntityDataPageLink
      type: object
      properties:
        dynamic:
          type: boolean
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        sortOrder:
          $ref: '#/components/schemas/EntityDataSortOrder'
        textSearch:
          type: string
    EntityDataQuery:
      title: EntityDataQuery
      type: object
      properties:
        entityFields:
          type: array
          items:
            $ref: '#/components/schemas/EntityKey'
        entityFilter:
          $ref: '#/components/schemas/EntityFilter'
        keyFilters:
          type: array
          items:
            $ref: '#/components/schemas/KeyFilter'
        latestValues:
          type: array
          items:
            $ref: '#/components/schemas/EntityKey'
        pageLink:
          $ref: '#/components/schemas/EntityDataPageLink'
    EntityDataSortOrder:
      title: EntityDataSortOrder
      type: object
      properties:
        direction:
          type: string
          enum:
            - ASC
            - DESC
        key:
          $ref: '#/components/schemas/EntityKey'
    EntityExportData«object»:
      title: EntityExportData«object»
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/AttributeExportData'
        entity:
          type: object
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        relations:
          type: array
          items:
            $ref: '#/components/schemas/EntityRelation'
    EntityFilter:
      title: EntityFilter
      type: object
    EntityId:
      title: EntityId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          example: DEVICE
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
    EntityInfo:
      title: EntityInfo
      type: object
      properties:
        id:
          description: 'JSON object with the entity Id. '
          $ref: '#/components/schemas/EntityId'
        name:
          type: string
          description: Entity Name
    EntityKey:
      title: EntityKey
      type: object
      properties:
        key:
          type: string
        type:
          type: string
          enum:
            - ALARM_FIELD
            - ATTRIBUTE
            - CLIENT_ATTRIBUTE
            - ENTITY_FIELD
            - SERVER_ATTRIBUTE
            - SHARED_ATTRIBUTE
            - TIME_SERIES
    EntityListFilter:
      title: EntityListFilter
      properties:
        entityList:
          type: array
          items:
            type: string
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: EntityListFilter
          type: object
          properties:
            entityList:
              type: array
              items:
                type: string
            entityType:
              type: string
              enum:
                - ALARM
                - API_USAGE_STATE
                - ASSET
                - ASSET_PROFILE
                - CUSTOMER
                - DASHBOARD
                - DEVICE
                - DEVICE_PROFILE
                - EDGE
                - ENTITY_VIEW
                - NOTIFICATION
                - NOTIFICATION_REQUEST
                - NOTIFICATION_RULE
                - NOTIFICATION_TARGET
                - NOTIFICATION_TEMPLATE
                - OTA_PACKAGE
                - QUEUE
                - RPC
                - RULE_CHAIN
                - RULE_NODE
                - TB_RESOURCE
                - TENANT
                - TENANT_PROFILE
                - USER
                - WIDGETS_BUNDLE
                - WIDGET_TYPE
    EntityLoadError:
      title: EntityLoadError
      type: object
      properties:
        message:
          type: string
        source:
          $ref: '#/components/schemas/EntityId'
        target:
          $ref: '#/components/schemas/EntityId'
        type:
          type: string
    EntityNameFilter:
      title: EntityNameFilter
      properties:
        entityNameFilter:
          type: string
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: EntityNameFilter
          type: object
          properties:
            entityNameFilter:
              type: string
            entityType:
              type: string
              enum:
                - ALARM
                - API_USAGE_STATE
                - ASSET
                - ASSET_PROFILE
                - CUSTOMER
                - DASHBOARD
                - DEVICE
                - DEVICE_PROFILE
                - EDGE
                - ENTITY_VIEW
                - NOTIFICATION
                - NOTIFICATION_REQUEST
                - NOTIFICATION_RULE
                - NOTIFICATION_TARGET
                - NOTIFICATION_TEMPLATE
                - OTA_PACKAGE
                - QUEUE
                - RPC
                - RULE_CHAIN
                - RULE_NODE
                - TB_RESOURCE
                - TENANT
                - TENANT_PROFILE
                - USER
                - WIDGETS_BUNDLE
                - WIDGET_TYPE
    EntityRelation:
      title: EntityRelation
      type: object
      properties:
        from:
          description: JSON object with [from] Entity Id.
          $ref: '#/components/schemas/EntityId'
          readOnly: true
        to:
          description: JSON object with [to] Entity Id.
          $ref: '#/components/schemas/EntityId'
          readOnly: true
        type:
          type: string
          description: String value of relation type.
          example: Contains
        typeGroup:
          type: string
          description: Represents the type group of the relation.
          example: COMMON
          enum:
            - COMMON
            - DASHBOARD
            - EDGE
            - EDGE_AUTO_ASSIGN_RULE_CHAIN
            - RULE_CHAIN
            - RULE_NODE
        additionalInfo:
          description: Additional parameters of the relation
          $ref: '#/components/schemas/JsonNode'
    EntityRelationInfo:
      title: EntityRelationInfo
      type: object
      properties:
        from:
          description: JSON object with [from] Entity Id.
          $ref: '#/components/schemas/EntityId'
          readOnly: true
        to:
          description: JSON object with [to] Entity Id.
          $ref: '#/components/schemas/EntityId'
          readOnly: true
        type:
          type: string
          description: String value of relation type.
          example: Contains
        typeGroup:
          type: string
          description: Represents the type group of the relation.
          example: COMMON
          enum:
            - COMMON
            - DASHBOARD
            - EDGE
            - EDGE_AUTO_ASSIGN_RULE_CHAIN
            - RULE_CHAIN
            - RULE_NODE
        additionalInfo:
          description: Additional parameters of the relation
          $ref: '#/components/schemas/JsonNode'
        fromName:
          type: string
          description: Name of the entity for [from] direction.
          readOnly: true
          example: A4B72CCDFF33
        toName:
          type: string
          description: Name of the entity for [to] direction.
          readOnly: true
          example: A4B72CCDFF35
    EntityRelationsQuery:
      title: EntityRelationsQuery
      type: object
      properties:
        filters:
          type: array
          description: Main filters.
          items:
            $ref: '#/components/schemas/RelationEntityTypeFilter'
        parameters:
          description: Main search parameters.
          $ref: '#/components/schemas/RelationsSearchParameters'
    EntitySubtype:
      title: EntitySubtype
      type: object
      properties:
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        tenantId:
          $ref: '#/components/schemas/TenantId'
        type:
          type: string
    EntityTypeFilter:
      title: EntityTypeFilter
      properties:
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: EntityTypeFilter
          type: object
          properties:
            entityType:
              type: string
              enum:
                - ALARM
                - API_USAGE_STATE
                - ASSET
                - ASSET_PROFILE
                - CUSTOMER
                - DASHBOARD
                - DEVICE
                - DEVICE_PROFILE
                - EDGE
                - ENTITY_VIEW
                - NOTIFICATION
                - NOTIFICATION_REQUEST
                - NOTIFICATION_RULE
                - NOTIFICATION_TARGET
                - NOTIFICATION_TEMPLATE
                - OTA_PACKAGE
                - QUEUE
                - RPC
                - RULE_CHAIN
                - RULE_NODE
                - TB_RESOURCE
                - TENANT
                - TENANT_PROFILE
                - USER
                - WIDGETS_BUNDLE
                - WIDGET_TYPE
    EntityTypeLoadResult:
      title: EntityTypeLoadResult
      type: object
      properties:
        created:
          type: integer
          format: int32
        deleted:
          type: integer
          format: int32
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        updated:
          type: integer
          format: int32
    EntityTypeVersionCreateConfig:
      title: EntityTypeVersionCreateConfig
      type: object
      properties:
        allEntities:
          type: boolean
        entityIds:
          type: array
          items:
            type: string
            format: uuid
        saveAttributes:
          type: boolean
        saveCredentials:
          type: boolean
        saveRelations:
          type: boolean
        syncStrategy:
          type: string
          enum:
            - MERGE
            - OVERWRITE
    EntityTypeVersionLoadConfig:
      title: EntityTypeVersionLoadConfig
      type: object
      properties:
        findExistingEntityByName:
          type: boolean
        loadAttributes:
          type: boolean
        loadCredentials:
          type: boolean
        loadRelations:
          type: boolean
        removeOtherEntities:
          type: boolean
    EntityTypeVersionLoadRequest:
      title: EntityTypeVersionLoadRequest
      properties:
        entityTypes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EntityTypeVersionLoadConfig'
        type:
          type: string
          enum:
            - ENTITY_TYPE
            - SINGLE_ENTITY
        versionId:
          type: string
      allOf:
        - $ref: '#/components/schemas/VersionLoadRequest'
        - title: EntityTypeVersionLoadRequest
          type: object
          properties:
            entityTypes:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/EntityTypeVersionLoadConfig'
            type:
              type: string
              enum:
                - ENTITY_TYPE
                - SINGLE_ENTITY
            versionId:
              type: string
    EntityVersion:
      title: EntityVersion
      type: object
      properties:
        author:
          type: string
        id:
          type: string
        name:
          type: string
        timestamp:
          type: integer
          format: int64
    EntityView:
      title: EntityView
      required:
        - name
        - type
      type: object
      properties:
        id:
          description: JSON object with the Entity View Id. Specify this field to update the Entity View. Referencing non-existing Entity View Id will cause error. Omit this field to create new Entity View.
          $ref: '#/components/schemas/EntityViewId'
        createdTime:
          type: integer
          description: Timestamp of the Entity View creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id. Use 'assignEntityViewToCustomer' to change the Customer Id.
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        name:
          type: string
          description: Entity View name
          example: A4B72CCDFF33
        type:
          type: string
          description: Device Profile Name
          example: Temperature Sensor
        entityId:
          description: JSON object with the referenced Entity Id (Device or Asset).
          $ref: '#/components/schemas/EntityId'
        keys:
          description: Set of telemetry and attribute keys to expose via Entity View.
          $ref: '#/components/schemas/TelemetryEntityView'
        startTimeMs:
          type: integer
          description: Represents the start time of the interval that is used to limit access to target device telemetry. Customer will not be able to see entity telemetry that is outside the specified interval;
          format: int64
        endTimeMs:
          type: integer
          description: Represents the end time of the interval that is used to limit access to target device telemetry. Customer will not be able to see entity telemetry that is outside the specified interval;
          format: int64
        additionalInfo:
          description: Additional parameters of the device
          $ref: '#/components/schemas/JsonNode'
    EntityViewId:
      title: EntityViewId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: ENTITY_VIEW
          enum:
            - ENTITY_VIEW
    EntityViewInfo:
      title: EntityViewInfo
      required:
        - name
        - type
      type: object
      properties:
        id:
          description: JSON object with the Entity View Id. Specify this field to update the Entity View. Referencing non-existing Entity View Id will cause error. Omit this field to create new Entity View.
          $ref: '#/components/schemas/EntityViewId'
        createdTime:
          type: integer
          description: Timestamp of the Entity View creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with Customer Id. Use 'assignEntityViewToCustomer' to change the Customer Id.
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        name:
          type: string
          description: Entity View name
          example: A4B72CCDFF33
        type:
          type: string
          description: Device Profile Name
          example: Temperature Sensor
        entityId:
          description: JSON object with the referenced Entity Id (Device or Asset).
          $ref: '#/components/schemas/EntityId'
        keys:
          description: Set of telemetry and attribute keys to expose via Entity View.
          $ref: '#/components/schemas/TelemetryEntityView'
        startTimeMs:
          type: integer
          description: Represents the start time of the interval that is used to limit access to target device telemetry. Customer will not be able to see entity telemetry that is outside the specified interval;
          format: int64
        endTimeMs:
          type: integer
          description: Represents the end time of the interval that is used to limit access to target device telemetry. Customer will not be able to see entity telemetry that is outside the specified interval;
          format: int64
        additionalInfo:
          description: Additional parameters of the device
          $ref: '#/components/schemas/JsonNode'
        customerTitle:
          type: string
          description: Title of the Customer that owns the entity view.
          readOnly: true
        customerIsPublic:
          type: boolean
          description: Indicates special 'Public' Customer that is auto-generated to use the entity view on public dashboards.
          readOnly: true
          example: false
    EntityViewSearchQuery:
      title: EntityViewSearchQuery
      type: object
      properties:
        relationType:
          type: string
          description: Type of the relation between root entity and device (e.g. 'Contains' or 'Manages').
        entityViewTypes:
          type: array
          description: Array of entity view types to filter the related entities (e.g. 'Temperature Sensor', 'Smoke Sensor').
          items:
            type: string
        parameters:
          description: Main search parameters.
          $ref: '#/components/schemas/RelationsSearchParameters'
    EntityViewSearchQueryFilter:
      title: EntityViewSearchQueryFilter
      properties:
        direction:
          type: string
          enum:
            - FROM
            - TO
        entityViewTypes:
          type: array
          items:
            type: string
        fetchLastLevelOnly:
          type: boolean
        maxLevel:
          type: integer
          format: int32
        relationType:
          type: string
        rootEntity:
          $ref: '#/components/schemas/EntityId'
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: EntityViewSearchQueryFilter
          type: object
          properties:
            direction:
              type: string
              enum:
                - FROM
                - TO
            entityViewTypes:
              type: array
              items:
                type: string
            fetchLastLevelOnly:
              type: boolean
            maxLevel:
              type: integer
              format: int32
            relationType:
              type: string
            rootEntity:
              $ref: '#/components/schemas/EntityId'
    EntityViewTypeFilter:
      title: EntityViewTypeFilter
      properties:
        entityViewNameFilter:
          type: string
        entityViewTypes:
          type: array
          items:
            type: string
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: EntityViewTypeFilter
          type: object
          properties:
            entityViewNameFilter:
              type: string
            entityViewTypes:
              type: array
              items:
                type: string
    ErrorEventFilter:
      title: ErrorEventFilter
      properties:
        notEmpty:
          type: boolean
        eventType:
          type: string
          description: String value representing the event type
          example: STATS
          enum:
            - DEBUG_RULE_CHAIN
            - DEBUG_RULE_NODE
            - ERROR
            - LC_EVENT
            - STATS
        server:
          type: string
          description: String value representing the server name, identifier or ip address where the platform is running
          example: ip-172-31-24-152
        method:
          type: string
          description: String value representing the method name when the error happened
          example: onClusterEventMsg
        errorStr:
          type: string
          description: The case insensitive 'contains' filter based on error message
          example: not present in the DB
      allOf:
        - $ref: '#/components/schemas/EventFilter'
        - title: ErrorEventFilter
          required:
            - eventType
          type: object
          properties:
            notEmpty:
              type: boolean
            eventType:
              type: string
              description: String value representing the event type
              example: STATS
              enum:
                - DEBUG_RULE_CHAIN
                - DEBUG_RULE_NODE
                - ERROR
                - LC_EVENT
                - STATS
            server:
              type: string
              description: String value representing the server name, identifier or ip address where the platform is running
              example: ip-172-31-24-152
            method:
              type: string
              description: String value representing the method name when the error happened
              example: onClusterEventMsg
            errorStr:
              type: string
              description: The case insensitive 'contains' filter based on error message
              example: not present in the DB
    EscalatedNotificationRuleRecipientsConfig:
      title: EscalatedNotificationRuleRecipientsConfig
      required:
        - triggerType
      type: object
      properties:
        escalationTable:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              format: uuid
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    EventFilter:
      title: EventFilter
      required:
        - eventType
      type: object
      properties:
        notEmpty:
          type: boolean
        eventType:
          type: string
          description: String value representing the event type
          example: STATS
          enum:
            - DEBUG_RULE_CHAIN
            - DEBUG_RULE_NODE
            - ERROR
            - LC_EVENT
            - STATS
    EventId:
      title: EventId
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: string
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
    EventInfo:
      title: EventInfo
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EventId'
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        type:
          type: string
          description: Event type
          example: STATS
        uid:
          type: string
          description: string
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityId:
          description: JSON object with Entity Id for which event is created.
          $ref: '#/components/schemas/EntityId'
          readOnly: true
        body:
          description: Event body.
          $ref: '#/components/schemas/JsonNode'
        createdTime:
          type: integer
          description: Timestamp of the event creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
    FeaturesInfo:
      title: FeaturesInfo
      type: object
      properties:
        emailEnabled:
          type: boolean
        notificationEnabled:
          type: boolean
        oauthEnabled:
          type: boolean
        smsEnabled:
          type: boolean
        twoFaEnabled:
          type: boolean
    FilterPredicateValue«boolean»:
      title: FilterPredicateValue«boolean»
      type: object
      properties:
        defaultValue:
          type: boolean
        dynamicValue:
          $ref: '#/components/schemas/DynamicValue«boolean»'
        userValue:
          type: boolean
    FilterPredicateValue«double»:
      title: FilterPredicateValue«double»
      type: object
      properties:
        defaultValue:
          type: number
          format: double
        dynamicValue:
          $ref: '#/components/schemas/DynamicValue«double»'
        userValue:
          type: number
          format: double
    FilterPredicateValue«int»:
      title: FilterPredicateValue«int»
      type: object
      properties:
        defaultValue:
          type: integer
          format: int32
        dynamicValue:
          $ref: '#/components/schemas/DynamicValue«int»'
        userValue:
          type: integer
          format: int32
    FilterPredicateValue«long»:
      title: FilterPredicateValue«long»
      type: object
      properties:
        defaultValue:
          type: integer
          format: int64
        dynamicValue:
          $ref: '#/components/schemas/DynamicValue«long»'
        userValue:
          type: integer
          format: int64
    FilterPredicateValue«string»:
      title: FilterPredicateValue«string»
      type: object
      properties:
        defaultValue:
          type: string
        dynamicValue:
          $ref: '#/components/schemas/DynamicValue«string»'
        userValue:
          type: string
    HasId«object»:
      title: HasId«object»
      type: object
      properties:
        id:
          type: object
    HomeDashboard:
      title: HomeDashboard
      required:
        - title
      type: object
      properties:
        createdTime:
          type: integer
          description: Timestamp of the dashboard creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Tenant Id of the dashboard can't be changed.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        name:
          type: string
          description: Same as title of the dashboard. Read-only field. Update the 'title' to change the 'name' of the dashboard.
          readOnly: true
        title:
          type: string
          description: Title of the dashboard.
        assignedCustomers:
          uniqueItems: true
          type: array
          description: List of assigned customers with their info.
          readOnly: true
          items:
            $ref: '#/components/schemas/ShortCustomerInfo'
        mobileHide:
          type: boolean
          description: Hide dashboard from mobile devices. Useful if the dashboard is not designed for small screens.
          readOnly: true
          example: false
        mobileOrder:
          type: integer
          description: Order on mobile devices. Useful to adjust sorting of the dashboards for mobile applications
          format: int32
          readOnly: true
        image:
          type: string
          description: Thumbnail picture for rendering of the dashboards in a grid view on mobile devices.
          readOnly: true
        configuration:
          description: 'JSON object with main configuration of the dashboard: layouts, widgets, aliases, etc. The JSON structure of the dashboard configuration is quite complex. The easiest way to learn it is to export existing dashboard to JSON.'
          $ref: '#/components/schemas/JsonNode'
        hideDashboardToolbar:
          type: boolean
          description: Hide dashboard toolbar flag. Useful for rendering dashboards on mobile.
          example: false
    HomeDashboardInfo:
      title: HomeDashboardInfo
      type: object
      properties:
        dashboardId:
          description: JSON object with the dashboard Id.
          $ref: '#/components/schemas/DashboardId'
        hideDashboardToolbar:
          type: boolean
          description: Hide dashboard toolbar flag. Useful for rendering dashboards on mobile.
          example: false
    ImageExportData:
      title: ImageExportData
      type: object
      properties:
        data:
          type: string
        fileName:
          type: string
        mediaType:
          type: string
        public:
          type: boolean
        publicResourceKey:
          type: string
        resourceKey:
          type: string
        title:
          type: string
    InputStream:
      title: InputStream
      type: object
    JWT Pair:
      title: JWT Pair
      type: object
      properties:
        scope:
          type: string
          enum:
            - CUSTOMER_USER
            - PRE_VERIFICATION_TOKEN
            - REFRESH_TOKEN
            - SYS_ADMIN
            - TENANT_ADMIN
        refreshToken:
          type: string
          description: The JWT Refresh Token. Used to get new JWT Access Token if old one has expired.
          example: AAB254FF67D..
        token:
          type: string
          description: The JWT Access Token. Used to perform API calls.
          example: AAB254FF67D..
    JWT Settings:
      title: JWT Settings
      type: object
      properties:
        tokenExpirationTime:
          type: integer
          description: The JWT will expire after seconds.
          format: int32
          example: 9000
        refreshTokenExpTime:
          type: integer
          description: The JWT can be refreshed during seconds.
          format: int32
          example: 604800
        tokenIssuer:
          type: string
          description: The JWT issuer.
          example: thingsboard.io
        tokenSigningKey:
          type: string
          description: The JWT key is used to sing token. Base64 encoded.
          example: cTU4WnNqemI2aU5wbWVjdm1vYXRzanhjNHRUcXliMjE=
    JsonNode:
      title: JsonNode
      type: object
    JsonTransportPayloadConfiguration:
      title: JsonTransportPayloadConfiguration
      allOf:
        - $ref: '#/components/schemas/TransportPayloadTypeConfiguration'
        - title: JsonTransportPayloadConfiguration
          type: object
    KeyFilter:
      title: KeyFilter
      type: object
      properties:
        key:
          $ref: '#/components/schemas/EntityKey'
        predicate:
          $ref: '#/components/schemas/KeyFilterPredicate'
        valueType:
          type: string
          enum:
            - BOOLEAN
            - DATE_TIME
            - NUMERIC
            - STRING
    KeyFilterPredicate:
      title: KeyFilterPredicate
      type: object
    LastVisitedDashboardInfo:
      title: LastVisitedDashboardInfo
      type: object
      properties:
        id:
          type: string
          description: JSON object with Dashboard id.
          format: uuid
          readOnly: true
        title:
          type: string
          description: Title of the dashboard.
        starred:
          type: boolean
          description: Starred flag
          example: false
        lastVisited:
          type: integer
          description: Last visit timestamp
          format: int64
    LifeCycleEventFilter:
      title: LifeCycleEventFilter
      properties:
        notEmpty:
          type: boolean
        eventType:
          type: string
          description: String value representing the event type
          example: STATS
          enum:
            - DEBUG_RULE_CHAIN
            - DEBUG_RULE_NODE
            - ERROR
            - LC_EVENT
            - STATS
        server:
          type: string
          description: String value representing the server name, identifier or ip address where the platform is running
          example: ip-172-31-24-152
        event:
          type: string
          description: String value representing the lifecycle event type
          example: STARTED
        status:
          type: string
          description: String value representing status of the lifecycle event
          enum:
            - Failure
            - Success
        errorStr:
          type: string
          description: The case insensitive 'contains' filter based on error message
          example: not present in the DB
      allOf:
        - $ref: '#/components/schemas/EventFilter'
        - title: LifeCycleEventFilter
          required:
            - eventType
          type: object
          properties:
            notEmpty:
              type: boolean
            eventType:
              type: string
              description: String value representing the event type
              example: STATS
              enum:
                - DEBUG_RULE_CHAIN
                - DEBUG_RULE_NODE
                - ERROR
                - LC_EVENT
                - STATS
            server:
              type: string
              description: String value representing the server name, identifier or ip address where the platform is running
              example: ip-172-31-24-152
            event:
              type: string
              description: String value representing the lifecycle event type
              example: STARTED
            status:
              type: string
              description: String value representing status of the lifecycle event
              enum:
                - Failure
                - Success
            errorStr:
              type: string
              description: The case insensitive 'contains' filter based on error message
              example: not present in the DB
    LoginRequest:
      title: LoginRequest
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
          description: User email
          example: tenant@thingsboard.org
        password:
          type: string
          description: User password
          example: tenant
    LoginResponse:
      title: LoginResponse
      required:
        - refreshToken
        - token
      type: object
      properties:
        token:
          type: string
          description: JWT token
          example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZW5hbnRAdGhpbmdzYm9hcmQub3JnIi...
        refreshToken:
          type: string
          description: Refresh token
          example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZW5hbnRAdGhpbmdzYm9hcmQub3JnIi...
    LwM2MBootstrapServerCredential:
      title: LwM2MBootstrapServerCredential
      type: object
    LwM2MServerSecurityConfigDefault:
      title: LwM2MServerSecurityConfigDefault
      type: object
      properties:
        shortServerId:
          type: integer
          description: Server short Id. Used as link to associate server Object Instance. This identifier uniquely identifies each LwM2M Server configured for the LwM2M Client. This Resource MUST be set when the Bootstrap-Server Resource has a value of 'false'. The values ID:0 and ID:65535 values MUST NOT be used for identifying the LwM2M Server.
          format: int32
          readOnly: true
          example: 123
        bootstrapServerIs:
          type: boolean
          description: Is Bootstrap Server or Lwm2m Server. The LwM2M Client MAY be configured to use one or more LwM2M Server Account(s). The LwM2M Client MUST have at most one LwM2M Bootstrap-Server Account. (*) The LwM2M client MUST have at least one LwM2M server account after completing the boot sequence specified.
          readOnly: true
          example: false
        host:
          type: string
          description: Host for 'No Security' mode
          readOnly: true
          example: 0.0.0.0
        port:
          type: integer
          description: 'Port for  Lwm2m Server: ''No Security'' mode: Lwm2m Server or Bootstrap Server'
          format: int32
          readOnly: true
        securityHost:
          type: string
          description: Host for 'Security' mode (DTLS)
          readOnly: true
          example: 0.0.0.0
        securityPort:
          type: integer
          description: 'Port for ''Security'' mode (DTLS): Lwm2m Server or Bootstrap Server'
          format: int32
          readOnly: true
        clientHoldOffTime:
          type: integer
          description: Client Hold Off Time. The number of seconds to wait before initiating a Client Initiated Bootstrap once the LwM2M Client has determined it should initiate this bootstrap mode. (This information is relevant for use with a Bootstrap-Server only.)
          format: int32
          readOnly: true
          example: 1
        serverPublicKey:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): RPK or X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEAZ0pSaGKHk/GrDaUDnQZpeEdGwX7m3Ws+U/kiVat
            +44sgk3c8g0LotfMpLlZJPhPwJ6ipXV+O1r7IZUjBs3LNA==
        serverCertificate:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MMIICODCCAd6gAwIBAgIUI88U1zowOdrxDK/dOV+36gJxI2MwCgYIKoZIzj0EAwIwejELMAkGA1UEBhMCVUs
            xEjAQBgNVBAgTCUt5aXYgY2l0eTENMAsGA1UEBxMES3lpdjEUMBIGA1UEChMLVGhpbmdzYm9hcmQxFzAVBgNVBAsMDkRFVkVMT1BFUl9URVNUMRkwFwYDVQQDDBBpbnRlcm1lZGlhdGVfY2EwMB4XDTIyMDEwOTEzMDMwMFoXDTI3MDEwODEzMDMwMFowFDESMBAGA1UEAxM
            JbG9jYWxob3N0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUO3vBo/JTv0eooY7XHiKAIVDoWKFqtrU7C6q8AIKqpLcqhCdW+haFeBOH3PjY6EwaWkY04Bir4oanU0s7tz2uKOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/
            BAIwADAdBgNVHQ4EFgQUEjc3Q4a0TxzP/3x3EV4fHxYUg0YwHwYDVR0jBBgwFoAUuSquGycMU6Q0SYNcbtSkSD3TfH0wLwYDVR0RBCgwJoIVbG9jYWxob3N0LmxvY2FsZG9tYWlugglsb2NhbGhvc3SCAiAtMAoGCCqGSM49BAMCA0gAMEUCIQD7dbZObyUaoDiNbX+9fUNp
            AWrD7N7XuJUwZ9FcN75R3gIgb2RNjDkHoyUyF1YajwkBk+7XmIXNClmizNJigj908mw=
        bootstrapServerAccountTimeout:
          type: integer
          description: Bootstrap Server Account Timeout (If the value is set to 0, or if this resource is not instantiated, the Bootstrap-Server Account lifetime is infinite.)
          format: int32
          readOnly: true
          example: 0
        lifetime:
          type: integer
          description: Specify the lifetime of the registration in seconds.
          format: int32
          readOnly: true
          example: 300
        defaultMinPeriod:
          type: integer
          description: The default value the LwM2M Client should use for the Minimum Period of an Observation in the absence of this parameter being included in an Observation. If this Resource doesn’t exist, the default value is 0.
          format: int32
          readOnly: true
          example: 1
        notifIfDisabled:
          type: boolean
          description: If true, the LwM2M Client stores “Notify” operations to the LwM2M Server while the LwM2M Server account is disabled or the LwM2M Client is offline. After the LwM2M Server account is enabled or the LwM2M Client is online, the LwM2M Client reports the stored “Notify” operations to the Server. If false, the LwM2M Client discards all the “Notify” operations or temporarily disables the Observe function while the LwM2M Server is disabled or the LwM2M Client is offline. The default value is true.
          readOnly: true
          example: true
        binding:
          type: string
          description: This Resource defines the transport binding configured for the LwM2M Client. If the LwM2M Client supports the binding specified in this Resource, the LwM2M Client MUST use that transport for the Current Binding Mode.
          readOnly: true
          example: U
    LwM2mInstance:
      title: LwM2mInstance
      type: object
      properties:
        id:
          type: integer
          description: LwM2M Instance id.
          format: int32
          example: 0
        resources:
          type: array
          description: LwM2M Resource observe.
          items:
            $ref: '#/components/schemas/LwM2mResourceObserve'
    LwM2mObject:
      title: LwM2mObject
      type: object
      properties:
        id:
          type: integer
          description: LwM2M Object id.
          format: int32
          example: 19
        keyId:
          type: string
          description: LwM2M Object key id.
          example: '19_1.0'
        name:
          type: string
          description: LwM2M Object name.
          example: BinaryAppDataContainer
        multiple:
          type: boolean
          description: LwM2M Object multiple.
          example: true
        mandatory:
          type: boolean
          description: LwM2M Object mandatory.
          example: false
        instances:
          type: array
          description: LwM2M Object instances.
          items:
            $ref: '#/components/schemas/LwM2mInstance'
    LwM2mResourceObserve:
      title: LwM2mResourceObserve
      type: object
      properties:
        id:
          type: integer
          description: LwM2M Resource Observe id.
          format: int32
          example: 0
        name:
          type: string
          description: LwM2M Resource Observe name.
          example: Data
        observe:
          type: boolean
          description: LwM2M Resource Observe observe.
          example: false
        attribute:
          type: boolean
          description: LwM2M Resource Observe attribute.
          example: false
        telemetry:
          type: boolean
          description: LwM2M Resource Observe telemetry.
          example: false
        keyName:
          type: string
          description: LwM2M Resource Observe key name.
          example: data
    Lwm2mDeviceProfileTransportConfiguration:
      title: Lwm2mDeviceProfileTransportConfiguration
      properties:
        bootstrap:
          type: array
          items:
            $ref: '#/components/schemas/LwM2MBootstrapServerCredential'
        bootstrapServerUpdateEnable:
          type: boolean
        clientLwM2mSettings:
          $ref: '#/components/schemas/OtherConfiguration'
        observeAttr:
          $ref: '#/components/schemas/TelemetryMappingConfiguration'
      allOf:
        - $ref: '#/components/schemas/DeviceProfileTransportConfiguration'
        - title: Lwm2mDeviceProfileTransportConfiguration
          type: object
          properties:
            bootstrap:
              type: array
              items:
                $ref: '#/components/schemas/LwM2MBootstrapServerCredential'
            bootstrapServerUpdateEnable:
              type: boolean
            clientLwM2mSettings:
              $ref: '#/components/schemas/OtherConfiguration'
            observeAttr:
              $ref: '#/components/schemas/TelemetryMappingConfiguration'
    Lwm2mDeviceTransportConfiguration:
      title: Lwm2mDeviceTransportConfiguration
      properties:
        edrxCycle:
          type: integer
          format: int64
        pagingTransmissionWindow:
          type: integer
          format: int64
        powerMode:
          type: string
          enum:
            - DRX
            - E_DRX
            - PSM
        psmActivityTimer:
          type: integer
          format: int64
      allOf:
        - $ref: '#/components/schemas/DeviceTransportConfiguration'
        - title: Lwm2mDeviceTransportConfiguration
          type: object
          properties:
            edrxCycle:
              type: integer
              format: int64
            pagingTransmissionWindow:
              type: integer
              format: int64
            powerMode:
              type: string
              enum:
                - DRX
                - E_DRX
                - PSM
            psmActivityTimer:
              type: integer
              format: int64
    Mapping:
      title: Mapping
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnMapping'
        delimiter:
          type: string
        header:
          type: boolean
        update:
          type: boolean
    MicrosoftTeamsDeliveryMethodNotificationTemplate:
      title: MicrosoftTeamsDeliveryMethodNotificationTemplate
      type: object
      properties:
        body:
          type: string
        button:
          $ref: '#/components/schemas/Button'
        enabled:
          type: boolean
        subject:
          type: string
        themeColor:
          type: string
    MicrosoftTeamsNotificationTargetConfig:
      title: MicrosoftTeamsNotificationTargetConfig
      properties:
        channelName:
          type: string
        description:
          type: string
        email:
          type: string
        firstName:
          type: string
        id:
          type: object
        lastName:
          type: string
        title:
          type: string
        webhookUrl:
          type: string
      allOf:
        - $ref: '#/components/schemas/NotificationTargetConfig'
        - title: MicrosoftTeamsNotificationTargetConfig
          required:
            - webhookUrl
          type: object
          properties:
            channelName:
              type: string
            description:
              type: string
            email:
              type: string
            firstName:
              type: string
            id:
              type: object
            lastName:
              type: string
            title:
              type: string
            webhookUrl:
              type: string
    MqttDeviceProfileTransportConfiguration:
      title: MqttDeviceProfileTransportConfiguration
      type: object
      properties:
        deviceAttributesSubscribeTopic:
          type: string
        deviceAttributesTopic:
          type: string
        deviceTelemetryTopic:
          type: string
        sendAckOnValidationException:
          type: boolean
        sparkplug:
          type: boolean
        sparkplugAttributesMetricNames:
          uniqueItems: true
          type: array
          items:
            type: string
        transportPayloadTypeConfiguration:
          $ref: '#/components/schemas/TransportPayloadTypeConfiguration'
    MqttDeviceTransportConfiguration:
      title: MqttDeviceTransportConfiguration
      allOf:
        - $ref: '#/components/schemas/DeviceTransportConfiguration'
        - title: MqttDeviceTransportConfiguration
          type: object
    NewPlatformVersionNotificationRuleTriggerConfig:
      title: NewPlatformVersionNotificationRuleTriggerConfig
      type: object
      properties:
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    NoSecLwM2MBootstrapServerCredential:
      title: NoSecLwM2MBootstrapServerCredential
      type: object
      properties:
        shortServerId:
          type: integer
          description: Server short Id. Used as link to associate server Object Instance. This identifier uniquely identifies each LwM2M Server configured for the LwM2M Client. This Resource MUST be set when the Bootstrap-Server Resource has a value of 'false'. The values ID:0 and ID:65535 values MUST NOT be used for identifying the LwM2M Server.
          format: int32
          readOnly: true
          example: 123
        bootstrapServerIs:
          type: boolean
          description: Is Bootstrap Server or Lwm2m Server. The LwM2M Client MAY be configured to use one or more LwM2M Server Account(s). The LwM2M Client MUST have at most one LwM2M Bootstrap-Server Account. (*) The LwM2M client MUST have at least one LwM2M server account after completing the boot sequence specified.
          readOnly: true
          example: false
        host:
          type: string
          description: Host for 'No Security' mode
          readOnly: true
          example: 0.0.0.0
        port:
          type: integer
          description: 'Port for  Lwm2m Server: ''No Security'' mode: Lwm2m Server or Bootstrap Server'
          format: int32
          readOnly: true
        clientHoldOffTime:
          type: integer
          description: Client Hold Off Time. The number of seconds to wait before initiating a Client Initiated Bootstrap once the LwM2M Client has determined it should initiate this bootstrap mode. (This information is relevant for use with a Bootstrap-Server only.)
          format: int32
          readOnly: true
          example: 1
        serverPublicKey:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): RPK or X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEAZ0pSaGKHk/GrDaUDnQZpeEdGwX7m3Ws+U/kiVat
            +44sgk3c8g0LotfMpLlZJPhPwJ6ipXV+O1r7IZUjBs3LNA==
        serverCertificate:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MMIICODCCAd6gAwIBAgIUI88U1zowOdrxDK/dOV+36gJxI2MwCgYIKoZIzj0EAwIwejELMAkGA1UEBhMCVUs
            xEjAQBgNVBAgTCUt5aXYgY2l0eTENMAsGA1UEBxMES3lpdjEUMBIGA1UEChMLVGhpbmdzYm9hcmQxFzAVBgNVBAsMDkRFVkVMT1BFUl9URVNUMRkwFwYDVQQDDBBpbnRlcm1lZGlhdGVfY2EwMB4XDTIyMDEwOTEzMDMwMFoXDTI3MDEwODEzMDMwMFowFDESMBAGA1UEAxM
            JbG9jYWxob3N0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUO3vBo/JTv0eooY7XHiKAIVDoWKFqtrU7C6q8AIKqpLcqhCdW+haFeBOH3PjY6EwaWkY04Bir4oanU0s7tz2uKOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/
            BAIwADAdBgNVHQ4EFgQUEjc3Q4a0TxzP/3x3EV4fHxYUg0YwHwYDVR0jBBgwFoAUuSquGycMU6Q0SYNcbtSkSD3TfH0wLwYDVR0RBCgwJoIVbG9jYWxob3N0LmxvY2FsZG9tYWlugglsb2NhbGhvc3SCAiAtMAoGCCqGSM49BAMCA0gAMEUCIQD7dbZObyUaoDiNbX+9fUNp
            AWrD7N7XuJUwZ9FcN75R3gIgb2RNjDkHoyUyF1YajwkBk+7XmIXNClmizNJigj908mw=
        bootstrapServerAccountTimeout:
          type: integer
          description: Bootstrap Server Account Timeout (If the value is set to 0, or if this resource is not instantiated, the Bootstrap-Server Account lifetime is infinite.)
          format: int32
          readOnly: true
          example: 0
        lifetime:
          type: integer
          description: Specify the lifetime of the registration in seconds.
          format: int32
          readOnly: true
          example: 300
        defaultMinPeriod:
          type: integer
          description: The default value the LwM2M Client should use for the Minimum Period of an Observation in the absence of this parameter being included in an Observation. If this Resource doesn’t exist, the default value is 0.
          format: int32
          readOnly: true
          example: 1
        notifIfDisabled:
          type: boolean
          description: If true, the LwM2M Client stores “Notify” operations to the LwM2M Server while the LwM2M Server account is disabled or the LwM2M Client is offline. After the LwM2M Server account is enabled or the LwM2M Client is online, the LwM2M Client reports the stored “Notify” operations to the Server. If false, the LwM2M Client discards all the “Notify” operations or temporarily disables the Observe function while the LwM2M Server is disabled or the LwM2M Client is offline. The default value is true.
          readOnly: true
          example: true
        binding:
          type: string
          description: This Resource defines the transport binding configured for the LwM2M Client. If the LwM2M Client supports the binding specified in this Resource, the LwM2M Client MUST use that transport for the Current Binding Mode.
          readOnly: true
          example: U
    NodeConnectionInfo:
      title: NodeConnectionInfo
      required:
        - fromIndex
        - toIndex
        - type
      type: object
      properties:
        fromIndex:
          type: integer
          description: Index of rule node in the 'nodes' array of the RuleChainMetaData. Indicates the 'from' part of the connection.
          format: int32
        toIndex:
          type: integer
          description: Index of rule node in the 'nodes' array of the RuleChainMetaData. Indicates the 'to' part of the connection.
          format: int32
        type:
          type: string
          description: Type of the relation. Typically indicated the result of processing by the 'from' rule node. For example, 'Success' or 'Failure'
    Notification:
      title: Notification
      type: object
      properties:
        additionalConfig:
          $ref: '#/components/schemas/JsonNode'
        createdTime:
          type: integer
          format: int64
        id:
          $ref: '#/components/schemas/NotificationId'
        info:
          $ref: '#/components/schemas/NotificationInfo'
        recipientId:
          $ref: '#/components/schemas/UserId'
        requestId:
          $ref: '#/components/schemas/NotificationRequestId'
        status:
          type: string
          enum:
            - READ
            - SENT
        subject:
          type: string
        text:
          type: string
        type:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - GENERAL
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
            - RULE_NODE
    NotificationDeliveryMethodConfig:
      title: NotificationDeliveryMethodConfig
      type: object
    NotificationId:
      title: NotificationId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: NOTIFICATION
          enum:
            - NOTIFICATION
    NotificationInfo:
      title: NotificationInfo
      type: object
      properties:
        stateEntityId:
          $ref: '#/components/schemas/EntityId'
    NotificationPref:
      title: NotificationPref
      required:
        - enabledDeliveryMethods
      type: object
      properties:
        enabled:
          type: boolean
        enabledDeliveryMethods:
          type: object
          additionalProperties:
            type: boolean
    NotificationRequest:
      title: NotificationRequest
      type: object
      properties:
        additionalConfig:
          $ref: '#/components/schemas/NotificationRequestConfig'
        createdTime:
          type: integer
          format: int64
        id:
          $ref: '#/components/schemas/NotificationRequestId'
        info:
          $ref: '#/components/schemas/NotificationInfo'
        originatorEntityId:
          $ref: '#/components/schemas/EntityId'
        ruleId:
          $ref: '#/components/schemas/NotificationRuleId'
        stats:
          $ref: '#/components/schemas/NotificationRequestStats'
        status:
          type: string
          enum:
            - PROCESSING
            - SCHEDULED
            - SENT
        targets:
          type: array
          items:
            type: string
            format: uuid
        template:
          $ref: '#/components/schemas/NotificationTemplate'
        templateId:
          $ref: '#/components/schemas/NotificationTemplateId'
        tenantId:
          $ref: '#/components/schemas/TenantId'
    NotificationRequestConfig:
      title: NotificationRequestConfig
      type: object
      properties:
        sendingDelayInSec:
          type: integer
          format: int32
    NotificationRequestId:
      title: NotificationRequestId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: NOTIFICATION_REQUEST
          enum:
            - NOTIFICATION_REQUEST
    NotificationRequestInfo:
      title: NotificationRequestInfo
      type: object
      properties:
        additionalConfig:
          $ref: '#/components/schemas/NotificationRequestConfig'
        createdTime:
          type: integer
          format: int64
        deliveryMethods:
          type: array
          items:
            type: string
            enum:
              - EMAIL
              - MICROSOFT_TEAMS
              - SLACK
              - SMS
              - WEB
        id:
          $ref: '#/components/schemas/NotificationRequestId'
        info:
          $ref: '#/components/schemas/NotificationInfo'
        originatorEntityId:
          $ref: '#/components/schemas/EntityId'
        ruleId:
          $ref: '#/components/schemas/NotificationRuleId'
        stats:
          $ref: '#/components/schemas/NotificationRequestStats'
        status:
          type: string
          enum:
            - PROCESSING
            - SCHEDULED
            - SENT
        targets:
          type: array
          items:
            type: string
            format: uuid
        template:
          $ref: '#/components/schemas/NotificationTemplate'
        templateId:
          $ref: '#/components/schemas/NotificationTemplateId'
        templateName:
          type: string
        tenantId:
          $ref: '#/components/schemas/TenantId'
    NotificationRequestPreview:
      title: NotificationRequestPreview
      type: object
      properties:
        processedTemplates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DeliveryMethodNotificationTemplate'
        recipientsCountByTarget:
          type: object
          additionalProperties:
            type: integer
            format: int32
        recipientsPreview:
          type: array
          items:
            type: string
        totalRecipientsCount:
          type: integer
          format: int32
    NotificationRequestStats:
      title: NotificationRequestStats
      type: object
      properties:
        error:
          type: string
        errors:
          type: object
          additionalProperties:
            type: object
        sent:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AtomicInteger'
    NotificationRule:
      title: NotificationRule
      required:
        - name
        - recipientsConfig
        - templateId
        - triggerConfig
        - triggerType
      type: object
      properties:
        additionalConfig:
          $ref: '#/components/schemas/NotificationRuleConfig'
        createdTime:
          type: integer
          format: int64
        enabled:
          type: boolean
        name:
          type: string
        recipientsConfig:
          $ref: '#/components/schemas/NotificationRuleRecipientsConfig'
        templateId:
          $ref: '#/components/schemas/NotificationTemplateId'
        tenantId:
          $ref: '#/components/schemas/TenantId'
        triggerConfig:
          $ref: '#/components/schemas/NotificationRuleTriggerConfig'
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    NotificationRuleConfig:
      title: NotificationRuleConfig
      type: object
      properties:
        description:
          type: string
    NotificationRuleId:
      title: NotificationRuleId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: NOTIFICATION_RULE
          enum:
            - NOTIFICATION_RULE
    NotificationRuleInfo:
      title: NotificationRuleInfo
      required:
        - name
        - recipientsConfig
        - templateId
        - triggerConfig
        - triggerType
      type: object
      properties:
        additionalConfig:
          $ref: '#/components/schemas/NotificationRuleConfig'
        createdTime:
          type: integer
          format: int64
        deliveryMethods:
          type: array
          items:
            type: string
            enum:
              - EMAIL
              - MICROSOFT_TEAMS
              - SLACK
              - SMS
              - WEB
        enabled:
          type: boolean
        name:
          type: string
        recipientsConfig:
          $ref: '#/components/schemas/NotificationRuleRecipientsConfig'
        templateId:
          $ref: '#/components/schemas/NotificationTemplateId'
        templateName:
          type: string
        tenantId:
          $ref: '#/components/schemas/TenantId'
        triggerConfig:
          $ref: '#/components/schemas/NotificationRuleTriggerConfig'
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    NotificationRuleRecipientsConfig:
      title: NotificationRuleRecipientsConfig
      required:
        - triggerType
      type: object
      properties:
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    NotificationRuleTriggerConfig:
      title: NotificationRuleTriggerConfig
      type: object
      properties:
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    NotificationSettings:
      title: NotificationSettings
      required:
        - deliveryMethodsConfigs
      type: object
      properties:
        deliveryMethodsConfigs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NotificationDeliveryMethodConfig'
    NotificationTarget:
      title: NotificationTarget
      required:
        - configuration
        - name
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/NotificationTargetConfig'
        createdTime:
          type: integer
          format: int64
        name:
          type: string
        tenantId:
          $ref: '#/components/schemas/TenantId'
    NotificationTargetConfig:
      title: NotificationTargetConfig
      type: object
      properties:
        description:
          type: string
    NotificationTemplate:
      title: NotificationTemplate
      required:
        - configuration
        - notificationType
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/NotificationTemplateConfig'
        createdTime:
          type: integer
          format: int64
        name:
          type: string
        notificationType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - GENERAL
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
            - RULE_NODE
        tenantId:
          $ref: '#/components/schemas/TenantId'
    NotificationTemplateConfig:
      title: NotificationTemplateConfig
      type: object
      properties:
        deliveryMethodsTemplates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DeliveryMethodNotificationTemplate'
    NotificationTemplateId:
      title: NotificationTemplateId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: NOTIFICATION_TEMPLATE
          enum:
            - NOTIFICATION_TEMPLATE
    NumericFilterPredicate:
      title: NumericFilterPredicate
      properties:
        operation:
          type: string
          enum:
            - EQUAL
            - GREATER
            - GREATER_OR_EQUAL
            - LESS
            - LESS_OR_EQUAL
            - NOT_EQUAL
        value:
          $ref: '#/components/schemas/FilterPredicateValue«double»'
      allOf:
        - $ref: '#/components/schemas/KeyFilterPredicate'
        - title: NumericFilterPredicate
          type: object
          properties:
            operation:
              type: string
              enum:
                - EQUAL
                - GREATER
                - GREATER_OR_EQUAL
                - LESS
                - LESS_OR_EQUAL
                - NOT_EQUAL
            value:
              $ref: '#/components/schemas/FilterPredicateValue«double»'
    OAuth2BasicMapperConfig:
      title: OAuth2BasicMapperConfig
      required:
        - tenantNameStrategy
      type: object
      properties:
        alwaysFullScreen:
          type: boolean
          description: Whether default dashboard should be open in full screen
          example: false
        customerNamePattern:
          type: string
          description: Customer name pattern. When creating a user on the first OAuth2 log in, if specified, customer name will be used to create or find existing customer in the platform and assign customerId to the user
        defaultDashboardName:
          type: string
          description: Name of the tenant's dashboard to set as default dashboard for newly created user
        emailAttributeKey:
          type: string
          description: Email attribute key of OAuth2 principal attributes. Must be specified for BASIC mapper type and cannot be specified for GITHUB type
        firstNameAttributeKey:
          type: string
          description: First name attribute key
        lastNameAttributeKey:
          type: string
          description: Last name attribute key
        tenantNamePattern:
          type: string
          description: Tenant name pattern for CUSTOM naming strategy. OAuth2 attributes in the pattern can be used by enclosing attribute key in '%{' and '}'
          example: '%{email}'
        tenantNameStrategy:
          type: string
          description: Tenant naming strategy. For DOMAIN type, domain for tenant name will be taken from the email (substring before '@')
          enum:
            - CUSTOM
            - DOMAIN
            - EMAIL
    OAuth2ClientInfo:
      title: OAuth2ClientInfo
      type: object
      properties:
        icon:
          type: string
          description: Name of the icon, displayed on OAuth2 log in button
          example: github-logo
        name:
          type: string
          description: OAuth2 client name
          example: GitHub
        url:
          type: string
          description: URI for OAuth2 log in. On HTTP GET request to this URI, it redirects to the OAuth2 provider page
          example: /oauth2/authorization/8352f191-2b4d-11ec-9ed1-cbf57c026ecc
    OAuth2ClientRegistrationTemplate:
      title: OAuth2ClientRegistrationTemplate
      required:
        - providerId
      type: object
      properties:
        accessTokenUri:
          type: string
          description: Default access token URI of the OAuth2 provider
        additionalInfo:
          $ref: '#/components/schemas/JsonNode'
        authorizationUri:
          type: string
          description: Default authorization URI of the OAuth2 provider
        clientAuthenticationMethod:
          type: string
          description: 'Default client authentication method to use: ''BASIC'' or ''POST'''
        comment:
          type: string
          description: Comment for OAuth2 provider
        createdTime:
          type: integer
          format: int64
        helpLink:
          type: string
          description: Help link for OAuth2 provider
        id:
          $ref: '#/components/schemas/OAuth2ClientRegistrationTemplateId'
        jwkSetUri:
          type: string
          description: Default JSON Web Key URI of the OAuth2 provider
        loginButtonIcon:
          type: string
          description: Default log in button icon for OAuth2 provider
        loginButtonLabel:
          type: string
          description: Default OAuth2 provider label
        mapperConfig:
          description: Default config for mapping OAuth2 log in response to platform entities
          $ref: '#/components/schemas/OAuth2MapperConfig'
        name:
          type: string
        providerId:
          type: string
          description: OAuth2 provider identifier (e.g. its name)
        scope:
          type: array
          description: Default OAuth scopes that will be requested from OAuth2 platform
          items:
            type: string
        userInfoUri:
          type: string
          description: Default user info URI of the OAuth2 provider
        userNameAttributeName:
          type: string
          description: Default name of the username attribute in OAuth2 provider log in response
    OAuth2ClientRegistrationTemplateId:
      title: OAuth2ClientRegistrationTemplateId
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: string
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
    OAuth2CustomMapperConfig:
      title: OAuth2CustomMapperConfig
      type: object
      properties:
        password:
          type: string
        sendToken:
          type: boolean
        url:
          type: string
        username:
          type: string
    OAuth2DomainInfo:
      title: OAuth2DomainInfo
      required:
        - name
        - scheme
      type: object
      properties:
        name:
          type: string
          description: Domain name. Cannot be empty
        scheme:
          type: string
          description: Domain scheme. Mixed scheme means than both HTTP and HTTPS are going to be used
          enum:
            - HTTP
            - HTTPS
            - MIXED
    OAuth2Info:
      title: OAuth2Info
      required:
        - oauth2ParamsInfos
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether OAuth2 settings are enabled or not
          example: false
        oauth2ParamsInfos:
          type: array
          description: List of configured OAuth2 clients. Cannot contain null values
          items:
            $ref: '#/components/schemas/OAuth2ParamsInfo'
    OAuth2MapperConfig:
      title: OAuth2MapperConfig
      required:
        - type
      type: object
      properties:
        activateUser:
          type: boolean
          description: Whether user credentials should be activated when user is created after successful authentication
          example: false
        allowUserCreation:
          type: boolean
          description: Whether user should be created if not yet present on the platform after successful authentication
          example: false
        basic:
          description: Mapper config for BASIC and GITHUB mapper types
          $ref: '#/components/schemas/OAuth2BasicMapperConfig'
        custom:
          description: Mapper config for CUSTOM mapper type
          $ref: '#/components/schemas/OAuth2CustomMapperConfig'
        type:
          type: string
          description: Type of OAuth2 mapper. Depending on this param, different mapper config fields must be specified
          enum:
            - APPLE
            - BASIC
            - CUSTOM
            - GITHUB
    OAuth2MobileInfo:
      title: OAuth2MobileInfo
      required:
        - appSecret
        - pkgName
      type: object
      properties:
        appSecret:
          type: string
          description: Application secret. The length must be at least 16 characters
        pkgName:
          type: string
          description: Application package name. Cannot be empty
    OAuth2ParamsInfo:
      title: OAuth2ParamsInfo
      required:
        - clientRegistrations
        - domainInfos
        - mobileInfos
      type: object
      properties:
        clientRegistrations:
          type: array
          description: List of OAuth2 provider settings. Cannot be empty
          items:
            $ref: '#/components/schemas/OAuth2RegistrationInfo'
        domainInfos:
          type: array
          description: List of configured domains where OAuth2 platform will redirect a user after successful authentication. Cannot be empty. There have to be only one domain with specific name with scheme type 'MIXED'. Configured domains with the same name must have different scheme types
          items:
            $ref: '#/components/schemas/OAuth2DomainInfo'
        mobileInfos:
          type: array
          description: Mobile applications settings. Application package name must be unique within the list
          items:
            $ref: '#/components/schemas/OAuth2MobileInfo'
    OAuth2RegistrationInfo:
      title: OAuth2RegistrationInfo
      required:
        - accessTokenUri
        - additionalInfo
        - authorizationUri
        - clientAuthenticationMethod
        - clientId
        - clientSecret
        - loginButtonLabel
        - mapperConfig
        - scope
      type: object
      properties:
        accessTokenUri:
          type: string
          description: Access token URI of the OAuth2 provider. Cannot be empty
        additionalInfo:
          description: Additional info of OAuth2 client (e.g. providerName)
          $ref: '#/components/schemas/JsonNode'
        authorizationUri:
          type: string
          description: Authorization URI of the OAuth2 provider. Cannot be empty
        clientAuthenticationMethod:
          type: string
          description: 'Client authentication method to use: ''BASIC'' or ''POST''. Cannot be empty'
        clientId:
          type: string
          description: OAuth2 client ID. Cannot be empty
        clientSecret:
          type: string
          description: OAuth2 client secret. Cannot be empty
        jwkSetUri:
          type: string
          description: JSON Web Key URI of the OAuth2 provider
        loginButtonIcon:
          type: string
          description: Log in button icon for OAuth2 provider
        loginButtonLabel:
          type: string
          description: OAuth2 provider label. Cannot be empty
        mapperConfig:
          description: Config for mapping OAuth2 log in response to platform entities
          $ref: '#/components/schemas/OAuth2MapperConfig'
        platforms:
          type: array
          description: List of platforms for which usage of the OAuth2 client is allowed (empty for all allowed)
          items:
            type: string
            enum:
              - ANDROID
              - IOS
              - WEB
        scope:
          type: array
          description: OAuth scopes that will be requested from OAuth2 platform. Cannot be empty
          items:
            type: string
        userInfoUri:
          type: string
          description: User info URI of the OAuth2 provider
        userNameAttributeName:
          type: string
          description: Name of the username attribute in OAuth2 provider response. Cannot be empty
    ObjectAttributes:
      title: ObjectAttributes
      type: object
      properties:
        dim:
          type: integer
          format: int64
        gt:
          type: number
          format: double
        lt:
          type: number
          format: double
        pmax:
          type: integer
          format: int64
        pmin:
          type: integer
          format: int64
        st:
          type: number
          format: double
        ver:
          type: string
    ObjectNode:
      title: ObjectNode
      type: object
    OriginatorEntityOwnerUsersFilter:
      title: OriginatorEntityOwnerUsersFilter
      type: object
    OtaPackage:
      title: OtaPackage
      type: object
      properties:
        id:
          description: JSON object with the ota package Id. Specify existing ota package Id to update the ota package. Referencing non-existing ota package id will cause error. Omit this field to create new ota package.
          $ref: '#/components/schemas/OtaPackageId'
        createdTime:
          type: integer
          description: Timestamp of the ota package creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Tenant Id of the ota package can't be changed.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        deviceProfileId:
          description: JSON object with Device Profile Id. Device Profile Id of the ota package can't be changed.
          $ref: '#/components/schemas/DeviceProfileId'
          readOnly: true
        type:
          type: string
          description: OTA Package type.
          readOnly: true
          example: FIRMWARE
          enum:
            - FIRMWARE
            - SOFTWARE
        title:
          type: string
          description: OTA Package title.
          readOnly: true
          example: fw
        version:
          type: string
          description: OTA Package version.
          readOnly: true
          example: '1.0'
        tag:
          type: string
          description: OTA Package tag.
          readOnly: true
          example: fw_1.0
        url:
          type: string
          description: OTA Package url.
          readOnly: true
          example: http://thingsboard.org/fw/1
        hasData:
          type: boolean
          description: Indicates OTA Package 'has data'. Field is returned from DB ('true' if data exists or url is set).  If OTA Package 'has data' is 'false' we can not assign the OTA Package to the Device or Device Profile.
          readOnly: true
          example: true
        fileName:
          type: string
          description: OTA Package file name.
          readOnly: true
          example: fw_1.0
        contentType:
          type: string
          description: OTA Package content type.
          readOnly: true
          example: APPLICATION_OCTET_STREAM
        checksumAlgorithm:
          type: string
          description: OTA Package checksum algorithm.
          readOnly: true
          example: CRC32
          enum:
            - CRC32
            - MD5
            - MURMUR3_128
            - MURMUR3_32
            - SHA256
            - SHA384
            - SHA512
        checksum:
          type: string
          description: OTA Package checksum.
          readOnly: true
          example: '0xd87f7e0c'
        dataSize:
          type: integer
          description: OTA Package data size.
          format: int64
          readOnly: true
          example: 8
        data:
          description: OTA Package data.
          $ref: '#/components/schemas/ByteBuffer'
          readOnly: true
        additionalInfo:
          description: OTA Package description.
          $ref: '#/components/schemas/JsonNode'
          example: Description for the OTA Package fw_1.0
    OtaPackageId:
      title: OtaPackageId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: OTA_PACKAGE
          enum:
            - OTA_PACKAGE
    OtaPackageInfo:
      title: OtaPackageInfo
      type: object
      properties:
        id:
          description: JSON object with the ota package Id. Specify existing ota package Id to update the ota package. Referencing non-existing ota package id will cause error. Omit this field to create new ota package.
          $ref: '#/components/schemas/OtaPackageId'
        createdTime:
          type: integer
          description: Timestamp of the ota package creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Tenant Id of the ota package can't be changed.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        deviceProfileId:
          description: JSON object with Device Profile Id. Device Profile Id of the ota package can't be changed.
          $ref: '#/components/schemas/DeviceProfileId'
          readOnly: true
        type:
          type: string
          description: OTA Package type.
          readOnly: true
          example: FIRMWARE
          enum:
            - FIRMWARE
            - SOFTWARE
        title:
          type: string
          description: OTA Package title.
          readOnly: true
          example: fw
        version:
          type: string
          description: OTA Package version.
          readOnly: true
          example: '1.0'
        tag:
          type: string
          description: OTA Package tag.
          readOnly: true
          example: fw_1.0
        url:
          type: string
          description: OTA Package url.
          readOnly: true
          example: http://thingsboard.org/fw/1
        hasData:
          type: boolean
          description: Indicates OTA Package 'has data'. Field is returned from DB ('true' if data exists or url is set).  If OTA Package 'has data' is 'false' we can not assign the OTA Package to the Device or Device Profile.
          readOnly: true
          example: true
        fileName:
          type: string
          description: OTA Package file name.
          readOnly: true
          example: fw_1.0
        contentType:
          type: string
          description: OTA Package content type.
          readOnly: true
          example: APPLICATION_OCTET_STREAM
        checksumAlgorithm:
          type: string
          description: OTA Package checksum algorithm.
          readOnly: true
          example: CRC32
          enum:
            - CRC32
            - MD5
            - MURMUR3_128
            - MURMUR3_32
            - SHA256
            - SHA384
            - SHA512
        checksum:
          type: string
          description: OTA Package checksum.
          readOnly: true
          example: '0xd87f7e0c'
        dataSize:
          type: integer
          description: OTA Package data size.
          format: int64
          readOnly: true
          example: 8
        additionalInfo:
          description: OTA Package description.
          $ref: '#/components/schemas/JsonNode'
          example: Description for the OTA Package fw_1.0
    OtherConfiguration:
      title: OtherConfiguration
      type: object
      properties:
        clientOnlyObserveAfterConnect:
          type: integer
          format: int32
        edrxCycle:
          type: integer
          format: int64
        fwUpdateResource:
          type: string
        fwUpdateStrategy:
          type: integer
          format: int32
        pagingTransmissionWindow:
          type: integer
          format: int64
        powerMode:
          type: string
          enum:
            - DRX
            - E_DRX
            - PSM
        psmActivityTimer:
          type: integer
          format: int64
        swUpdateResource:
          type: string
        swUpdateStrategy:
          type: integer
          format: int32
    PSKLwM2MBootstrapServerCredential:
      title: PSKLwM2MBootstrapServerCredential
      properties:
        shortServerId:
          type: integer
          description: Server short Id. Used as link to associate server Object Instance. This identifier uniquely identifies each LwM2M Server configured for the LwM2M Client. This Resource MUST be set when the Bootstrap-Server Resource has a value of 'false'. The values ID:0 and ID:65535 values MUST NOT be used for identifying the LwM2M Server.
          format: int32
          readOnly: true
          example: 123
        bootstrapServerIs:
          type: boolean
          description: Is Bootstrap Server or Lwm2m Server. The LwM2M Client MAY be configured to use one or more LwM2M Server Account(s). The LwM2M Client MUST have at most one LwM2M Bootstrap-Server Account. (*) The LwM2M client MUST have at least one LwM2M server account after completing the boot sequence specified.
          readOnly: true
          example: false
        host:
          type: string
          description: Host for 'No Security' mode
          readOnly: true
          example: 0.0.0.0
        port:
          type: integer
          description: 'Port for  Lwm2m Server: ''No Security'' mode: Lwm2m Server or Bootstrap Server'
          format: int32
          readOnly: true
        clientHoldOffTime:
          type: integer
          description: Client Hold Off Time. The number of seconds to wait before initiating a Client Initiated Bootstrap once the LwM2M Client has determined it should initiate this bootstrap mode. (This information is relevant for use with a Bootstrap-Server only.)
          format: int32
          readOnly: true
          example: 1
        serverPublicKey:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): RPK or X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEAZ0pSaGKHk/GrDaUDnQZpeEdGwX7m3Ws+U/kiVat
            +44sgk3c8g0LotfMpLlZJPhPwJ6ipXV+O1r7IZUjBs3LNA==
        serverCertificate:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MMIICODCCAd6gAwIBAgIUI88U1zowOdrxDK/dOV+36gJxI2MwCgYIKoZIzj0EAwIwejELMAkGA1UEBhMCVUs
            xEjAQBgNVBAgTCUt5aXYgY2l0eTENMAsGA1UEBxMES3lpdjEUMBIGA1UEChMLVGhpbmdzYm9hcmQxFzAVBgNVBAsMDkRFVkVMT1BFUl9URVNUMRkwFwYDVQQDDBBpbnRlcm1lZGlhdGVfY2EwMB4XDTIyMDEwOTEzMDMwMFoXDTI3MDEwODEzMDMwMFowFDESMBAGA1UEAxM
            JbG9jYWxob3N0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUO3vBo/JTv0eooY7XHiKAIVDoWKFqtrU7C6q8AIKqpLcqhCdW+haFeBOH3PjY6EwaWkY04Bir4oanU0s7tz2uKOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/
            BAIwADAdBgNVHQ4EFgQUEjc3Q4a0TxzP/3x3EV4fHxYUg0YwHwYDVR0jBBgwFoAUuSquGycMU6Q0SYNcbtSkSD3TfH0wLwYDVR0RBCgwJoIVbG9jYWxob3N0LmxvY2FsZG9tYWlugglsb2NhbGhvc3SCAiAtMAoGCCqGSM49BAMCA0gAMEUCIQD7dbZObyUaoDiNbX+9fUNp
            AWrD7N7XuJUwZ9FcN75R3gIgb2RNjDkHoyUyF1YajwkBk+7XmIXNClmizNJigj908mw=
        bootstrapServerAccountTimeout:
          type: integer
          description: Bootstrap Server Account Timeout (If the value is set to 0, or if this resource is not instantiated, the Bootstrap-Server Account lifetime is infinite.)
          format: int32
          readOnly: true
          example: 0
        lifetime:
          type: integer
          description: Specify the lifetime of the registration in seconds.
          format: int32
          readOnly: true
          example: 300
        defaultMinPeriod:
          type: integer
          description: The default value the LwM2M Client should use for the Minimum Period of an Observation in the absence of this parameter being included in an Observation. If this Resource doesn’t exist, the default value is 0.
          format: int32
          readOnly: true
          example: 1
        notifIfDisabled:
          type: boolean
          description: If true, the LwM2M Client stores “Notify” operations to the LwM2M Server while the LwM2M Server account is disabled or the LwM2M Client is offline. After the LwM2M Server account is enabled or the LwM2M Client is online, the LwM2M Client reports the stored “Notify” operations to the Server. If false, the LwM2M Client discards all the “Notify” operations or temporarily disables the Observe function while the LwM2M Server is disabled or the LwM2M Client is offline. The default value is true.
          readOnly: true
          example: true
        binding:
          type: string
          description: This Resource defines the transport binding configured for the LwM2M Client. If the LwM2M Client supports the binding specified in this Resource, the LwM2M Client MUST use that transport for the Current Binding Mode.
          readOnly: true
          example: U
      allOf:
        - $ref: '#/components/schemas/LwM2MBootstrapServerCredential'
        - title: PSKLwM2MBootstrapServerCredential
          type: object
          properties:
            shortServerId:
              type: integer
              description: Server short Id. Used as link to associate server Object Instance. This identifier uniquely identifies each LwM2M Server configured for the LwM2M Client. This Resource MUST be set when the Bootstrap-Server Resource has a value of 'false'. The values ID:0 and ID:65535 values MUST NOT be used for identifying the LwM2M Server.
              format: int32
              readOnly: true
              example: 123
            bootstrapServerIs:
              type: boolean
              description: Is Bootstrap Server or Lwm2m Server. The LwM2M Client MAY be configured to use one or more LwM2M Server Account(s). The LwM2M Client MUST have at most one LwM2M Bootstrap-Server Account. (*) The LwM2M client MUST have at least one LwM2M server account after completing the boot sequence specified.
              readOnly: true
              example: false
            host:
              type: string
              description: Host for 'No Security' mode
              readOnly: true
              example: 0.0.0.0
            port:
              type: integer
              description: 'Port for  Lwm2m Server: ''No Security'' mode: Lwm2m Server or Bootstrap Server'
              format: int32
              readOnly: true
            clientHoldOffTime:
              type: integer
              description: Client Hold Off Time. The number of seconds to wait before initiating a Client Initiated Bootstrap once the LwM2M Client has determined it should initiate this bootstrap mode. (This information is relevant for use with a Bootstrap-Server only.)
              format: int32
              readOnly: true
              example: 1
            serverPublicKey:
              type: string
              description: 'Server Public Key for ''Security'' mode (DTLS): RPK or X509. Format: base64 encoded'
              readOnly: true
              example: |-
                MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEAZ0pSaGKHk/GrDaUDnQZpeEdGwX7m3Ws+U/kiVat
                +44sgk3c8g0LotfMpLlZJPhPwJ6ipXV+O1r7IZUjBs3LNA==
            serverCertificate:
              type: string
              description: 'Server Public Key for ''Security'' mode (DTLS): X509. Format: base64 encoded'
              readOnly: true
              example: |-
                MMIICODCCAd6gAwIBAgIUI88U1zowOdrxDK/dOV+36gJxI2MwCgYIKoZIzj0EAwIwejELMAkGA1UEBhMCVUs
                xEjAQBgNVBAgTCUt5aXYgY2l0eTENMAsGA1UEBxMES3lpdjEUMBIGA1UEChMLVGhpbmdzYm9hcmQxFzAVBgNVBAsMDkRFVkVMT1BFUl9URVNUMRkwFwYDVQQDDBBpbnRlcm1lZGlhdGVfY2EwMB4XDTIyMDEwOTEzMDMwMFoXDTI3MDEwODEzMDMwMFowFDESMBAGA1UEAxM
                JbG9jYWxob3N0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUO3vBo/JTv0eooY7XHiKAIVDoWKFqtrU7C6q8AIKqpLcqhCdW+haFeBOH3PjY6EwaWkY04Bir4oanU0s7tz2uKOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/
                BAIwADAdBgNVHQ4EFgQUEjc3Q4a0TxzP/3x3EV4fHxYUg0YwHwYDVR0jBBgwFoAUuSquGycMU6Q0SYNcbtSkSD3TfH0wLwYDVR0RBCgwJoIVbG9jYWxob3N0LmxvY2FsZG9tYWlugglsb2NhbGhvc3SCAiAtMAoGCCqGSM49BAMCA0gAMEUCIQD7dbZObyUaoDiNbX+9fUNp
                AWrD7N7XuJUwZ9FcN75R3gIgb2RNjDkHoyUyF1YajwkBk+7XmIXNClmizNJigj908mw=
            bootstrapServerAccountTimeout:
              type: integer
              description: Bootstrap Server Account Timeout (If the value is set to 0, or if this resource is not instantiated, the Bootstrap-Server Account lifetime is infinite.)
              format: int32
              readOnly: true
              example: 0
            lifetime:
              type: integer
              description: Specify the lifetime of the registration in seconds.
              format: int32
              readOnly: true
              example: 300
            defaultMinPeriod:
              type: integer
              description: The default value the LwM2M Client should use for the Minimum Period of an Observation in the absence of this parameter being included in an Observation. If this Resource doesn’t exist, the default value is 0.
              format: int32
              readOnly: true
              example: 1
            notifIfDisabled:
              type: boolean
              description: If true, the LwM2M Client stores “Notify” operations to the LwM2M Server while the LwM2M Server account is disabled or the LwM2M Client is offline. After the LwM2M Server account is enabled or the LwM2M Client is online, the LwM2M Client reports the stored “Notify” operations to the Server. If false, the LwM2M Client discards all the “Notify” operations or temporarily disables the Observe function while the LwM2M Server is disabled or the LwM2M Client is offline. The default value is true.
              readOnly: true
              example: true
            binding:
              type: string
              description: This Resource defines the transport binding configured for the LwM2M Client. If the LwM2M Client supports the binding specified in this Resource, the LwM2M Client MUST use that transport for the Current Binding Mode.
              readOnly: true
              example: U
    PageData«AlarmCommentInfo»:
      title: PageData«AlarmCommentInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/AlarmCommentInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«AlarmData»:
      title: PageData«AlarmData»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/AlarmData'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«AlarmInfo»:
      title: PageData«AlarmInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/AlarmInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«AssetInfo»:
      title: PageData«AssetInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/AssetInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«AssetProfileInfo»:
      title: PageData«AssetProfileInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/AssetProfileInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«AssetProfile»:
      title: PageData«AssetProfile»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/AssetProfile'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«Asset»:
      title: PageData«Asset»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/Asset'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«AuditLog»:
      title: PageData«AuditLog»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/AuditLog'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«Customer»:
      title: PageData«Customer»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/Customer'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«DashboardInfo»:
      title: PageData«DashboardInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/DashboardInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«DeviceInfo»:
      title: PageData«DeviceInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/DeviceInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«DeviceProfileInfo»:
      title: PageData«DeviceProfileInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/DeviceProfileInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«DeviceProfile»:
      title: PageData«DeviceProfile»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/DeviceProfile'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«Device»:
      title: PageData«Device»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/Device'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«EdgeEvent»:
      title: PageData«EdgeEvent»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/EdgeEvent'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«EdgeInfo»:
      title: PageData«EdgeInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/EdgeInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«Edge»:
      title: PageData«Edge»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/Edge'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«EntityData»:
      title: PageData«EntityData»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/EntityData'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«EntityInfo»:
      title: PageData«EntityInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/EntityInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«EntitySubtype»:
      title: PageData«EntitySubtype»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/EntitySubtype'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«EntityVersion»:
      title: PageData«EntityVersion»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/EntityVersion'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«EntityViewInfo»:
      title: PageData«EntityViewInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/EntityViewInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«EntityView»:
      title: PageData«EntityView»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/EntityView'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«EventInfo»:
      title: PageData«EventInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/EventInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«NotificationRequestInfo»:
      title: PageData«NotificationRequestInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/NotificationRequestInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«NotificationRuleInfo»:
      title: PageData«NotificationRuleInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/NotificationRuleInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«NotificationTarget»:
      title: PageData«NotificationTarget»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/NotificationTarget'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«NotificationTemplate»:
      title: PageData«NotificationTemplate»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/NotificationTemplate'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«Notification»:
      title: PageData«Notification»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/Notification'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«OtaPackageInfo»:
      title: PageData«OtaPackageInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/OtaPackageInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«Queue»:
      title: PageData«Queue»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/Queue'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«RuleChain»:
      title: PageData«RuleChain»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/RuleChain'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«TbResourceInfo»:
      title: PageData«TbResourceInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/TbResourceInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«TenantInfo»:
      title: PageData«TenantInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/TenantInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«TenantProfile»:
      title: PageData«TenantProfile»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/TenantProfile'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«Tenant»:
      title: PageData«Tenant»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/Tenant'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«UserEmailInfo»:
      title: PageData«UserEmailInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/UserEmailInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«User»:
      title: PageData«User»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/User'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«WidgetTypeInfo»:
      title: PageData«WidgetTypeInfo»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/WidgetTypeInfo'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PageData«WidgetsBundle»:
      title: PageData«WidgetsBundle»
      type: object
      properties:
        data:
          type: array
          description: Array of the entities
          readOnly: true
          items:
            $ref: '#/components/schemas/WidgetsBundle'
        totalPages:
          type: integer
          description: Total number of available pages. Calculated based on the 'pageSize' request parameter and total number of entities that match search criteria
          format: int32
          readOnly: true
        totalElements:
          type: integer
          description: Total number of elements in all available pages
          format: int64
          readOnly: true
        hasNext:
          type: boolean
          description: '''false'' value indicates the end of the result set'
          readOnly: true
          example: false
    PlatformTwoFaSettings:
      title: PlatformTwoFaSettings
      required:
        - minVerificationCodeSendPeriod
        - providers
        - totalAllowedTimeForVerification
      type: object
      properties:
        maxVerificationFailuresBeforeUserLockout:
          type: integer
          format: int32
        minVerificationCodeSendPeriod:
          type: integer
          format: int32
        providers:
          type: array
          items:
            $ref: '#/components/schemas/TwoFaProviderConfig'
        totalAllowedTimeForVerification:
          type: integer
          format: int32
        verificationCodeCheckRateLimit:
          pattern: '[1-9]\d*:[1-9]\d*'
          type: string
    PlatformUsersNotificationTargetConfig:
      title: PlatformUsersNotificationTargetConfig
      properties:
        description:
          type: string
        usersFilter:
          $ref: '#/components/schemas/UsersFilter'
      allOf:
        - $ref: '#/components/schemas/NotificationTargetConfig'
        - title: PlatformUsersNotificationTargetConfig
          required:
            - usersFilter
          type: object
          properties:
            description:
              type: string
            usersFilter:
              $ref: '#/components/schemas/UsersFilter'
    PowerSavingConfiguration:
      title: PowerSavingConfiguration
      type: object
      properties:
        edrxCycle:
          type: integer
          format: int64
        pagingTransmissionWindow:
          type: integer
          format: int64
        powerMode:
          type: string
          enum:
            - DRX
            - E_DRX
            - PSM
        psmActivityTimer:
          type: integer
          format: int64
    ProcessingStrategy:
      title: ProcessingStrategy
      type: object
      properties:
        failurePercentage:
          type: number
          format: double
        maxPauseBetweenRetries:
          type: integer
          format: int64
        pauseBetweenRetries:
          type: integer
          format: int64
        retries:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - RETRY_ALL
            - RETRY_FAILED
            - RETRY_FAILED_AND_TIMED_OUT
            - RETRY_TIMED_OUT
            - SKIP_ALL_FAILURES
            - SKIP_ALL_FAILURES_AND_TIMED_OUT
    ProtoTransportPayloadConfiguration:
      title: ProtoTransportPayloadConfiguration
      properties:
        deviceAttributesProtoSchema:
          type: string
        deviceRpcRequestProtoSchema:
          type: string
        deviceRpcResponseProtoSchema:
          type: string
        deviceTelemetryProtoSchema:
          type: string
        enableCompatibilityWithJsonPayloadFormat:
          type: boolean
        useJsonPayloadFormatForDefaultDownlinkTopics:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/TransportPayloadTypeConfiguration'
        - title: ProtoTransportPayloadConfiguration
          type: object
          properties:
            deviceAttributesProtoSchema:
              type: string
            deviceRpcRequestProtoSchema:
              type: string
            deviceRpcResponseProtoSchema:
              type: string
            deviceTelemetryProtoSchema:
              type: string
            enableCompatibilityWithJsonPayloadFormat:
              type: boolean
            useJsonPayloadFormatForDefaultDownlinkTopics:
              type: boolean
    Queue:
      title: Queue
      type: object
      properties:
        additionalInfo:
          $ref: '#/components/schemas/JsonNode'
        consumerPerPartition:
          type: boolean
        createdTime:
          type: integer
          format: int64
        id:
          $ref: '#/components/schemas/QueueId'
        name:
          type: string
        packProcessingTimeout:
          type: integer
          format: int64
        partitions:
          type: integer
          format: int32
        pollInterval:
          type: integer
          format: int32
        processingStrategy:
          $ref: '#/components/schemas/ProcessingStrategy'
        submitStrategy:
          $ref: '#/components/schemas/SubmitStrategy'
        tenantId:
          $ref: '#/components/schemas/TenantId'
        topic:
          type: string
    QueueId:
      title: QueueId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: QUEUE
          enum:
            - QUEUE
    RPKLwM2MBootstrapServerCredential:
      title: RPKLwM2MBootstrapServerCredential
      type: object
      properties:
        shortServerId:
          type: integer
          description: Server short Id. Used as link to associate server Object Instance. This identifier uniquely identifies each LwM2M Server configured for the LwM2M Client. This Resource MUST be set when the Bootstrap-Server Resource has a value of 'false'. The values ID:0 and ID:65535 values MUST NOT be used for identifying the LwM2M Server.
          format: int32
          readOnly: true
          example: 123
        bootstrapServerIs:
          type: boolean
          description: Is Bootstrap Server or Lwm2m Server. The LwM2M Client MAY be configured to use one or more LwM2M Server Account(s). The LwM2M Client MUST have at most one LwM2M Bootstrap-Server Account. (*) The LwM2M client MUST have at least one LwM2M server account after completing the boot sequence specified.
          readOnly: true
          example: false
        host:
          type: string
          description: Host for 'No Security' mode
          readOnly: true
          example: 0.0.0.0
        port:
          type: integer
          description: 'Port for  Lwm2m Server: ''No Security'' mode: Lwm2m Server or Bootstrap Server'
          format: int32
          readOnly: true
        clientHoldOffTime:
          type: integer
          description: Client Hold Off Time. The number of seconds to wait before initiating a Client Initiated Bootstrap once the LwM2M Client has determined it should initiate this bootstrap mode. (This information is relevant for use with a Bootstrap-Server only.)
          format: int32
          readOnly: true
          example: 1
        serverPublicKey:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): RPK or X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEAZ0pSaGKHk/GrDaUDnQZpeEdGwX7m3Ws+U/kiVat
            +44sgk3c8g0LotfMpLlZJPhPwJ6ipXV+O1r7IZUjBs3LNA==
        serverCertificate:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MMIICODCCAd6gAwIBAgIUI88U1zowOdrxDK/dOV+36gJxI2MwCgYIKoZIzj0EAwIwejELMAkGA1UEBhMCVUs
            xEjAQBgNVBAgTCUt5aXYgY2l0eTENMAsGA1UEBxMES3lpdjEUMBIGA1UEChMLVGhpbmdzYm9hcmQxFzAVBgNVBAsMDkRFVkVMT1BFUl9URVNUMRkwFwYDVQQDDBBpbnRlcm1lZGlhdGVfY2EwMB4XDTIyMDEwOTEzMDMwMFoXDTI3MDEwODEzMDMwMFowFDESMBAGA1UEAxM
            JbG9jYWxob3N0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUO3vBo/JTv0eooY7XHiKAIVDoWKFqtrU7C6q8AIKqpLcqhCdW+haFeBOH3PjY6EwaWkY04Bir4oanU0s7tz2uKOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/
            BAIwADAdBgNVHQ4EFgQUEjc3Q4a0TxzP/3x3EV4fHxYUg0YwHwYDVR0jBBgwFoAUuSquGycMU6Q0SYNcbtSkSD3TfH0wLwYDVR0RBCgwJoIVbG9jYWxob3N0LmxvY2FsZG9tYWlugglsb2NhbGhvc3SCAiAtMAoGCCqGSM49BAMCA0gAMEUCIQD7dbZObyUaoDiNbX+9fUNp
            AWrD7N7XuJUwZ9FcN75R3gIgb2RNjDkHoyUyF1YajwkBk+7XmIXNClmizNJigj908mw=
        bootstrapServerAccountTimeout:
          type: integer
          description: Bootstrap Server Account Timeout (If the value is set to 0, or if this resource is not instantiated, the Bootstrap-Server Account lifetime is infinite.)
          format: int32
          readOnly: true
          example: 0
        lifetime:
          type: integer
          description: Specify the lifetime of the registration in seconds.
          format: int32
          readOnly: true
          example: 300
        defaultMinPeriod:
          type: integer
          description: The default value the LwM2M Client should use for the Minimum Period of an Observation in the absence of this parameter being included in an Observation. If this Resource doesn’t exist, the default value is 0.
          format: int32
          readOnly: true
          example: 1
        notifIfDisabled:
          type: boolean
          description: If true, the LwM2M Client stores “Notify” operations to the LwM2M Server while the LwM2M Server account is disabled or the LwM2M Client is offline. After the LwM2M Server account is enabled or the LwM2M Client is online, the LwM2M Client reports the stored “Notify” operations to the Server. If false, the LwM2M Client discards all the “Notify” operations or temporarily disables the Observe function while the LwM2M Server is disabled or the LwM2M Client is offline. The default value is true.
          readOnly: true
          example: true
        binding:
          type: string
          description: This Resource defines the transport binding configured for the LwM2M Client. If the LwM2M Client supports the binding specified in this Resource, the LwM2M Client MUST use that transport for the Current Binding Mode.
          readOnly: true
          example: U
    RateLimitsNotificationRuleTriggerConfig:
      title: RateLimitsNotificationRuleTriggerConfig
      type: object
      properties:
        apis:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - CASSANDRA_QUERIES
              - ENTITY_EXPORT
              - ENTITY_IMPORT
              - NOTIFICATION_REQUESTS
              - NOTIFICATION_REQUESTS_PER_RULE
              - PASSWORD_RESET
              - REST_REQUESTS_PER_CUSTOMER
              - REST_REQUESTS_PER_TENANT
              - TRANSPORT_MESSAGES_PER_DEVICE
              - TRANSPORT_MESSAGES_PER_TENANT
              - TWO_FA_VERIFICATION_CODE_CHECK
              - TWO_FA_VERIFICATION_CODE_SEND
              - WS_UPDATES_PER_SESSION
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    RelationEntityTypeFilter:
      title: RelationEntityTypeFilter
      type: object
      properties:
        relationType:
          type: string
          description: Type of the relation between root entity and other entity (e.g. 'Contains' or 'Manages').
          example: Contains
        entityTypes:
          type: array
          description: Array of entity types to filter the related entities (e.g. 'DEVICE', 'ASSET').
          items:
            type: string
            enum:
              - ALARM
              - API_USAGE_STATE
              - ASSET
              - ASSET_PROFILE
              - CUSTOMER
              - DASHBOARD
              - DEVICE
              - DEVICE_PROFILE
              - EDGE
              - ENTITY_VIEW
              - NOTIFICATION
              - NOTIFICATION_REQUEST
              - NOTIFICATION_RULE
              - NOTIFICATION_TARGET
              - NOTIFICATION_TEMPLATE
              - OTA_PACKAGE
              - QUEUE
              - RPC
              - RULE_CHAIN
              - RULE_NODE
              - TB_RESOURCE
              - TENANT
              - TENANT_PROFILE
              - USER
              - WIDGETS_BUNDLE
              - WIDGET_TYPE
    RelationsQueryFilter:
      title: RelationsQueryFilter
      properties:
        direction:
          type: string
          enum:
            - FROM
            - TO
        fetchLastLevelOnly:
          type: boolean
        filters:
          type: array
          items:
            $ref: '#/components/schemas/RelationEntityTypeFilter'
        maxLevel:
          type: integer
          format: int32
        multiRoot:
          type: boolean
        multiRootEntitiesType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        multiRootEntityIds:
          uniqueItems: true
          type: array
          items:
            type: string
        rootEntity:
          $ref: '#/components/schemas/EntityId'
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: RelationsQueryFilter
          type: object
          properties:
            direction:
              type: string
              enum:
                - FROM
                - TO
            fetchLastLevelOnly:
              type: boolean
            filters:
              type: array
              items:
                $ref: '#/components/schemas/RelationEntityTypeFilter'
            maxLevel:
              type: integer
              format: int32
            multiRoot:
              type: boolean
            multiRootEntitiesType:
              type: string
              enum:
                - ALARM
                - API_USAGE_STATE
                - ASSET
                - ASSET_PROFILE
                - CUSTOMER
                - DASHBOARD
                - DEVICE
                - DEVICE_PROFILE
                - EDGE
                - ENTITY_VIEW
                - NOTIFICATION
                - NOTIFICATION_REQUEST
                - NOTIFICATION_RULE
                - NOTIFICATION_TARGET
                - NOTIFICATION_TEMPLATE
                - OTA_PACKAGE
                - QUEUE
                - RPC
                - RULE_CHAIN
                - RULE_NODE
                - TB_RESOURCE
                - TENANT
                - TENANT_PROFILE
                - USER
                - WIDGETS_BUNDLE
                - WIDGET_TYPE
            multiRootEntityIds:
              uniqueItems: true
              type: array
              items:
                type: string
            rootEntity:
              $ref: '#/components/schemas/EntityId'
    RelationsSearchParameters:
      title: RelationsSearchParameters
      type: object
      properties:
        rootId:
          type: string
          description: Root entity id to start search from.
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        rootType:
          type: string
          description: Type of the root entity.
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        direction:
          type: string
          description: Type of the root entity.
          enum:
            - FROM
            - TO
        relationTypeGroup:
          type: string
          description: Type of the relation.
          enum:
            - COMMON
            - DASHBOARD
            - EDGE
            - EDGE_AUTO_ASSIGN_RULE_CHAIN
            - RULE_CHAIN
            - RULE_NODE
        maxLevel:
          type: integer
          description: Maximum level of the search depth.
          format: int32
        fetchLastLevelOnly:
          type: boolean
          description: Fetch entities that match the last level of search. Useful to find Devices that are strictly 'maxLevel' relations away from the root entity.
          example: false
    RepeatingAlarmConditionSpec:
      title: RepeatingAlarmConditionSpec
      properties:
        predicate:
          $ref: '#/components/schemas/FilterPredicateValue«int»'
      allOf:
        - $ref: '#/components/schemas/AlarmConditionSpec'
        - title: RepeatingAlarmConditionSpec
          type: object
          properties:
            predicate:
              $ref: '#/components/schemas/FilterPredicateValue«int»'
    RepositorySettings:
      title: RepositorySettings
      type: object
      properties:
        authMethod:
          type: string
          enum:
            - PRIVATE_KEY
            - USERNAME_PASSWORD
        defaultBranch:
          type: string
        password:
          type: string
        privateKey:
          type: string
        privateKeyFileName:
          type: string
        privateKeyPassword:
          type: string
        readOnly:
          type: boolean
        repositoryUri:
          type: string
        showMergeCommits:
          type: boolean
        username:
          type: string
    RepositorySettingsInfo:
      title: RepositorySettingsInfo
      type: object
      properties:
        configured:
          type: boolean
        readOnly:
          type: boolean
    ResetPasswordEmailRequest:
      title: ResetPasswordEmailRequest
      type: object
      properties:
        email:
          type: string
          description: The email of the user
          example: user@example.com
    ResetPasswordRequest:
      title: ResetPasswordRequest
      type: object
      properties:
        resetToken:
          type: string
          description: The reset token to verify
          example: AAB254FF67D..
        password:
          type: string
          description: The new password to set
          example: secret
    Resource:
      title: Resource
      type: object
      properties:
        description:
          type: string
        file:
          type: string
          format: binary
        filename:
          type: string
        inputStream:
          $ref: '#/components/schemas/InputStream'
        open:
          type: boolean
        readable:
          type: boolean
        uri:
          type: string
          format: uri
        url:
          type: string
          format: url
    ResponseEntity:
      title: ResponseEntity
      type: object
      properties:
        body:
          type: object
        statusCode:
          type: string
          enum:
            - ACCEPTED
            - ALREADY_REPORTED
            - BAD_GATEWAY
            - BAD_REQUEST
            - BANDWIDTH_LIMIT_EXCEEDED
            - CHECKPOINT
            - CONFLICT
            - CONTINUE
            - CREATED
            - DESTINATION_LOCKED
            - EXPECTATION_FAILED
            - FAILED_DEPENDENCY
            - FORBIDDEN
            - FOUND
            - GATEWAY_TIMEOUT
            - GONE
            - HTTP_VERSION_NOT_SUPPORTED
            - IM_USED
            - INSUFFICIENT_SPACE_ON_RESOURCE
            - INSUFFICIENT_STORAGE
            - INTERNAL_SERVER_ERROR
            - I_AM_A_TEAPOT
            - LENGTH_REQUIRED
            - LOCKED
            - LOOP_DETECTED
            - METHOD_FAILURE
            - METHOD_NOT_ALLOWED
            - MOVED_PERMANENTLY
            - MOVED_TEMPORARILY
            - MULTIPLE_CHOICES
            - MULTI_STATUS
            - NETWORK_AUTHENTICATION_REQUIRED
            - NON_AUTHORITATIVE_INFORMATION
            - NOT_ACCEPTABLE
            - NOT_EXTENDED
            - NOT_FOUND
            - NOT_IMPLEMENTED
            - NOT_MODIFIED
            - NO_CONTENT
            - OK
            - PARTIAL_CONTENT
            - PAYLOAD_TOO_LARGE
            - PAYMENT_REQUIRED
            - PERMANENT_REDIRECT
            - PRECONDITION_FAILED
            - PRECONDITION_REQUIRED
            - PROCESSING
            - PROXY_AUTHENTICATION_REQUIRED
            - REQUESTED_RANGE_NOT_SATISFIABLE
            - REQUEST_ENTITY_TOO_LARGE
            - REQUEST_HEADER_FIELDS_TOO_LARGE
            - REQUEST_TIMEOUT
            - REQUEST_URI_TOO_LONG
            - RESET_CONTENT
            - SEE_OTHER
            - SERVICE_UNAVAILABLE
            - SWITCHING_PROTOCOLS
            - TEMPORARY_REDIRECT
            - TOO_EARLY
            - TOO_MANY_REQUESTS
            - UNAUTHORIZED
            - UNAVAILABLE_FOR_LEGAL_REASONS
            - UNPROCESSABLE_ENTITY
            - UNSUPPORTED_MEDIA_TYPE
            - UPGRADE_REQUIRED
            - URI_TOO_LONG
            - USE_PROXY
            - VARIANT_ALSO_NEGOTIATES
        statusCodeValue:
          type: integer
          format: int32
    Rpc:
      title: Rpc
      type: object
      properties:
        id:
          description: JSON object with the rpc Id. Referencing non-existing rpc Id will cause error.
          $ref: '#/components/schemas/RpcId'
        createdTime:
          type: integer
          description: Timestamp of the rpc creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        deviceId:
          description: JSON object with Device Id.
          $ref: '#/components/schemas/DeviceId'
          readOnly: true
        expirationTime:
          type: integer
          description: Expiration time of the request.
          format: int64
          readOnly: true
        request:
          description: The request body that will be used to send message to device.
          $ref: '#/components/schemas/JsonNode'
          readOnly: true
        response:
          description: The response from the device.
          $ref: '#/components/schemas/JsonNode'
          readOnly: true
        status:
          type: string
          description: The current status of the RPC call.
          readOnly: true
          enum:
            - DELETED
            - DELIVERED
            - EXPIRED
            - FAILED
            - QUEUED
            - SENT
            - SUCCESSFUL
            - TIMEOUT
        additionalInfo:
          description: Additional info used in the rule engine to process the updates to the RPC state.
          $ref: '#/components/schemas/JsonNode'
          readOnly: true
    RpcId:
      title: RpcId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: RPC
          enum:
            - RPC
    RuleChain:
      title: RuleChain
      required:
        - name
        - tenantId
      type: object
      properties:
        additionalInfo:
          $ref: '#/components/schemas/JsonNode'
        id:
          description: JSON object with the Rule Chain Id. Specify this field to update the Rule Chain. Referencing non-existing Rule Chain Id will cause error. Omit this field to create new rule chain.
          $ref: '#/components/schemas/RuleChainId'
        createdTime:
          type: integer
          description: Timestamp of the rule chain creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        name:
          type: string
          description: Rule Chain name
          example: Humidity data processing
        type:
          type: string
          description: Rule Chain type. 'EDGE' rule chains are processing messages on the edge devices only.
          example: A4B72CCDFF33
          enum:
            - CORE
            - EDGE
        firstRuleNodeId:
          description: JSON object with Rule Chain Id. Pointer to the first rule node that should receive all messages pushed to this rule chain.
          $ref: '#/components/schemas/RuleNodeId'
        root:
          type: boolean
          description: Indicates root rule chain. The root rule chain process messages from all devices and entities by default. User may configure default rule chain per device profile.
          example: false
        debugMode:
          type: boolean
          description: Reserved for future usage.
          example: false
        configuration:
          description: Reserved for future usage. The actual list of rule nodes and their relations is stored in the database separately.
          $ref: '#/components/schemas/JsonNode'
    RuleChainConnectionInfo:
      title: RuleChainConnectionInfo
      required:
        - additionalInfo
        - fromIndex
        - targetRuleChainId
        - type
      type: object
      properties:
        fromIndex:
          type: integer
          description: Index of rule node in the 'nodes' array of the RuleChainMetaData. Indicates the 'from' part of the connection.
          format: int32
        targetRuleChainId:
          description: JSON object with the Rule Chain Id.
          $ref: '#/components/schemas/RuleChainId'
        additionalInfo:
          description: JSON object with the additional information about the connection.
          $ref: '#/components/schemas/JsonNode'
        type:
          type: string
          description: Type of the relation. Typically indicated the result of processing by the 'from' rule node. For example, 'Success' or 'Failure'
    RuleChainData:
      title: RuleChainData
      required:
        - metadata
        - ruleChains
      type: object
      properties:
        ruleChains:
          type: array
          description: List of the Rule Chain objects.
          readOnly: true
          items:
            $ref: '#/components/schemas/RuleChain'
        metadata:
          type: array
          description: List of the Rule Chain metadata objects.
          readOnly: true
          items:
            $ref: '#/components/schemas/RuleChainMetaData'
    RuleChainDebugEventFilter:
      title: RuleChainDebugEventFilter
      properties:
        error:
          type: boolean
        notEmpty:
          type: boolean
        eventType:
          type: string
          description: String value representing the event type
          example: STATS
          enum:
            - DEBUG_RULE_CHAIN
            - DEBUG_RULE_NODE
            - ERROR
            - LC_EVENT
            - STATS
        server:
          type: string
          description: String value representing the server name, identifier or ip address where the platform is running
          example: ip-172-31-24-152
        message:
          type: string
          description: String value representing the message
        errorStr:
          type: string
          description: The case insensitive 'contains' filter based on error message
          example: not present in the DB
      allOf:
        - $ref: '#/components/schemas/EventFilter'
        - title: RuleChainDebugEventFilter
          required:
            - eventType
          type: object
          properties:
            error:
              type: boolean
            notEmpty:
              type: boolean
            eventType:
              type: string
              description: String value representing the event type
              example: STATS
              enum:
                - DEBUG_RULE_CHAIN
                - DEBUG_RULE_NODE
                - ERROR
                - LC_EVENT
                - STATS
            server:
              type: string
              description: String value representing the server name, identifier or ip address where the platform is running
              example: ip-172-31-24-152
            message:
              type: string
              description: String value representing the message
            errorStr:
              type: string
              description: The case insensitive 'contains' filter based on error message
              example: not present in the DB
    RuleChainExportData:
      title: RuleChainExportData
      properties:
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/AttributeExportData'
        entity:
          $ref: '#/components/schemas/RuleChain'
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        metaData:
          $ref: '#/components/schemas/RuleChainMetaData'
        relations:
          type: array
          items:
            $ref: '#/components/schemas/EntityRelation'
      allOf:
        - $ref: '#/components/schemas/EntityExportData«object»'
        - title: RuleChainExportData
          type: object
          properties:
            attributes:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeExportData'
            entity:
              $ref: '#/components/schemas/RuleChain'
            entityType:
              type: string
              enum:
                - ALARM
                - API_USAGE_STATE
                - ASSET
                - ASSET_PROFILE
                - CUSTOMER
                - DASHBOARD
                - DEVICE
                - DEVICE_PROFILE
                - EDGE
                - ENTITY_VIEW
                - NOTIFICATION
                - NOTIFICATION_REQUEST
                - NOTIFICATION_RULE
                - NOTIFICATION_TARGET
                - NOTIFICATION_TEMPLATE
                - OTA_PACKAGE
                - QUEUE
                - RPC
                - RULE_CHAIN
                - RULE_NODE
                - TB_RESOURCE
                - TENANT
                - TENANT_PROFILE
                - USER
                - WIDGETS_BUNDLE
                - WIDGET_TYPE
            metaData:
              $ref: '#/components/schemas/RuleChainMetaData'
            relations:
              type: array
              items:
                $ref: '#/components/schemas/EntityRelation'
    RuleChainId:
      title: RuleChainId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: RULE_CHAIN
          enum:
            - RULE_CHAIN
    RuleChainImportResult:
      title: RuleChainImportResult
      type: object
      properties:
        error:
          type: string
        ruleChainId:
          $ref: '#/components/schemas/RuleChainId'
        ruleChainName:
          type: string
        updated:
          type: boolean
    RuleChainMetaData:
      title: RuleChainMetaData
      required:
        - connections
        - firstNodeIndex
        - nodes
        - ruleChainConnections
        - ruleChainId
      type: object
      properties:
        ruleChainId:
          description: JSON object with Rule Chain Id.
          $ref: '#/components/schemas/RuleChainId'
          readOnly: true
        firstNodeIndex:
          type: integer
          description: Index of the first rule node in the 'nodes' list
          format: int32
        nodes:
          type: array
          description: List of rule node JSON objects
          items:
            $ref: '#/components/schemas/RuleNode'
        connections:
          type: array
          description: List of JSON objects that represent connections between rule nodes
          items:
            $ref: '#/components/schemas/NodeConnectionInfo'
        ruleChainConnections:
          type: array
          description: List of JSON objects that represent connections between rule nodes and other rule chains.
          items:
            $ref: '#/components/schemas/RuleChainConnectionInfo'
    RuleChainOutputLabelsUsage:
      title: RuleChainOutputLabelsUsage
      required:
        - labels
        - ruleChainId
        - ruleChainName
        - ruleNodeId
        - ruleNodeName
      type: object
      properties:
        ruleChainId:
          description: Rule Chain Id
          $ref: '#/components/schemas/RuleChainId'
          readOnly: true
        ruleNodeId:
          description: Rule Node Id
          $ref: '#/components/schemas/RuleNodeId'
          readOnly: true
        ruleChainName:
          type: string
          description: Rule Chain Name
          readOnly: true
        ruleNodeName:
          type: string
          description: Rule Node Name
          readOnly: true
        labels:
          uniqueItems: true
          type: array
          description: Output labels
          readOnly: true
          items:
            type: string
    RuleEngineComponentLifecycleEventNotificationRuleTriggerConfig:
      title: RuleEngineComponentLifecycleEventNotificationRuleTriggerConfig
      properties:
        onlyRuleChainLifecycleFailures:
          type: boolean
        onlyRuleNodeLifecycleFailures:
          type: boolean
        ruleChainEvents:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ACTIVATED
              - CREATED
              - DEACTIVATED
              - DELETED
              - FAILED
              - STARTED
              - STOPPED
              - SUSPENDED
              - UPDATED
        ruleChains:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
        ruleNodeEvents:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - ACTIVATED
              - CREATED
              - DEACTIVATED
              - DELETED
              - FAILED
              - STARTED
              - STOPPED
              - SUSPENDED
              - UPDATED
        trackRuleNodeEvents:
          type: boolean
        triggerType:
          type: string
          enum:
            - ALARM
            - ALARM_ASSIGNMENT
            - ALARM_COMMENT
            - API_USAGE_LIMIT
            - DEVICE_ACTIVITY
            - ENTITIES_LIMIT
            - ENTITY_ACTION
            - NEW_PLATFORM_VERSION
            - RATE_LIMITS
            - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
      allOf:
        - $ref: '#/components/schemas/NotificationRuleTriggerConfig'
        - title: RuleEngineComponentLifecycleEventNotificationRuleTriggerConfig
          type: object
          properties:
            onlyRuleChainLifecycleFailures:
              type: boolean
            onlyRuleNodeLifecycleFailures:
              type: boolean
            ruleChainEvents:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - ACTIVATED
                  - CREATED
                  - DEACTIVATED
                  - DELETED
                  - FAILED
                  - STARTED
                  - STOPPED
                  - SUSPENDED
                  - UPDATED
            ruleChains:
              uniqueItems: true
              type: array
              items:
                type: string
                format: uuid
            ruleNodeEvents:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - ACTIVATED
                  - CREATED
                  - DEACTIVATED
                  - DELETED
                  - FAILED
                  - STARTED
                  - STOPPED
                  - SUSPENDED
                  - UPDATED
            trackRuleNodeEvents:
              type: boolean
            triggerType:
              type: string
              enum:
                - ALARM
                - ALARM_ASSIGNMENT
                - ALARM_COMMENT
                - API_USAGE_LIMIT
                - DEVICE_ACTIVITY
                - ENTITIES_LIMIT
                - ENTITY_ACTION
                - NEW_PLATFORM_VERSION
                - RATE_LIMITS
                - RULE_ENGINE_COMPONENT_LIFECYCLE_EVENT
    RuleNode:
      title: RuleNode
      type: object
      properties:
        externalId:
          $ref: '#/components/schemas/RuleNodeId'
        id:
          description: JSON object with the Rule Node Id. Specify this field to update the Rule Node. Referencing non-existing Rule Node Id will cause error. Omit this field to create new rule node.
          $ref: '#/components/schemas/RuleNodeId'
        createdTime:
          type: integer
          description: Timestamp of the rule node creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        ruleChainId:
          description: 'JSON object with the Rule Chain Id. '
          $ref: '#/components/schemas/RuleChainId'
          readOnly: true
        type:
          type: string
          description: 'Full Java Class Name of the rule node implementation. '
          example: com.mycompany.iot.rule.engine.ProcessingNode
        name:
          type: string
          description: 'User defined name of the rule node. Used on UI and for logging. '
          example: Process sensor reading
        debugMode:
          type: boolean
          description: 'Enable/disable debug. '
          example: false
        singletonMode:
          type: boolean
          description: 'Enable/disable singleton mode. '
          example: false
        configurationVersion:
          type: integer
          description: 'Version of rule node configuration. '
          format: int32
          example: 0
        configuration:
          description: JSON with the rule node configuration. Structure depends on the rule node implementation.
          $ref: '#/components/schemas/JsonNode'
        additionalInfo:
          description: Additional parameters of the rule node. Contains 'layoutX' and 'layoutY' properties for visualization.
          $ref: '#/components/schemas/JsonNode'
    RuleNodeDebugEventFilter:
      title: RuleNodeDebugEventFilter
      properties:
        error:
          type: boolean
        notEmpty:
          type: boolean
        eventType:
          type: string
          description: String value representing the event type
          example: STATS
          enum:
            - DEBUG_RULE_CHAIN
            - DEBUG_RULE_NODE
            - ERROR
            - LC_EVENT
            - STATS
        server:
          type: string
          description: String value representing the server name, identifier or ip address where the platform is running
          example: ip-172-31-24-152
        msgDirectionType:
          type: string
          description: String value representing msg direction type (incoming to entity or outcoming from entity)
          enum:
            - IN
            - OUT
        entityId:
          type: string
          description: String value representing the entity id in the event body (originator of the message)
          example: de9d54a0-2b7a-11ec-a3cc-23386423d98f
        entityType:
          type: string
          description: String value representing the entity type
          enum:
            - DEVICE
        msgId:
          type: string
          description: String value representing the message id in the rule engine
          example: de9d54a0-2b7a-11ec-a3cc-23386423d98f
        msgType:
          type: string
          description: String value representing the message type
          example: POST_TELEMETRY_REQUEST
        relationType:
          type: string
          description: String value representing the type of message routing
          example: Success
        dataSearch:
          type: string
          description: The case insensitive 'contains' filter based on data (key and value) for the message.
          example: humidity
        metadataSearch:
          type: string
          description: The case insensitive 'contains' filter based on metadata (key and value) for the message.
          example: deviceName
        errorStr:
          type: string
          description: The case insensitive 'contains' filter based on error message
          example: not present in the DB
      allOf:
        - $ref: '#/components/schemas/EventFilter'
        - title: RuleNodeDebugEventFilter
          required:
            - eventType
          type: object
          properties:
            error:
              type: boolean
            notEmpty:
              type: boolean
            eventType:
              type: string
              description: String value representing the event type
              example: STATS
              enum:
                - DEBUG_RULE_CHAIN
                - DEBUG_RULE_NODE
                - ERROR
                - LC_EVENT
                - STATS
            server:
              type: string
              description: String value representing the server name, identifier or ip address where the platform is running
              example: ip-172-31-24-152
            msgDirectionType:
              type: string
              description: String value representing msg direction type (incoming to entity or outcoming from entity)
              enum:
                - IN
                - OUT
            entityId:
              type: string
              description: String value representing the entity id in the event body (originator of the message)
              example: de9d54a0-2b7a-11ec-a3cc-23386423d98f
            entityType:
              type: string
              description: String value representing the entity type
              enum:
                - DEVICE
            msgId:
              type: string
              description: String value representing the message id in the rule engine
              example: de9d54a0-2b7a-11ec-a3cc-23386423d98f
            msgType:
              type: string
              description: String value representing the message type
              example: POST_TELEMETRY_REQUEST
            relationType:
              type: string
              description: String value representing the type of message routing
              example: Success
            dataSearch:
              type: string
              description: The case insensitive 'contains' filter based on data (key and value) for the message.
              example: humidity
            metadataSearch:
              type: string
              description: The case insensitive 'contains' filter based on metadata (key and value) for the message.
              example: deviceName
            errorStr:
              type: string
              description: The case insensitive 'contains' filter based on error message
              example: not present in the DB
    RuleNodeId:
      title: RuleNodeId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: RULE_NODE
          enum:
            - RULE_NODE
    SaveDeviceWithCredentialsRequest:
      title: SaveDeviceWithCredentialsRequest
      required:
        - credentials
        - device
      type: object
      properties:
        device:
          description: The JSON with device entity.
          $ref: '#/components/schemas/Device'
        credentials:
          description: The JSON with credentials entity.
          $ref: '#/components/schemas/DeviceCredentials'
    SaveOtaPackageInfoRequest:
      title: SaveOtaPackageInfoRequest
      type: object
      properties:
        id:
          description: JSON object with the ota package Id. Specify existing ota package Id to update the ota package. Referencing non-existing ota package id will cause error. Omit this field to create new ota package.
          $ref: '#/components/schemas/OtaPackageId'
        createdTime:
          type: integer
          description: Timestamp of the ota package creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Tenant Id of the ota package can't be changed.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        deviceProfileId:
          description: JSON object with Device Profile Id. Device Profile Id of the ota package can't be changed.
          $ref: '#/components/schemas/DeviceProfileId'
          readOnly: true
        type:
          type: string
          description: OTA Package type.
          readOnly: true
          example: FIRMWARE
          enum:
            - FIRMWARE
            - SOFTWARE
        title:
          type: string
          description: OTA Package title.
          readOnly: true
          example: fw
        version:
          type: string
          description: OTA Package version.
          readOnly: true
          example: '1.0'
        tag:
          type: string
          description: OTA Package tag.
          readOnly: true
          example: fw_1.0
        url:
          type: string
          description: OTA Package url.
          readOnly: true
          example: http://thingsboard.org/fw/1
        hasData:
          type: boolean
          description: Indicates OTA Package 'has data'. Field is returned from DB ('true' if data exists or url is set).  If OTA Package 'has data' is 'false' we can not assign the OTA Package to the Device or Device Profile.
          readOnly: true
          example: true
        fileName:
          type: string
          description: OTA Package file name.
          readOnly: true
          example: fw_1.0
        contentType:
          type: string
          description: OTA Package content type.
          readOnly: true
          example: APPLICATION_OCTET_STREAM
        checksumAlgorithm:
          type: string
          description: OTA Package checksum algorithm.
          readOnly: true
          example: CRC32
          enum:
            - CRC32
            - MD5
            - MURMUR3_128
            - MURMUR3_32
            - SHA256
            - SHA384
            - SHA512
        checksum:
          type: string
          description: OTA Package checksum.
          readOnly: true
          example: '0xd87f7e0c'
        dataSize:
          type: integer
          description: OTA Package data size.
          format: int64
          readOnly: true
          example: 8
        usesUrl:
          type: boolean
          description: Indicates OTA Package uses url. Should be 'true' if uses url or 'false' if will be used data.
          readOnly: true
          example: true
        additionalInfo:
          description: OTA Package description.
          $ref: '#/components/schemas/JsonNode'
          example: Description for the OTA Package fw_1.0
    SecuritySettings:
      title: SecuritySettings
      type: object
      properties:
        passwordPolicy:
          description: The user password policy object.
          $ref: '#/components/schemas/UserPasswordPolicy'
        maxFailedLoginAttempts:
          type: integer
          description: Maximum number of failed login attempts allowed before user account is locked.
          format: int32
        userLockoutNotificationEmail:
          type: string
          description: Email to use for notifications about locked users.
    SharedAttributesSettingSnmpCommunicationConfig:
      title: SharedAttributesSettingSnmpCommunicationConfig
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/SnmpMapping'
        spec:
          type: string
          enum:
            - CLIENT_ATTRIBUTES_QUERYING
            - SHARED_ATTRIBUTES_SETTING
            - TELEMETRY_QUERYING
            - TO_DEVICE_RPC_REQUEST
            - TO_SERVER_RPC_REQUEST
      allOf:
        - $ref: '#/components/schemas/SnmpCommunicationConfig'
        - title: SharedAttributesSettingSnmpCommunicationConfig
          type: object
          properties:
            mappings:
              type: array
              items:
                $ref: '#/components/schemas/SnmpMapping'
            spec:
              type: string
              enum:
                - CLIENT_ATTRIBUTES_QUERYING
                - SHARED_ATTRIBUTES_SETTING
                - TELEMETRY_QUERYING
                - TO_DEVICE_RPC_REQUEST
                - TO_SERVER_RPC_REQUEST
    ShortCustomerInfo:
      title: ShortCustomerInfo
      type: object
      properties:
        public:
          type: boolean
        customerId:
          description: JSON object with the customer Id.
          $ref: '#/components/schemas/CustomerId'
        title:
          type: string
          description: Title of the customer.
    SignUpRequest:
      title: SignUpRequest
      type: object
      properties:
        appSecret:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        pkgName:
          type: string
        recaptchaResponse:
          type: string
    SimpleAlarmConditionSpec:
      title: SimpleAlarmConditionSpec
      allOf:
        - $ref: '#/components/schemas/AlarmConditionSpec'
        - title: SimpleAlarmConditionSpec
          type: object
    SingleEntityFilter:
      title: SingleEntityFilter
      properties:
        singleEntity:
          $ref: '#/components/schemas/EntityId'
      allOf:
        - $ref: '#/components/schemas/EntityFilter'
        - title: SingleEntityFilter
          type: object
          properties:
            singleEntity:
              $ref: '#/components/schemas/EntityId'
    SingleEntityVersionCreateRequest:
      title: SingleEntityVersionCreateRequest
      properties:
        branch:
          type: string
        config:
          $ref: '#/components/schemas/VersionCreateConfig'
        entityId:
          $ref: '#/components/schemas/EntityId'
        type:
          type: string
          enum:
            - COMPLEX
            - SINGLE_ENTITY
        versionName:
          type: string
      allOf:
        - $ref: '#/components/schemas/VersionCreateRequest'
        - title: SingleEntityVersionCreateRequest
          type: object
          properties:
            branch:
              type: string
            config:
              $ref: '#/components/schemas/VersionCreateConfig'
            entityId:
              $ref: '#/components/schemas/EntityId'
            type:
              type: string
              enum:
                - COMPLEX
                - SINGLE_ENTITY
            versionName:
              type: string
    SingleEntityVersionLoadRequest:
      title: SingleEntityVersionLoadRequest
      properties:
        config:
          $ref: '#/components/schemas/VersionLoadConfig'
        externalEntityId:
          $ref: '#/components/schemas/EntityId'
        type:
          type: string
          enum:
            - ENTITY_TYPE
            - SINGLE_ENTITY
        versionId:
          type: string
      allOf:
        - $ref: '#/components/schemas/VersionLoadRequest'
        - title: SingleEntityVersionLoadRequest
          type: object
          properties:
            config:
              $ref: '#/components/schemas/VersionLoadConfig'
            externalEntityId:
              $ref: '#/components/schemas/EntityId'
            type:
              type: string
              enum:
                - ENTITY_TYPE
                - SINGLE_ENTITY
            versionId:
              type: string
    SlackConversation:
      title: SlackConversation
      required:
        - type
      type: object
      properties:
        email:
          type: string
        id:
          type: string
        name:
          type: string
        title:
          type: string
        type:
          type: string
          enum:
            - DIRECT
            - PRIVATE_CHANNEL
            - PUBLIC_CHANNEL
        wholeName:
          type: string
    SlackDeliveryMethodNotificationTemplate:
      title: SlackDeliveryMethodNotificationTemplate
      type: object
      properties:
        body:
          type: string
        enabled:
          type: boolean
    SlackNotificationDeliveryMethodConfig:
      title: SlackNotificationDeliveryMethodConfig
      type: object
      properties:
        botToken:
          type: string
    SlackNotificationTargetConfig:
      title: SlackNotificationTargetConfig
      properties:
        conversation:
          $ref: '#/components/schemas/SlackConversation'
        conversationType:
          type: string
          enum:
            - DIRECT
            - PRIVATE_CHANNEL
            - PUBLIC_CHANNEL
        description:
          type: string
      allOf:
        - $ref: '#/components/schemas/NotificationTargetConfig'
        - title: SlackNotificationTargetConfig
          required:
            - conversation
          type: object
          properties:
            conversation:
              $ref: '#/components/schemas/SlackConversation'
            conversationType:
              type: string
              enum:
                - DIRECT
                - PRIVATE_CHANNEL
                - PUBLIC_CHANNEL
            description:
              type: string
    SmppSmsProviderConfiguration:
      title: SmppSmsProviderConfiguration
      properties:
        addressRange:
          type: string
          description: Address range
        bindType:
          type: string
          description: TX - Transmitter, RX - Receiver, TRX - Transciever. By default TX is used
          enum:
            - RX
            - TRX
            - TX
        codingScheme:
          type: string
          description: |-
            0 - SMSC Default Alphabet (ASCII for short and long code and to GSM for toll-free, used as default)
            1 - IA5 (ASCII for short and long code, Latin 9 for toll-free (ISO-8859-9))
            2 - Octet Unspecified (8-bit binary)
            3 - Latin 1 (ISO-8859-1)
            4 - Octet Unspecified (8-bit binary)
            5 - JIS (X 0208-1990)
            6 - Cyrillic (ISO-8859-5)
            7 - Latin/Hebrew (ISO-8859-8)
            8 - UCS2/UTF-16 (ISO/IEC-10646)
            9 - Pictogram Encoding
            10 - Music Codes (ISO-2022-JP)
            13 - Extended Kanji JIS (X 0212-1990)
            14 - Korean Graphic Character Set (KS C 5601/KS X 1001)
          format: byte
        destinationNpi:
          type: string
          description: |-
            Destination NPI (Numbering Plan Identification). 0 by default.
            0 - Unknown
            1 - ISDN/telephone numbering plan (E163/E164)
            3 - Data numbering plan (X.121)
            4 - Telex numbering plan (F.69)
            6 - Land Mobile (E.212) =6
            8 - National numbering plan
            9 - Private numbering plan
            10 - ERMES numbering plan (ETSI DE/PS 3 01-3)
            13 - Internet (IP)
            18 - WAP Client Id (to be defined by WAP Forum)
          format: byte
        destinationTon:
          type: string
          description: |-
            Destination TON (Type of Number). 5 by default.
            0 - Unknown
            1 - International
            2 - National
            3 - Network Specific
            4 - Subscriber Number
            5 - Alphanumeric
            6 - Abbreviated
          format: byte
        host:
          type: string
          description: SMPP host
        password:
          type: string
          description: Password
        port:
          type: integer
          description: SMPP port
          format: int32
        protocolVersion:
          type: string
          description: SMPP version
          enum:
            - '3.3'
            - '3.4'
        serviceType:
          type: string
          description: Service type
        sourceAddress:
          type: string
          description: Source address
        sourceNpi:
          type: string
          description: |-
            Source NPI (Numbering Plan Identification). Needed is source address is set. 0 by default.
            0 - Unknown
            1 - ISDN/telephone numbering plan (E163/E164)
            3 - Data numbering plan (X.121)
            4 - Telex numbering plan (F.69)
            6 - Land Mobile (E.212) =6
            8 - National numbering plan
            9 - Private numbering plan
            10 - ERMES numbering plan (ETSI DE/PS 3 01-3)
            13 - Internet (IP)
            18 - WAP Client Id (to be defined by WAP Forum)
          format: byte
        sourceTon:
          type: string
          description: |-
            Source TON (Type of Number). Needed is source address is set. 5 by default.
            0 - Unknown
            1 - International
            2 - National
            3 - Network Specific
            4 - Subscriber Number
            5 - Alphanumeric
            6 - Abbreviated
          format: byte
        systemId:
          type: string
          description: System ID
        systemType:
          type: string
          description: System type
      allOf:
        - $ref: '#/components/schemas/SmsProviderConfiguration'
        - title: SmppSmsProviderConfiguration
          required:
            - host
            - password
            - port
            - protocolVersion
            - systemId
          type: object
          properties:
            addressRange:
              type: string
              description: Address range
            bindType:
              type: string
              description: TX - Transmitter, RX - Receiver, TRX - Transciever. By default TX is used
              enum:
                - RX
                - TRX
                - TX
            codingScheme:
              type: string
              description: |-
                0 - SMSC Default Alphabet (ASCII for short and long code and to GSM for toll-free, used as default)
                1 - IA5 (ASCII for short and long code, Latin 9 for toll-free (ISO-8859-9))
                2 - Octet Unspecified (8-bit binary)
                3 - Latin 1 (ISO-8859-1)
                4 - Octet Unspecified (8-bit binary)
                5 - JIS (X 0208-1990)
                6 - Cyrillic (ISO-8859-5)
                7 - Latin/Hebrew (ISO-8859-8)
                8 - UCS2/UTF-16 (ISO/IEC-10646)
                9 - Pictogram Encoding
                10 - Music Codes (ISO-2022-JP)
                13 - Extended Kanji JIS (X 0212-1990)
                14 - Korean Graphic Character Set (KS C 5601/KS X 1001)
              format: byte
            destinationNpi:
              type: string
              description: |-
                Destination NPI (Numbering Plan Identification). 0 by default.
                0 - Unknown
                1 - ISDN/telephone numbering plan (E163/E164)
                3 - Data numbering plan (X.121)
                4 - Telex numbering plan (F.69)
                6 - Land Mobile (E.212) =6
                8 - National numbering plan
                9 - Private numbering plan
                10 - ERMES numbering plan (ETSI DE/PS 3 01-3)
                13 - Internet (IP)
                18 - WAP Client Id (to be defined by WAP Forum)
              format: byte
            destinationTon:
              type: string
              description: |-
                Destination TON (Type of Number). 5 by default.
                0 - Unknown
                1 - International
                2 - National
                3 - Network Specific
                4 - Subscriber Number
                5 - Alphanumeric
                6 - Abbreviated
              format: byte
            host:
              type: string
              description: SMPP host
            password:
              type: string
              description: Password
            port:
              type: integer
              description: SMPP port
              format: int32
            protocolVersion:
              type: string
              description: SMPP version
              enum:
                - '3.3'
                - '3.4'
            serviceType:
              type: string
              description: Service type
            sourceAddress:
              type: string
              description: Source address
            sourceNpi:
              type: string
              description: |-
                Source NPI (Numbering Plan Identification). Needed is source address is set. 0 by default.
                0 - Unknown
                1 - ISDN/telephone numbering plan (E163/E164)
                3 - Data numbering plan (X.121)
                4 - Telex numbering plan (F.69)
                6 - Land Mobile (E.212) =6
                8 - National numbering plan
                9 - Private numbering plan
                10 - ERMES numbering plan (ETSI DE/PS 3 01-3)
                13 - Internet (IP)
                18 - WAP Client Id (to be defined by WAP Forum)
              format: byte
            sourceTon:
              type: string
              description: |-
                Source TON (Type of Number). Needed is source address is set. 5 by default.
                0 - Unknown
                1 - International
                2 - National
                3 - Network Specific
                4 - Subscriber Number
                5 - Alphanumeric
                6 - Abbreviated
              format: byte
            systemId:
              type: string
              description: System ID
            systemType:
              type: string
              description: System type
    SmsDeliveryMethodNotificationTemplate:
      title: SmsDeliveryMethodNotificationTemplate
      type: object
      properties:
        body:
          type: string
        enabled:
          type: boolean
    SmsProviderConfiguration:
      title: SmsProviderConfiguration
      type: object
    SmsTwoFaAccountConfig:
      title: SmsTwoFaAccountConfig
      properties:
        phoneNumber:
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        useByDefault:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/TwoFaAccountConfig'
        - title: SmsTwoFaAccountConfig
          required:
            - phoneNumber
          type: object
          properties:
            phoneNumber:
              pattern: ^\+[1-9]\d{1,14}$
              type: string
            useByDefault:
              type: boolean
    SmsTwoFaProviderConfig:
      title: SmsTwoFaProviderConfig
      required:
        - smsVerificationMessageTemplate
      type: object
      properties:
        smsVerificationMessageTemplate:
          pattern: .*\$\{code}.*
          type: string
        verificationCodeLifetime:
          type: integer
          format: int32
    SnmpCommunicationConfig:
      title: SnmpCommunicationConfig
      type: object
      properties:
        spec:
          type: string
          enum:
            - CLIENT_ATTRIBUTES_QUERYING
            - SHARED_ATTRIBUTES_SETTING
            - TELEMETRY_QUERYING
            - TO_DEVICE_RPC_REQUEST
            - TO_SERVER_RPC_REQUEST
    SnmpDeviceProfileTransportConfiguration:
      title: SnmpDeviceProfileTransportConfiguration
      properties:
        communicationConfigs:
          type: array
          items:
            $ref: '#/components/schemas/SnmpCommunicationConfig'
        retries:
          type: integer
          format: int32
        timeoutMs:
          type: integer
          format: int32
      allOf:
        - $ref: '#/components/schemas/DeviceProfileTransportConfiguration'
        - title: SnmpDeviceProfileTransportConfiguration
          type: object
          properties:
            communicationConfigs:
              type: array
              items:
                $ref: '#/components/schemas/SnmpCommunicationConfig'
            retries:
              type: integer
              format: int32
            timeoutMs:
              type: integer
              format: int32
    SnmpDeviceTransportConfiguration:
      title: SnmpDeviceTransportConfiguration
      properties:
        authenticationPassphrase:
          type: string
        authenticationProtocol:
          type: string
          enum:
            - MD5
            - SHA_1
            - SHA_224
            - SHA_256
            - SHA_384
            - SHA_512
        community:
          type: string
        contextName:
          type: string
        engineId:
          type: string
        host:
          type: string
        port:
          type: integer
          format: int32
        privacyPassphrase:
          type: string
        privacyProtocol:
          type: string
          enum:
            - AES_128
            - AES_192
            - AES_256
            - DES
        protocolVersion:
          type: string
          enum:
            - V1
            - V2C
            - V3
        securityName:
          type: string
        username:
          type: string
      allOf:
        - $ref: '#/components/schemas/DeviceTransportConfiguration'
        - title: SnmpDeviceTransportConfiguration
          type: object
          properties:
            authenticationPassphrase:
              type: string
            authenticationProtocol:
              type: string
              enum:
                - MD5
                - SHA_1
                - SHA_224
                - SHA_256
                - SHA_384
                - SHA_512
            community:
              type: string
            contextName:
              type: string
            engineId:
              type: string
            host:
              type: string
            port:
              type: integer
              format: int32
            privacyPassphrase:
              type: string
            privacyProtocol:
              type: string
              enum:
                - AES_128
                - AES_192
                - AES_256
                - DES
            protocolVersion:
              type: string
              enum:
                - V1
                - V2C
                - V3
            securityName:
              type: string
            username:
              type: string
    SnmpMapping:
      title: SnmpMapping
      type: object
      properties:
        dataType:
          type: string
          enum:
            - BOOLEAN
            - DOUBLE
            - JSON
            - LONG
            - STRING
        key:
          type: string
        oid:
          type: string
    SpecificTimeSchedule:
      title: SpecificTimeSchedule
      type: object
      properties:
        daysOfWeek:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
        dynamicValue:
          $ref: '#/components/schemas/DynamicValue«string»'
        endsOn:
          type: integer
          format: int64
        startsOn:
          type: integer
          format: int64
        timezone:
          type: string
        type:
          type: string
          enum:
            - ANY_TIME
            - CUSTOM
            - SPECIFIC_TIME
    StarredDashboardInfo:
      title: StarredDashboardInfo
      type: object
      properties:
        id:
          type: string
          description: JSON object with Dashboard id.
          format: uuid
          readOnly: true
        title:
          type: string
          description: Title of the dashboard.
        starredAt:
          type: integer
          description: Starred timestamp
          format: int64
    StatisticsEventFilter:
      title: StatisticsEventFilter
      properties:
        notEmpty:
          type: boolean
        eventType:
          type: string
          description: String value representing the event type
          example: STATS
          enum:
            - DEBUG_RULE_CHAIN
            - DEBUG_RULE_NODE
            - ERROR
            - LC_EVENT
            - STATS
        server:
          type: string
          description: String value representing the server name, identifier or ip address where the platform is running
          example: ip-172-31-24-152
        minMessagesProcessed:
          type: integer
          description: The minimum number of successfully processed messages
          format: int32
          example: 25
        maxMessagesProcessed:
          type: integer
          description: The maximum number of successfully processed messages
          format: int32
          example: 250
        minErrorsOccurred:
          type: integer
          description: The minimum number of errors occurred during messages processing
          format: int32
          example: 30
        maxErrorsOccurred:
          type: integer
          description: The maximum number of errors occurred during messages processing
          format: int32
          example: 300
      allOf:
        - $ref: '#/components/schemas/EventFilter'
        - title: StatisticsEventFilter
          required:
            - eventType
          type: object
          properties:
            notEmpty:
              type: boolean
            eventType:
              type: string
              description: String value representing the event type
              example: STATS
              enum:
                - DEBUG_RULE_CHAIN
                - DEBUG_RULE_NODE
                - ERROR
                - LC_EVENT
                - STATS
            server:
              type: string
              description: String value representing the server name, identifier or ip address where the platform is running
              example: ip-172-31-24-152
            minMessagesProcessed:
              type: integer
              description: The minimum number of successfully processed messages
              format: int32
              example: 25
            maxMessagesProcessed:
              type: integer
              description: The maximum number of successfully processed messages
              format: int32
              example: 250
            minErrorsOccurred:
              type: integer
              description: The minimum number of errors occurred during messages processing
              format: int32
              example: 30
            maxErrorsOccurred:
              type: integer
              description: The maximum number of errors occurred during messages processing
              format: int32
              example: 300
    StringFilterPredicate:
      title: StringFilterPredicate
      properties:
        ignoreCase:
          type: boolean
        operation:
          type: string
          enum:
            - CONTAINS
            - ENDS_WITH
            - EQUAL
            - IN
            - NOT_CONTAINS
            - NOT_EQUAL
            - NOT_IN
            - STARTS_WITH
        value:
          $ref: '#/components/schemas/FilterPredicateValue«string»'
      allOf:
        - $ref: '#/components/schemas/KeyFilterPredicate'
        - title: StringFilterPredicate
          type: object
          properties:
            ignoreCase:
              type: boolean
            operation:
              type: string
              enum:
                - CONTAINS
                - ENDS_WITH
                - EQUAL
                - IN
                - NOT_CONTAINS
                - NOT_EQUAL
                - NOT_IN
                - STARTS_WITH
            value:
              $ref: '#/components/schemas/FilterPredicateValue«string»'
    SubmitStrategy:
      title: SubmitStrategy
      type: object
      properties:
        batchSize:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - BATCH
            - BURST
            - SEQUENTIAL
            - SEQUENTIAL_BY_ORIGINATOR
            - SEQUENTIAL_BY_TENANT
    SystemAdministratorsFilter:
      title: SystemAdministratorsFilter
      type: object
    SystemInfo:
      title: SystemInfo
      type: object
      properties:
        monolith:
          type: boolean
        systemData:
          type: array
          description: System data.
          items:
            $ref: '#/components/schemas/SystemInfoData'
    SystemInfoData:
      title: SystemInfoData
      type: object
      properties:
        serviceId:
          type: string
          description: Service Id.
        serviceType:
          type: string
          description: Service type.
        cpuUsage:
          type: integer
          description: CPU usage, in percent.
          format: int64
        cpuCount:
          type: integer
          description: Total CPU usage.
          format: int64
        memoryUsage:
          type: integer
          description: Memory usage, in percent.
          format: int64
        totalMemory:
          type: integer
          description: Total memory in bytes.
          format: int64
        discUsage:
          type: integer
          description: Disk usage, in percent.
          format: int64
        totalDiscSpace:
          type: integer
          description: Total disc space in bytes.
          format: int64
    TbImageDeleteResult:
      title: TbImageDeleteResult
      type: object
      properties:
        references:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/HasId«object»'
        success:
          type: boolean
    TbResource:
      title: TbResource
      type: object
      properties:
        descriptor:
          $ref: '#/components/schemas/JsonNode'
        link:
          type: string
        name:
          type: string
        preview:
          type: string
        public:
          type: boolean
        publicLink:
          type: string
        publicResourceKey:
          type: string
        id:
          description: JSON object with the Resource Id. Specify this field to update the Resource. Referencing non-existing Resource Id will cause error. Omit this field to create new Resource.
          $ref: '#/components/schemas/TbResourceId'
        createdTime:
          type: integer
          description: Timestamp of the resource creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Tenant Id of the resource can't be changed.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        title:
          type: string
          description: Resource title.
          example: BinaryAppDataContainer id=19 v1.0
        resourceType:
          type: string
          description: Resource type.
          readOnly: true
          example: LWM2M_MODEL
          enum:
            - IMAGE
            - JKS
            - JS_MODULE
            - LWM2M_MODEL
            - PKCS_12
        resourceKey:
          type: string
          description: Resource key.
          readOnly: true
          example: '19_1.0'
        etag:
          type: string
          description: Resource etag.
          readOnly: true
          example: 33a64df551425fcc55e4d42a148795d9f25f89d4
        fileName:
          type: string
          description: Resource file name.
          readOnly: true
          example: 19.xml
        data:
          type: string
          description: Resource data.
          example: 77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCEtLQpGSUxFIElORk9STUFUSU9OCgpPTUEgUGVybWFuZW50IERvY3VtZW50CiAgIEZpbGU6IE9NQS1TVVAtTHdNMk1fQmluYXJ5QXBwRGF0YUNvbnRhaW5lci1WMV8wXzEtMjAxOTAyMjEtQQogICBUeXBlOiB4bWwKClB1YmxpYyBSZWFjaGFibGUgSW5mb3JtYXRpb24KICAgUGF0aDogaHR0cDovL3d3dy5vcGVubW9iaWxlYWxsaWFuY2Uub3JnL3RlY2gvcHJvZmlsZXMKICAgTmFtZTogTHdNMk1fQmluYXJ5QXBwRGF0YUNvbnRhaW5lci12MV8wXzEueG1sCgpOT1JNQVRJVkUgSU5GT1JNQVRJT04KCiAgSW5mb3JtYXRpb24gYWJvdXQgdGhpcyBmaWxlIGNhbiBiZSBmb3VuZCBpbiB0aGUgbGF0ZXN0IHJldmlzaW9uIG9mCgogIE9NQS1UUy1MV00yTV9CaW5hcnlBcHBEYXRhQ29udGFpbmVyLVYxXzBfMQoKICBUaGlzIGlzIGF2YWlsYWJsZSBhdCBodHRwOi8vd3d3Lm9wZW5tb2JpbGVhbGxpYW5jZS5vcmcvCgogIFNlbmQgY29tbWVudHMgdG8gaHR0cHM6Ly9naXRodWIuY29tL09wZW5Nb2JpbGVBbGxpYW5jZS9PTUFfTHdNMk1fZm9yX0RldmVsb3BlcnMvaXNzdWVzCgpDSEFOR0UgSElTVE9SWQoKMTUwNjIwMTggU3RhdHVzIGNoYW5nZWQgdG8gQXBwcm92ZWQgYnkgRE0sIERvYyBSZWYgIyBPTUEtRE0mU0UtMjAxOC0wMDYxLUlOUF9MV00yTV9BUFBEQVRBX1YxXzBfRVJQX2Zvcl9maW5hbF9BcHByb3ZhbAoyMTAyMjAxOSBTdGF0dXMgY2hhbmdlZCB0byBBcHByb3ZlZCBieSBJUFNPLCBEb2MgUmVmICMgT01BLUlQU08tMjAxOS0wMDI1LUlOUF9Md00yTV9PYmplY3RfQXBwX0RhdGFfQ29udGFpbmVyXzFfMF8xX2Zvcl9GaW5hbF9BcHByb3ZhbAoKTEVHQUwgRElTQ0xBSU1FUgoKQ29weXJpZ2h0IDIwMTkgT3BlbiBNb2JpbGUgQWxsaWFuY2UuCgpSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQKbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zCmFyZSBtZXQ6CgoxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodApub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCjIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0Cm5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUKZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cwpjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQKZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLgoKVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUwoiQVMgSVMiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVApMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUwpGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQpDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULApJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLApCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7CkxPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIKQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUCkxJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOCkFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRQpQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KClRoZSBhYm92ZSBsaWNlbnNlIGlzIHVzZWQgYXMgYSBsaWNlbnNlIHVuZGVyIGNvcHlyaWdodCBvbmx5LiBQbGVhc2UKcmVmZXJlbmNlIHRoZSBPTUEgSVBSIFBvbGljeSBmb3IgcGF0ZW50IGxpY2Vuc2luZyB0ZXJtczoKaHR0cHM6Ly93d3cub21hc3BlY3dvcmtzLm9yZy9hYm91dC9pbnRlbGxlY3R1YWwtcHJvcGVydHktcmlnaHRzLwoKLS0+CjxMV00yTSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bm9OYW1lc3BhY2VTY2hlbWFMb2NhdGlvbj0iaHR0cDovL29wZW5tb2JpbGVhbGxpYW5jZS5vcmcvdGVjaC9wcm9maWxlcy9MV00yTS54c2QiPgoJPE9iamVjdCBPYmplY3RUeXBlPSJNT0RlZmluaXRpb24iPgoJCTxOYW1lPkJpbmFyeUFwcERhdGFDb250YWluZXI8L05hbWU+CgkJPERlc2NyaXB0aW9uMT48IVtDREFUQVtUaGlzIEx3TTJNIE9iamVjdHMgcHJvdmlkZXMgdGhlIGFwcGxpY2F0aW9uIHNlcnZpY2UgZGF0YSByZWxhdGVkIHRvIGEgTHdNMk0gU2VydmVyLCBlZy4gV2F0ZXIgbWV0ZXIgZGF0YS4gClRoZXJlIGFyZSBzZXZlcmFsIG1ldGhvZHMgdG8gY3JlYXRlIGluc3RhbmNlIHRvIGluZGljYXRlIHRoZSBtZXNzYWdlIGRpcmVjdGlvbiBiYXNlZCBvbiB0aGUgbmVnb3RpYXRpb24gYmV0d2VlbiBBcHBsaWNhdGlvbiBhbmQgTHdNMk0uIFRoZSBDbGllbnQgYW5kIFNlcnZlciBzaG91bGQgbmVnb3RpYXRlIHRoZSBpbnN0YW5jZShzKSB1c2VkIHRvIGV4Y2hhbmdlIHRoZSBkYXRhLiBGb3IgZXhhbXBsZToKIC0gVXNpbmcgYSBzaW5nbGUgaW5zdGFuY2UgZm9yIGJvdGggZGlyZWN0aW9ucyBjb21tdW5pY2F0aW9uLCBmcm9tIENsaWVudCB0byBTZXJ2ZXIgYW5kIGZyb20gU2VydmVyIHRvIENsaWVudC4KIC0gVXNpbmcgYW4gaW5zdGFuY2UgZm9yIGNvbW11bmljYXRpb24gZnJvbSBDbGllbnQgdG8gU2VydmVyIGFuZCBhbm90aGVyIG9uZSBmb3IgY29tbXVuaWNhdGlvbiBmcm9tIFNlcnZlciB0byBDbGllbnQKIC0gVXNpbmcgc2V2ZXJhbCBpbnN0YW5jZXMKXV0+PC9EZXNjcmlwdGlvbjE+CgkJPE9iamVjdElEPjE5PC9PYmplY3RJRD4KCQk8T2JqZWN0VVJOPnVybjpvbWE6bHdtMm06b21hOjE5PC9PYmplY3RVUk4+CgkJPExXTTJNVmVyc2lvbj4xLjA8L0xXTTJNVmVyc2lvbj4KCQk8T2JqZWN0VmVyc2lvbj4xLjA8L09iamVjdFZlcnNpb24+CgkJPE11bHRpcGxlSW5zdGFuY2VzPk11bHRpcGxlPC9NdWx0aXBsZUluc3RhbmNlcz4KCQk8TWFuZGF0b3J5Pk9wdGlvbmFsPC9NYW5kYXRvcnk+CgkJPFJlc291cmNlcz4KCQkJPEl0ZW0gSUQ9IjAiPjxOYW1lPkRhdGE8L05hbWU+CgkJCQk8T3BlcmF0aW9ucz5SVzwvT3BlcmF0aW9ucz4KCQkJCTxNdWx0aXBsZUluc3RhbmNlcz5NdWx0aXBsZTwvTXVsdGlwbGVJbnN0YW5jZXM+CgkJCQk8TWFuZGF0b3J5Pk1hbmRhdG9yeTwvTWFuZGF0b3J5PgoJCQkJPFR5cGU+T3BhcXVlPC9UeXBlPgoJCQkJPFJhbmdlRW51bWVyYXRpb24gLz4KCQkJCTxVbml0cyAvPgoJCQkJPERlc2NyaXB0aW9uPjwhW0NEQVRBW0luZGljYXRlcyB0aGUgYXBwbGljYXRpb24gZGF0YSBjb250ZW50Ll1dPjwvRGVzY3JpcHRpb24+CgkJCTwvSXRlbT4KCQkJPEl0ZW0gSUQ9IjEiPjxOYW1lPkRhdGEgUHJpb3JpdHk8L05hbWU+CgkJCQk8T3BlcmF0aW9ucz5SVzwvT3BlcmF0aW9ucz4KCQkJCTxNdWx0aXBsZUluc3RhbmNlcz5TaW5nbGU8L011bHRpcGxlSW5zdGFuY2VzPgoJCQkJPE1hbmRhdG9yeT5PcHRpb25hbDwvTWFuZGF0b3J5PgoJCQkJPFR5cGU+SW50ZWdlcjwvVHlwZT4KCQkJCTxSYW5nZUVudW1lcmF0aW9uPjEgYnl0ZXM8L1JhbmdlRW51bWVyYXRpb24+CgkJCQk8VW5pdHMgLz4KCQkJCTxEZXNjcmlwdGlvbj48IVtDREFUQVtJbmRpY2F0ZXMgdGhlIEFwcGxpY2F0aW9uIGRhdGEgcHJpb3JpdHk6CjA6SW1tZWRpYXRlCjE6QmVzdEVmZm9ydAoyOkxhdGVzdAozLTEwMDogUmVzZXJ2ZWQgZm9yIGZ1dHVyZSB1c2UuCjEwMS0yNTQ6IFByb3ByaWV0YXJ5IG1vZGUuXV0+PC9EZXNjcmlwdGlvbj4KCQkJPC9JdGVtPgoJCQk8SXRlbSBJRD0iMiI+PE5hbWU+RGF0YSBDcmVhdGlvbiBUaW1lPC9OYW1lPgoJCQkJPE9wZXJhdGlvbnM+Ulc8L09wZXJhdGlvbnM+CgkJCQk8TXVsdGlwbGVJbnN0YW5jZXM+U2luZ2xlPC9NdWx0aXBsZUluc3RhbmNlcz4KCQkJCTxNYW5kYXRvcnk+T3B0aW9uYWw8L01hbmRhdG9yeT4KCQkJCTxUeXBlPlRpbWU8L1R5cGU+CgkJCQk8UmFuZ2VFbnVtZXJhdGlvbiAvPgoJCQkJPFVuaXRzIC8+CgkJCQk8RGVzY3JpcHRpb24+PCFbQ0RBVEFbSW5kaWNhdGVzIHRoZSBEYXRhIGluc3RhbmNlIGNyZWF0aW9uIHRpbWVzdGFtcC5dXT48L0Rlc2NyaXB0aW9uPgoJCQk8L0l0ZW0+CgkJCTxJdGVtIElEPSIzIj48TmFtZT5EYXRhIERlc2NyaXB0aW9uPC9OYW1lPgoJCQkJPE9wZXJhdGlvbnM+Ulc8L09wZXJhdGlvbnM+CgkJCQk8TXVsdGlwbGVJbnN0YW5jZXM+U2luZ2xlPC9NdWx0aXBsZUluc3RhbmNlcz4KCQkJCTxNYW5kYXRvcnk+T3B0aW9uYWw8L01hbmRhdG9yeT4KCQkJCTxUeXBlPlN0cmluZzwvVHlwZT4KCQkJCTxSYW5nZUVudW1lcmF0aW9uPjMyIGJ5dGVzPC9SYW5nZUVudW1lcmF0aW9uPgoJCQkJPFVuaXRzIC8+CgkJCQk8RGVzY3JpcHRpb24+PCFbQ0RBVEFbSW5kaWNhdGVzIHRoZSBkYXRhIGRlc2NyaXB0aW9uLgplLmcuICJtZXRlciByZWFkaW5nIi5dXT48L0Rlc2NyaXB0aW9uPgoJCQk8L0l0ZW0+CgkJCTxJdGVtIElEPSI0Ij48TmFtZT5EYXRhIEZvcm1hdDwvTmFtZT4KCQkJCTxPcGVyYXRpb25zPlJXPC9PcGVyYXRpb25zPgoJCQkJPE11bHRpcGxlSW5zdGFuY2VzPlNpbmdsZTwvTXVsdGlwbGVJbnN0YW5jZXM+CgkJCQk8TWFuZGF0b3J5Pk9wdGlvbmFsPC9NYW5kYXRvcnk+CgkJCQk8VHlwZT5TdHJpbmc8L1R5cGU+CgkJCQk8UmFuZ2VFbnVtZXJhdGlvbj4zMiBieXRlczwvUmFuZ2VFbnVtZXJhdGlvbj4KCQkJCTxVbml0cyAvPgoJCQkJPERlc2NyaXB0aW9uPjwhW0NEQVRBW0luZGljYXRlcyB0aGUgZm9ybWF0IG9mIHRoZSBBcHBsaWNhdGlvbiBEYXRhLgplLmcuIFlHLU1ldGVyLVdhdGVyLVJlYWRpbmcKVVRGOC1zdHJpbmcKXV0+PC9EZXNjcmlwdGlvbj4KCQkJPC9JdGVtPgoJCQk8SXRlbSBJRD0iNSI+PE5hbWU+QXBwIElEPC9OYW1lPgoJCQkJPE9wZXJhdGlvbnM+Ulc8L09wZXJhdGlvbnM+CgkJCQk8TXVsdGlwbGVJbnN0YW5jZXM+U2luZ2xlPC9NdWx0aXBsZUluc3RhbmNlcz4KCQkJCTxNYW5kYXRvcnk+T3B0aW9uYWw8L01hbmRhdG9yeT4KCQkJCTxUeXBlPkludGVnZXI8L1R5cGU+CgkJCQk8UmFuZ2VFbnVtZXJhdGlvbj4yIGJ5dGVzPC9SYW5nZUVudW1lcmF0aW9uPgoJCQkJPFVuaXRzIC8+CgkJCQk8RGVzY3JpcHRpb24+PCFbQ0RBVEFbSW5kaWNhdGVzIHRoZSBkZXN0aW5hdGlvbiBBcHBsaWNhdGlvbiBJRC5dXT48L0Rlc2NyaXB0aW9uPgoJCQk8L0l0ZW0+PC9SZXNvdXJjZXM+CgkJPERlc2NyaXB0aW9uMj48IVtDREFUQVtdXT48L0Rlc2NyaXB0aW9uMj4KCTwvT2JqZWN0Pgo8L0xXTTJNPgo=
    TbResourceId:
      title: TbResourceId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: TB_RESOURCE
          enum:
            - TB_RESOURCE
    TbResourceInfo:
      title: TbResourceInfo
      type: object
      properties:
        descriptor:
          $ref: '#/components/schemas/JsonNode'
        link:
          type: string
        name:
          type: string
        public:
          type: boolean
        publicLink:
          type: string
        publicResourceKey:
          type: string
        id:
          description: JSON object with the Resource Id. Specify this field to update the Resource. Referencing non-existing Resource Id will cause error. Omit this field to create new Resource.
          $ref: '#/components/schemas/TbResourceId'
        createdTime:
          type: integer
          description: Timestamp of the resource creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id. Tenant Id of the resource can't be changed.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        title:
          type: string
          description: Resource title.
          example: BinaryAppDataContainer id=19 v1.0
        resourceType:
          type: string
          description: Resource type.
          readOnly: true
          example: LWM2M_MODEL
          enum:
            - IMAGE
            - JKS
            - JS_MODULE
            - LWM2M_MODEL
            - PKCS_12
        resourceKey:
          type: string
          description: Resource key.
          readOnly: true
          example: '19_1.0'
        etag:
          type: string
          description: Resource etag.
          readOnly: true
          example: 33a64df551425fcc55e4d42a148795d9f25f89d4
        fileName:
          type: string
          description: Resource file name.
          readOnly: true
          example: 19.xml
    TelemetryEntityView:
      title: TelemetryEntityView
      required:
        - attributes
        - timeseries
      type: object
      properties:
        timeseries:
          type: array
          description: List of time-series data keys to expose
          example: temperature, humidity
          items:
            type: string
        attributes:
          description: JSON object with attributes to expose
          $ref: '#/components/schemas/AttributesEntityView'
    TelemetryMappingConfiguration:
      title: TelemetryMappingConfiguration
      type: object
      properties:
        attribute:
          uniqueItems: true
          type: array
          items:
            type: string
        attributeLwm2m:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ObjectAttributes'
        keyName:
          type: object
          additionalProperties:
            type: string
        observe:
          uniqueItems: true
          type: array
          items:
            type: string
        telemetry:
          uniqueItems: true
          type: array
          items:
            type: string
    TelemetryQueryingSnmpCommunicationConfig:
      title: TelemetryQueryingSnmpCommunicationConfig
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/SnmpMapping'
        queryingFrequencyMs:
          type: integer
          format: int64
        spec:
          type: string
          enum:
            - CLIENT_ATTRIBUTES_QUERYING
            - SHARED_ATTRIBUTES_SETTING
            - TELEMETRY_QUERYING
            - TO_DEVICE_RPC_REQUEST
            - TO_SERVER_RPC_REQUEST
      allOf:
        - $ref: '#/components/schemas/SnmpCommunicationConfig'
        - title: TelemetryQueryingSnmpCommunicationConfig
          type: object
          properties:
            mappings:
              type: array
              items:
                $ref: '#/components/schemas/SnmpMapping'
            queryingFrequencyMs:
              type: integer
              format: int64
            spec:
              type: string
              enum:
                - CLIENT_ATTRIBUTES_QUERYING
                - SHARED_ATTRIBUTES_SETTING
                - TELEMETRY_QUERYING
                - TO_DEVICE_RPC_REQUEST
                - TO_SERVER_RPC_REQUEST
    Tenant:
      title: Tenant
      required:
        - email
        - title
      type: object
      properties:
        id:
          description: JSON object with the tenant Id. Specify this field to update the tenant. Referencing non-existing tenant Id will cause error. Omit this field to create new tenant.
          $ref: '#/components/schemas/TenantId'
        createdTime:
          type: integer
          description: Timestamp of the tenant creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        title:
          type: string
          description: Title of the tenant
          example: Company A
        name:
          type: string
          description: Name of the tenant. Read-only, duplicated from title for backward compatibility
          readOnly: true
          example: Company A
        region:
          type: string
          description: Geo region of the tenant
          example: North America
        tenantProfileId:
          description: JSON object with Tenant Profile Id
          $ref: '#/components/schemas/TenantProfileId'
        country:
          type: string
          description: Country
          example: US
        state:
          type: string
          description: State
          example: NY
        city:
          type: string
          description: City
          example: New York
        address:
          type: string
          description: Address Line 1
          example: 42 Broadway Suite 12-400
        address2:
          type: string
          description: Address Line 2
        zip:
          type: string
          description: Zip code
          example: '10004'
        phone:
          type: string
          description: Phone number
          example: +1(415)777-7777
        email:
          type: string
          description: Email
          example: example@company.com
        additionalInfo:
          description: Additional parameters of the device
          $ref: '#/components/schemas/JsonNode'
    TenantAdministratorsFilter:
      title: TenantAdministratorsFilter
      properties:
        tenantProfilesIds:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
        tenantsIds:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      allOf:
        - $ref: '#/components/schemas/UsersFilter'
        - title: TenantAdministratorsFilter
          type: object
          properties:
            tenantProfilesIds:
              uniqueItems: true
              type: array
              items:
                type: string
                format: uuid
            tenantsIds:
              uniqueItems: true
              type: array
              items:
                type: string
                format: uuid
    TenantId:
      title: TenantId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: TENANT
          enum:
            - TENANT
    TenantInfo:
      title: TenantInfo
      required:
        - email
        - title
      type: object
      properties:
        id:
          description: JSON object with the tenant Id. Specify this field to update the tenant. Referencing non-existing tenant Id will cause error. Omit this field to create new tenant.
          $ref: '#/components/schemas/TenantId'
        createdTime:
          type: integer
          description: Timestamp of the tenant creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        title:
          type: string
          description: Title of the tenant
          example: Company A
        name:
          type: string
          description: Name of the tenant. Read-only, duplicated from title for backward compatibility
          readOnly: true
          example: Company A
        region:
          type: string
          description: Geo region of the tenant
          example: North America
        tenantProfileId:
          description: JSON object with Tenant Profile Id
          $ref: '#/components/schemas/TenantProfileId'
        country:
          type: string
          description: Country
          example: US
        state:
          type: string
          description: State
          example: NY
        city:
          type: string
          description: City
          example: New York
        address:
          type: string
          description: Address Line 1
          example: 42 Broadway Suite 12-400
        address2:
          type: string
          description: Address Line 2
        zip:
          type: string
          description: Zip code
          example: '10004'
        phone:
          type: string
          description: Phone number
          example: +1(415)777-7777
        email:
          type: string
          description: Email
          example: example@company.com
        additionalInfo:
          description: Additional parameters of the device
          $ref: '#/components/schemas/JsonNode'
        tenantProfileName:
          type: string
          description: Tenant Profile name
          example: Default
    TenantProfile:
      title: TenantProfile
      type: object
      properties:
        default:
          type: boolean
        id:
          description: JSON object with the tenant profile Id. Specify this field to update the tenant profile. Referencing non-existing tenant profile Id will cause error. Omit this field to create new tenant profile.
          $ref: '#/components/schemas/TenantProfileId'
        createdTime:
          type: integer
          description: Timestamp of the tenant profile creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        name:
          type: string
          description: Name of the tenant profile
          example: High Priority Tenants
        description:
          type: string
          description: Description of the tenant profile
          example: Any text
        isolatedTbRuleEngine:
          type: boolean
          description: If enabled, will push all messages related to this tenant and processed by the rule engine into separate queue. Useful for complex microservices deployments, to isolate processing of the data for specific tenants
          example: true
        profileData:
          description: 'Complex JSON object that contains profile settings: queue configs, max devices, max assets, rate limits, etc.'
          $ref: '#/components/schemas/TenantProfileData'
    TenantProfileConfiguration:
      title: TenantProfileConfiguration
      type: object
    TenantProfileData:
      title: TenantProfileData
      type: object
      properties:
        configuration:
          description: 'Complex JSON object that contains profile settings: max devices, max assets, rate limits, etc.'
          $ref: '#/components/schemas/TenantProfileConfiguration'
        queueConfiguration:
          type: array
          description: JSON array of queue configuration per tenant profile
          items:
            $ref: '#/components/schemas/TenantProfileQueueConfiguration'
    TenantProfileId:
      title: TenantProfileId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: TENANT_PROFILE
          enum:
            - TENANT_PROFILE
    TenantProfileQueueConfiguration:
      title: TenantProfileQueueConfiguration
      type: object
      properties:
        additionalInfo:
          $ref: '#/components/schemas/JsonNode'
        consumerPerPartition:
          type: boolean
        name:
          type: string
        packProcessingTimeout:
          type: integer
          format: int64
        partitions:
          type: integer
          format: int32
        pollInterval:
          type: integer
          format: int32
        processingStrategy:
          $ref: '#/components/schemas/ProcessingStrategy'
        submitStrategy:
          $ref: '#/components/schemas/SubmitStrategy'
        topic:
          type: string
    TestSmsRequest:
      title: TestSmsRequest
      type: object
      properties:
        providerConfiguration:
          description: The SMS provider configuration
          $ref: '#/components/schemas/SmsProviderConfiguration'
        numberTo:
          type: string
          description: The phone number or other identifier to specify as a recipient of the SMS.
        message:
          type: string
          description: The test message
    ThingsboardCredentialsExpiredResponse:
      title: ThingsboardCredentialsExpiredResponse
      type: object
      properties:
        status:
          type: integer
          description: HTTP Response Status Code
          format: int32
          readOnly: true
          example: 401
        message:
          type: string
          description: Error message
          readOnly: true
          example: Authentication failed
        errorCode:
          type: object
          description: |-
            Platform error code:
            * `2` - General error (HTTP: 500 - Internal Server Error)

            * `10` - Authentication failed (HTTP: 401 - Unauthorized)

            * `11` - JWT token expired (HTTP: 401 - Unauthorized)

            * `15` - Credentials expired (HTTP: 401 - Unauthorized)

            * `20` - Permission denied (HTTP: 403 - Forbidden)

            * `30` - Invalid arguments (HTTP: 400 - Bad Request)

            * `31` - Bad request params (HTTP: 400 - Bad Request)

            * `32` - Item not found (HTTP: 404 - Not Found)

            * `33` - Too many requests (HTTP: 429 - Too Many Requests)

            * `34` - Too many updates (Too many updates over Websocket session)

            * `40` - Subscription violation (HTTP: 403 - Forbidden)
          readOnly: true
          example: '10'
        timestamp:
          type: string
          description: Timestamp
          format: date-time
          readOnly: true
        resetToken:
          type: string
          description: Password reset token
          readOnly: true
    ThingsboardErrorResponse:
      title: ThingsboardErrorResponse
      type: object
      properties:
        status:
          type: integer
          description: HTTP Response Status Code
          format: int32
          readOnly: true
          example: 401
        message:
          type: string
          description: Error message
          readOnly: true
          example: Authentication failed
        errorCode:
          type: object
          description: |-
            Platform error code:
            * `2` - General error (HTTP: 500 - Internal Server Error)

            * `10` - Authentication failed (HTTP: 401 - Unauthorized)

            * `11` - JWT token expired (HTTP: 401 - Unauthorized)

            * `15` - Credentials expired (HTTP: 401 - Unauthorized)

            * `20` - Permission denied (HTTP: 403 - Forbidden)

            * `30` - Invalid arguments (HTTP: 400 - Bad Request)

            * `31` - Bad request params (HTTP: 400 - Bad Request)

            * `32` - Item not found (HTTP: 404 - Not Found)

            * `33` - Too many requests (HTTP: 429 - Too Many Requests)

            * `34` - Too many updates (Too many updates over Websocket session)

            * `40` - Subscription violation (HTTP: 403 - Forbidden)
          readOnly: true
          example: '10'
        timestamp:
          type: string
          description: Timestamp
          format: date-time
          readOnly: true
    ToDeviceRpcRequestSnmpCommunicationConfig:
      title: ToDeviceRpcRequestSnmpCommunicationConfig
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/SnmpMapping'
        spec:
          type: string
          enum:
            - CLIENT_ATTRIBUTES_QUERYING
            - SHARED_ATTRIBUTES_SETTING
            - TELEMETRY_QUERYING
            - TO_DEVICE_RPC_REQUEST
            - TO_SERVER_RPC_REQUEST
    ToServerRpcRequestSnmpCommunicationConfig:
      title: ToServerRpcRequestSnmpCommunicationConfig
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/SnmpMapping'
        spec:
          type: string
          enum:
            - CLIENT_ATTRIBUTES_QUERYING
            - SHARED_ATTRIBUTES_SETTING
            - TELEMETRY_QUERYING
            - TO_DEVICE_RPC_REQUEST
            - TO_SERVER_RPC_REQUEST
    TotpTwoFaAccountConfig:
      title: TotpTwoFaAccountConfig
      required:
        - authUrl
      type: object
      properties:
        authUrl:
          pattern: otpauth://totp/(\S+?):(\S+?)\?issuer=(\S+?)&secret=(\w+?)
          type: string
        useByDefault:
          type: boolean
    TotpTwoFaProviderConfig:
      title: TotpTwoFaProviderConfig
      required:
        - issuerName
      type: object
      properties:
        issuerName:
          type: string
    TransportPayloadTypeConfiguration:
      title: TransportPayloadTypeConfiguration
      type: object
    TsValue:
      title: TsValue
      type: object
      properties:
        count:
          type: integer
          format: int64
        ts:
          type: integer
          format: int64
        value:
          type: string
    TwilioSmsProviderConfiguration:
      title: TwilioSmsProviderConfiguration
      properties:
        accountSid:
          type: string
          description: Twilio account Sid.
        accountToken:
          type: string
          description: Twilio account Token.
        numberFrom:
          type: string
          description: The number/id of a sender.
      allOf:
        - $ref: '#/components/schemas/SmsProviderConfiguration'
        - title: TwilioSmsProviderConfiguration
          type: object
          properties:
            accountSid:
              type: string
              description: Twilio account Sid.
            accountToken:
              type: string
              description: Twilio account Token.
            numberFrom:
              type: string
              description: The number/id of a sender.
    TwoFaAccountConfig:
      title: TwoFaAccountConfig
      type: object
      properties:
        useByDefault:
          type: boolean
    TwoFaAccountConfigUpdateRequest:
      title: TwoFaAccountConfigUpdateRequest
      type: object
      properties:
        useByDefault:
          type: boolean
    TwoFaProviderConfig:
      title: TwoFaProviderConfig
      type: object
    TwoFaProviderInfo:
      title: TwoFaProviderInfo
      type: object
      properties:
        contact:
          type: string
        default:
          type: boolean
        minVerificationCodeSendPeriod:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - BACKUP_CODE
            - EMAIL
            - SMS
            - TOTP
    UpdateMessage:
      title: UpdateMessage
      type: object
      properties:
        updateAvailable:
          type: boolean
          description: '''True'' if new platform update is available.'
          example: false
        currentVersion:
          type: string
          description: Current ThingsBoard version.
        latestVersion:
          type: string
          description: Latest ThingsBoard version.
        upgradeInstructionsUrl:
          type: string
          description: Upgrade instructions URL.
        currentVersionReleaseNotesUrl:
          type: string
          description: Current ThingsBoard version release notes URL.
        latestVersionReleaseNotesUrl:
          type: string
          description: Latest ThingsBoard version release notes URL.
    UsageInfo:
      title: UsageInfo
      type: object
      properties:
        alarms:
          type: integer
          format: int64
        assets:
          type: integer
          format: int64
        customers:
          type: integer
          format: int64
        dashboards:
          type: integer
          format: int64
        devices:
          type: integer
          format: int64
        emails:
          type: integer
          format: int64
        jsExecutions:
          type: integer
          format: int64
        maxAlarms:
          type: integer
          format: int64
        maxAssets:
          type: integer
          format: int64
        maxCustomers:
          type: integer
          format: int64
        maxDashboards:
          type: integer
          format: int64
        maxDevices:
          type: integer
          format: int64
        maxEmails:
          type: integer
          format: int64
        maxJsExecutions:
          type: integer
          format: int64
        maxSms:
          type: integer
          format: int64
        maxTbelExecutions:
          type: integer
          format: int64
        maxTransportMessages:
          type: integer
          format: int64
        maxUsers:
          type: integer
          format: int64
        sms:
          type: integer
          format: int64
        smsEnabled:
          type: boolean
        tbelExecutions:
          type: integer
          format: int64
        transportMessages:
          type: integer
          format: int64
        users:
          type: integer
          format: int64
    User:
      title: User
      required:
        - authority
        - email
      type: object
      properties:
        id:
          description: JSON object with the User Id. Specify this field to update the device. Referencing non-existing User Id will cause error. Omit this field to create new customer.
          $ref: '#/components/schemas/UserId'
        createdTime:
          type: integer
          description: Timestamp of the user creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with the Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        customerId:
          description: JSON object with the Customer Id.
          $ref: '#/components/schemas/CustomerId'
          readOnly: true
        email:
          type: string
          description: Email of the user
          example: user@example.com
        name:
          type: string
          description: Duplicates the email of the user, readonly
          readOnly: true
          example: user@example.com
        authority:
          type: string
          description: Authority
          example: SYS_ADMIN, TENANT_ADMIN or CUSTOMER_USER
          enum:
            - CUSTOMER_USER
            - PRE_VERIFICATION_TOKEN
            - REFRESH_TOKEN
            - SYS_ADMIN
            - TENANT_ADMIN
        firstName:
          type: string
          description: First name of the user
          example: John
        lastName:
          type: string
          description: Last name of the user
          example: Doe
        phone:
          type: string
          description: Phone number of the user
          example: '38012345123'
        additionalInfo:
          description: Additional parameters of the user
          $ref: '#/components/schemas/JsonNode'
    UserDashboardsInfo:
      title: UserDashboardsInfo
      type: object
      properties:
        last:
          type: array
          description: List of last visited dashboards.
          readOnly: true
          items:
            $ref: '#/components/schemas/LastVisitedDashboardInfo'
        starred:
          type: array
          description: List of starred dashboards.
          readOnly: true
          items:
            $ref: '#/components/schemas/StarredDashboardInfo'
    UserEmailInfo:
      title: UserEmailInfo
      type: object
      properties:
        id:
          description: User id
          $ref: '#/components/schemas/UserId'
        email:
          type: string
          description: User email
          example: john@gmail.com
        firstName:
          type: string
          description: User first name
          example: John
        lastName:
          type: string
          description: User last name
          example: Brown
    UserId:
      title: UserId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: USER
          enum:
            - USER
    UserListFilter:
      title: UserListFilter
      type: object
      properties:
        usersIds:
          type: array
          items:
            type: string
            format: uuid
    UserNotificationSettings:
      title: UserNotificationSettings
      required:
        - prefs
      type: object
      properties:
        prefs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NotificationPref'
    UserPasswordPolicy:
      title: UserPasswordPolicy
      type: object
      properties:
        allowWhitespaces:
          type: boolean
          description: Allow whitespaces
          example: false
        forceUserToResetPasswordIfNotValid:
          type: boolean
          description: Force user to update password if existing one does not pass validation
          example: false
        maximumLength:
          type: integer
          description: Maximum number of symbols in the password.
          format: int32
        minimumDigits:
          type: integer
          description: Minimum number of digits in the password.
          format: int32
        minimumLength:
          type: integer
          description: Minimum number of symbols in the password.
          format: int32
        minimumLowercaseLetters:
          type: integer
          description: Minimum number of lowercase letters in the password.
          format: int32
        minimumSpecialCharacters:
          type: integer
          description: Minimum number of special in the password.
          format: int32
        minimumUppercaseLetters:
          type: integer
          description: Minimum number of uppercase letters in the password.
          format: int32
        passwordExpirationPeriodDays:
          type: integer
          description: Password expiration period (days). Force expiration of the password.
          format: int32
        passwordReuseFrequencyDays:
          type: integer
          description: Password reuse frequency (days). Disallow to use the same password for the defined number of days
          format: int32
    UsersFilter:
      title: UsersFilter
      type: object
    VersionCreateConfig:
      title: VersionCreateConfig
      type: object
      properties:
        saveAttributes:
          type: boolean
        saveCredentials:
          type: boolean
        saveRelations:
          type: boolean
    VersionCreateRequest:
      title: VersionCreateRequest
      type: object
      properties:
        branch:
          type: string
        type:
          type: string
          enum:
            - COMPLEX
            - SINGLE_ENTITY
        versionName:
          type: string
    VersionCreationResult:
      title: VersionCreationResult
      type: object
      properties:
        added:
          type: integer
          format: int32
        done:
          type: boolean
        error:
          type: string
        modified:
          type: integer
          format: int32
        removed:
          type: integer
          format: int32
        version:
          $ref: '#/components/schemas/EntityVersion'
    VersionLoadConfig:
      title: VersionLoadConfig
      type: object
      properties:
        loadAttributes:
          type: boolean
        loadCredentials:
          type: boolean
        loadRelations:
          type: boolean
    VersionLoadRequest:
      title: VersionLoadRequest
      type: object
      properties:
        type:
          type: string
          enum:
            - ENTITY_TYPE
            - SINGLE_ENTITY
        versionId:
          type: string
    VersionLoadResult:
      title: VersionLoadResult
      type: object
      properties:
        done:
          type: boolean
        error:
          $ref: '#/components/schemas/EntityLoadError'
        result:
          type: array
          items:
            $ref: '#/components/schemas/EntityTypeLoadResult'
    VersionedEntityInfo:
      title: VersionedEntityInfo
      type: object
      properties:
        externalId:
          $ref: '#/components/schemas/EntityId'
    WebDeliveryMethodNotificationTemplate:
      title: WebDeliveryMethodNotificationTemplate
      type: object
      properties:
        additionalConfig:
          $ref: '#/components/schemas/JsonNode'
        body:
          type: string
        enabled:
          type: boolean
        subject:
          type: string
    WidgetType:
      title: WidgetType
      type: object
      properties:
        id:
          description: JSON object with the Widget Type Id. Specify this field to update the Widget Type. Referencing non-existing Widget Type Id will cause error. Omit this field to create new Widget Type.
          $ref: '#/components/schemas/WidgetTypeId'
        createdTime:
          type: integer
          description: Timestamp of the Widget Type creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        fqn:
          type: string
          description: Unique FQN that is used in dashboards as a reference widget type
          readOnly: true
        name:
          type: string
          description: Widget name used in search and UI
        deprecated:
          type: boolean
          description: Whether widget type is deprecated.
          example: true
        descriptor:
          description: Complex JSON object that describes the widget type
          $ref: '#/components/schemas/JsonNode'
    WidgetTypeDetails:
      title: WidgetTypeDetails
      type: object
      properties:
        createdTime:
          type: integer
          description: Timestamp of the Widget Type creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        fqn:
          type: string
          description: Unique FQN that is used in dashboards as a reference widget type
          readOnly: true
        name:
          type: string
          description: Widget name used in search and UI
        deprecated:
          type: boolean
          description: Whether widget type is deprecated.
          example: true
        descriptor:
          description: Complex JSON object that describes the widget type
          $ref: '#/components/schemas/JsonNode'
        image:
          type: string
          description: Relative or external image URL. Replaced with image data URL (Base64) in case of relative URL and 'inlineImages' option enabled.
        description:
          type: string
          description: Description of the widget
        tags:
          type: array
          description: Tags of the widget type
          items:
            type: string
    WidgetTypeExportData:
      title: WidgetTypeExportData
      properties:
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/AttributeExportData'
        entity:
          $ref: '#/components/schemas/WidgetTypeDetails'
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        relations:
          type: array
          items:
            $ref: '#/components/schemas/EntityRelation'
      allOf:
        - $ref: '#/components/schemas/EntityExportData«object»'
        - title: WidgetTypeExportData
          type: object
          properties:
            attributes:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeExportData'
            entity:
              $ref: '#/components/schemas/WidgetTypeDetails'
            entityType:
              type: string
              enum:
                - ALARM
                - API_USAGE_STATE
                - ASSET
                - ASSET_PROFILE
                - CUSTOMER
                - DASHBOARD
                - DEVICE
                - DEVICE_PROFILE
                - EDGE
                - ENTITY_VIEW
                - NOTIFICATION
                - NOTIFICATION_REQUEST
                - NOTIFICATION_RULE
                - NOTIFICATION_TARGET
                - NOTIFICATION_TEMPLATE
                - OTA_PACKAGE
                - QUEUE
                - RPC
                - RULE_CHAIN
                - RULE_NODE
                - TB_RESOURCE
                - TENANT
                - TENANT_PROFILE
                - USER
                - WIDGETS_BUNDLE
                - WIDGET_TYPE
            relations:
              type: array
              items:
                $ref: '#/components/schemas/EntityRelation'
    WidgetTypeId:
      title: WidgetTypeId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: WIDGET_TYPE
          enum:
            - WIDGET_TYPE
    WidgetTypeInfo:
      title: WidgetTypeInfo
      type: object
      properties:
        id:
          description: JSON object with the Widget Type Id. Specify this field to update the Widget Type. Referencing non-existing Widget Type Id will cause error. Omit this field to create new Widget Type.
          $ref: '#/components/schemas/WidgetTypeId'
        createdTime:
          type: integer
          description: Timestamp of the Widget Type creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        fqn:
          type: string
          description: Unique FQN that is used in dashboards as a reference widget type
          readOnly: true
        name:
          type: string
          description: Widget name used in search and UI
        deprecated:
          type: boolean
          description: Whether widget type is deprecated.
          example: true
        image:
          type: string
          description: Base64 encoded widget thumbnail
          readOnly: true
        description:
          type: string
          description: Description of the widget type
          readOnly: true
        tags:
          type: array
          description: Tags of the widget type
          readOnly: true
          items:
            type: string
        widgetType:
          type: string
          description: Type of the widget (timeseries, latest, control, alarm or static)
          readOnly: true
    WidgetsBundle:
      title: WidgetsBundle
      type: object
      properties:
        id:
          description: JSON object with the Widget Bundle Id. Specify this field to update the Widget Bundle. Referencing non-existing Widget Bundle Id will cause error. Omit this field to create new Widget Bundle.
          $ref: '#/components/schemas/WidgetsBundleId'
        createdTime:
          type: integer
          description: Timestamp of the Widget Bundle creation, in milliseconds
          format: int64
          readOnly: true
          example: 1609459200000
        name:
          type: string
          description: Same as title of the Widget Bundle. Read-only field. Update the 'title' to change the 'name' of the Widget Bundle.
          readOnly: true
        tenantId:
          description: JSON object with Tenant Id.
          $ref: '#/components/schemas/TenantId'
          readOnly: true
        alias:
          type: string
          description: Unique alias that is used in widget types as a reference widget bundle
          readOnly: true
        title:
          type: string
          description: Title used in search and UI
          readOnly: true
        image:
          type: string
          description: Relative or external image URL. Replaced with image data URL (Base64) in case of relative URL and 'inlineImages' option enabled.
          readOnly: true
        description:
          type: string
          description: Description
          readOnly: true
        order:
          type: integer
          description: Order
          format: int32
          readOnly: true
    WidgetsBundleExportData:
      title: WidgetsBundleExportData
      properties:
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/AttributeExportData'
        entity:
          $ref: '#/components/schemas/WidgetsBundle'
        entityType:
          type: string
          enum:
            - ALARM
            - API_USAGE_STATE
            - ASSET
            - ASSET_PROFILE
            - CUSTOMER
            - DASHBOARD
            - DEVICE
            - DEVICE_PROFILE
            - EDGE
            - ENTITY_VIEW
            - NOTIFICATION
            - NOTIFICATION_REQUEST
            - NOTIFICATION_RULE
            - NOTIFICATION_TARGET
            - NOTIFICATION_TEMPLATE
            - OTA_PACKAGE
            - QUEUE
            - RPC
            - RULE_CHAIN
            - RULE_NODE
            - TB_RESOURCE
            - TENANT
            - TENANT_PROFILE
            - USER
            - WIDGETS_BUNDLE
            - WIDGET_TYPE
        fqns:
          type: array
          items:
            type: string
        relations:
          type: array
          items:
            $ref: '#/components/schemas/EntityRelation'
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/ObjectNode'
      allOf:
        - $ref: '#/components/schemas/EntityExportData«object»'
        - title: WidgetsBundleExportData
          type: object
          properties:
            attributes:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeExportData'
            entity:
              $ref: '#/components/schemas/WidgetsBundle'
            entityType:
              type: string
              enum:
                - ALARM
                - API_USAGE_STATE
                - ASSET
                - ASSET_PROFILE
                - CUSTOMER
                - DASHBOARD
                - DEVICE
                - DEVICE_PROFILE
                - EDGE
                - ENTITY_VIEW
                - NOTIFICATION
                - NOTIFICATION_REQUEST
                - NOTIFICATION_RULE
                - NOTIFICATION_TARGET
                - NOTIFICATION_TEMPLATE
                - OTA_PACKAGE
                - QUEUE
                - RPC
                - RULE_CHAIN
                - RULE_NODE
                - TB_RESOURCE
                - TENANT
                - TENANT_PROFILE
                - USER
                - WIDGETS_BUNDLE
                - WIDGET_TYPE
            fqns:
              type: array
              items:
                type: string
            relations:
              type: array
              items:
                $ref: '#/components/schemas/EntityRelation'
            widgets:
              type: array
              items:
                $ref: '#/components/schemas/ObjectNode'
    WidgetsBundleId:
      title: WidgetsBundleId
      required:
        - entityType
        - id
      type: object
      properties:
        id:
          type: string
          description: ID of the entity, time-based UUID v1
          format: uuid
          example: 784f394c-42b6-435a-983c-b7beff2784f9
        entityType:
          type: string
          description: string
          example: WIDGETS_BUNDLE
          enum:
            - WIDGETS_BUNDLE
    X509CertificateChainProvisionConfiguration:
      title: X509CertificateChainProvisionConfiguration
      properties:
        allowCreateNewDevicesByX509Certificate:
          type: boolean
        certificateRegExPattern:
          type: string
        provisionDeviceSecret:
          type: string
      allOf:
        - $ref: '#/components/schemas/DeviceProfileProvisionConfiguration'
        - title: X509CertificateChainProvisionConfiguration
          type: object
          properties:
            allowCreateNewDevicesByX509Certificate:
              type: boolean
            certificateRegExPattern:
              type: string
            provisionDeviceSecret:
              type: string
    X509LwM2MBootstrapServerCredential:
      title: X509LwM2MBootstrapServerCredential
      type: object
      properties:
        shortServerId:
          type: integer
          description: Server short Id. Used as link to associate server Object Instance. This identifier uniquely identifies each LwM2M Server configured for the LwM2M Client. This Resource MUST be set when the Bootstrap-Server Resource has a value of 'false'. The values ID:0 and ID:65535 values MUST NOT be used for identifying the LwM2M Server.
          format: int32
          readOnly: true
          example: 123
        bootstrapServerIs:
          type: boolean
          description: Is Bootstrap Server or Lwm2m Server. The LwM2M Client MAY be configured to use one or more LwM2M Server Account(s). The LwM2M Client MUST have at most one LwM2M Bootstrap-Server Account. (*) The LwM2M client MUST have at least one LwM2M server account after completing the boot sequence specified.
          readOnly: true
          example: false
        host:
          type: string
          description: Host for 'No Security' mode
          readOnly: true
          example: 0.0.0.0
        port:
          type: integer
          description: 'Port for  Lwm2m Server: ''No Security'' mode: Lwm2m Server or Bootstrap Server'
          format: int32
          readOnly: true
        clientHoldOffTime:
          type: integer
          description: Client Hold Off Time. The number of seconds to wait before initiating a Client Initiated Bootstrap once the LwM2M Client has determined it should initiate this bootstrap mode. (This information is relevant for use with a Bootstrap-Server only.)
          format: int32
          readOnly: true
          example: 1
        serverPublicKey:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): RPK or X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEAZ0pSaGKHk/GrDaUDnQZpeEdGwX7m3Ws+U/kiVat
            +44sgk3c8g0LotfMpLlZJPhPwJ6ipXV+O1r7IZUjBs3LNA==
        serverCertificate:
          type: string
          description: 'Server Public Key for ''Security'' mode (DTLS): X509. Format: base64 encoded'
          readOnly: true
          example: |-
            MMIICODCCAd6gAwIBAgIUI88U1zowOdrxDK/dOV+36gJxI2MwCgYIKoZIzj0EAwIwejELMAkGA1UEBhMCVUs
            xEjAQBgNVBAgTCUt5aXYgY2l0eTENMAsGA1UEBxMES3lpdjEUMBIGA1UEChMLVGhpbmdzYm9hcmQxFzAVBgNVBAsMDkRFVkVMT1BFUl9URVNUMRkwFwYDVQQDDBBpbnRlcm1lZGlhdGVfY2EwMB4XDTIyMDEwOTEzMDMwMFoXDTI3MDEwODEzMDMwMFowFDESMBAGA1UEAxM
            JbG9jYWxob3N0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUO3vBo/JTv0eooY7XHiKAIVDoWKFqtrU7C6q8AIKqpLcqhCdW+haFeBOH3PjY6EwaWkY04Bir4oanU0s7tz2uKOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/
            BAIwADAdBgNVHQ4EFgQUEjc3Q4a0TxzP/3x3EV4fHxYUg0YwHwYDVR0jBBgwFoAUuSquGycMU6Q0SYNcbtSkSD3TfH0wLwYDVR0RBCgwJoIVbG9jYWxob3N0LmxvY2FsZG9tYWlugglsb2NhbGhvc3SCAiAtMAoGCCqGSM49BAMCA0gAMEUCIQD7dbZObyUaoDiNbX+9fUNp
            AWrD7N7XuJUwZ9FcN75R3gIgb2RNjDkHoyUyF1YajwkBk+7XmIXNClmizNJigj908mw=
        bootstrapServerAccountTimeout:
          type: integer
          description: Bootstrap Server Account Timeout (If the value is set to 0, or if this resource is not instantiated, the Bootstrap-Server Account lifetime is infinite.)
          format: int32
          readOnly: true
          example: 0
        lifetime:
          type: integer
          description: Specify the lifetime of the registration in seconds.
          format: int32
          readOnly: true
          example: 300
        defaultMinPeriod:
          type: integer
          description: The default value the LwM2M Client should use for the Minimum Period of an Observation in the absence of this parameter being included in an Observation. If this Resource doesn’t exist, the default value is 0.
          format: int32
          readOnly: true
          example: 1
        notifIfDisabled:
          type: boolean
          description: If true, the LwM2M Client stores “Notify” operations to the LwM2M Server while the LwM2M Server account is disabled or the LwM2M Client is offline. After the LwM2M Server account is enabled or the LwM2M Client is online, the LwM2M Client reports the stored “Notify” operations to the Server. If false, the LwM2M Client discards all the “Notify” operations or temporarily disables the Observe function while the LwM2M Server is disabled or the LwM2M Client is offline. The default value is true.
          readOnly: true
          example: true
        binding:
          type: string
          description: This Resource defines the transport binding configured for the LwM2M Client. If the LwM2M Client supports the binding specified in this Resource, the LwM2M Client MUST use that transport for the Current Binding Mode.
          readOnly: true
          example: U
  securitySchemes:
    HTTP login form:
      type: http
      description: Enter Username / Password
      scheme: loginPassword
      bearerFormat: /api/auth/login|X-Authorization
