openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /api/event:
    get:
      tags:
        - event-resource
      summary: Get all the event handlers
      operationId: getEventHandlers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventHandler'
    put:
      tags:
        - event-resource
      summary: Update an existing event handler.
      operationId: updateEventHandler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventHandler'
        required: true
      responses:
        '200':
          description: OK
    post:
      tags:
        - event-resource
      summary: Add a new event handler.
      operationId: addEventHandler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventHandler'
        required: true
      responses:
        '200':
          description: OK
  /api/event/{name}:
    delete:
      tags:
        - event-resource
      summary: Remove an event handler
      operationId: removeEventHandlerStatus
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/event/{event}:
    get:
      tags:
        - event-resource
      summary: Get event handlers for a given event
      operationId: getEventHandlersForEvent
      parameters:
        - name: event
          in: path
          required: true
          schema:
            type: string
        - name: activeOnly
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventHandler'
  /api/admin/config:
    get:
      tags:
        - admin-resource
      summary: Get all the configuration parameters
      operationId: getAllConfig
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/admin/sweep/requeue/{workflowId}:
    post:
      tags:
        - admin-resource
      summary: Queue up all the running workflows for sweep
      operationId: requeueSweep
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/admin/consistency/verifyAndRepair/{workflowId}:
    post:
      tags:
        - admin-resource
      summary: Verify and repair workflow consistency
      operationId: verifyAndRepairWorkflowConsistency
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/admin/queues:
    get:
      tags:
        - admin-resource
      summary: Get registered queues
      operationId: getEventQueues
      parameters:
        - name: verbose
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/admin/task/{tasktype}:
    get:
      tags:
        - admin-resource
      summary: Get the list of pending tasks for a given task type
      operationId: view
      parameters:
        - name: tasktype
          in: path
          required: true
          schema:
            type: string
        - name: start
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: count
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /api/queue/update/{workflowId}/task/{taskId}/{status}:
    post:
      tags:
        - queue-admin-resource
      summary: Publish a message in queue to mark a wait task (by taskId) as completed.
      operationId: updateByTaskId
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum:
              - IN_PROGRESS
              - CANCELED
              - FAILED
              - FAILED_WITH_TERMINAL_ERROR
              - COMPLETED
              - COMPLETED_WITH_ERRORS
              - SCHEDULED
              - TIMED_OUT
              - SKIPPED
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        '200':
          description: OK
  /api/queue/update/{workflowId}/{taskRefName}/{status}:
    post:
      tags:
        - queue-admin-resource
      summary: Publish a message in queue to mark a wait task as completed.
      operationId: update
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
        - name: taskRefName
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum:
              - IN_PROGRESS
              - CANCELED
              - FAILED
              - FAILED_WITH_TERMINAL_ERROR
              - COMPLETED
              - COMPLETED_WITH_ERRORS
              - SCHEDULED
              - TIMED_OUT
              - SKIPPED
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        '200':
          description: OK
  /api/queue/size:
    get:
      tags:
        - queue-admin-resource
      summary: Get the queue length
      operationId: size
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/queue/:
    get:
      tags:
        - queue-admin-resource
      summary: Get Queue Names
      operationId: names
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
  /health:
    get:
      tags:
        - health-check-resource
      operationId: doCheck
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HealthCheckStatus'
  /api/workflow:
    post:
      tags:
        - workflow-resource
      summary: Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain
      operationId: startWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartWorkflowRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/workflow/{name}:
    post:
      tags:
        - workflow-resource
      summary: Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking
      operationId: startWorkflow_1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: correlationId
          in: query
          required: false
          schema:
            type: string
        - name: priority
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/workflow/{name}/correlated/{correlationId}:
    get:
      tags:
        - workflow-resource
      summary: Lists workflows for the given correlation id
      operationId: getWorkflows
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: correlationId
          in: path
          required: true
          schema:
            type: string
        - name: includeClosed
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: includeTasks
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /api/workflow/{name}/correlated:
    post:
      tags:
        - workflow-resource
      summary: Lists workflows for the given correlation id list
      operationId: getWorkflows_1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: includeClosed
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: includeTasks
          in: query
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Workflow'
  /api/workflow/{workflowId}:
    get:
      tags:
        - workflow-resource
      summary: Gets the workflow by workflow id
      operationId: getExecutionStatus
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
        - name: includeTasks
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Workflow'
    delete:
      tags:
        - workflow-resource
      summary: Terminate workflow execution
      operationId: terminate
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
        - name: reason
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/workflow/running/{name}:
    get:
      tags:
        - workflow-resource
      summary: Retrieve all the running workflows
      operationId: getRunningWorkflow
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: startTime
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /api/workflow/decide/{workflowId}:
    put:
      tags:
        - workflow-resource
      summary: Starts the decision task for a workflow
      operationId: decide
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/workflow/{workflowId}/pause:
    put:
      tags:
        - workflow-resource
      summary: Pauses the workflow
      operationId: pauseWorkflow
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/workflow/{workflowId}/resume:
    put:
      tags:
        - workflow-resource
      summary: Resumes the workflow
      operationId: resumeWorkflow
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/workflow/{workflowId}/skiptask/{taskReferenceName}:
    put:
      tags:
        - workflow-resource
      summary: Skips a given task from a current running workflow
      operationId: skipTaskFromWorkflow
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
        - name: taskReferenceName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkipTaskRequest'
      responses:
        '200':
          description: OK
  /api/workflow/{workflowId}/rerun:
    post:
      tags:
        - workflow-resource
      summary: Reruns the workflow from a specific task
      operationId: rerun
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RerunWorkflowRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/workflow/{workflowId}/restart:
    post:
      tags:
        - workflow-resource
      summary: Restarts a completed workflow
      operationId: restart
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
        - name: useLatestDefinitions
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: No Content
  /api/workflow/{workflowId}/resetcallbacks:
    post:
      tags:
        - workflow-resource
      summary: Resets callback times of all non-terminal SIMPLE tasks to 0
      operationId: resetWorkflow
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
  /api/workflow/search-v2:
    get:
      tags:
        - workflow-resource
      summary: Search for workflows based on payload and other parameters
      description: use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC.
      operationId: searchV2
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: freeText
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: query
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchResultWorkflow'
  /api/workflow/search-by-tasks:
    get:
      tags:
        - workflow-resource
      summary: Search for workflows based on task parameters
      description: use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC
      operationId: searchWorkflowsByTasks
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: freeText
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: query
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchResultWorkflowSummary'
  /api/workflow/search-by-tasks-v2:
    get:
      tags:
        - workflow-resource
      summary: Search for workflows based on task parameters
      description: use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC
      operationId: searchWorkflowsByTasksV2
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: freeText
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: query
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchResultWorkflow'
  /api/workflow/externalstoragelocation:
    get:
      tags:
        - workflow-resource
      summary: Get the uri and path of the external storage where the workflow payload is to be stored
      operationId: getExternalStorageLocation
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
        - name: operation
          in: query
          required: true
          schema:
            type: string
        - name: payloadType
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExternalStorageLocation'
  /api/workflow/{workflowId}/remove:
    delete:
      tags:
        - workflow-resource
      summary: Removes the workflow from the system
      operationId: delete
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
        - name: archiveWorkflow
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: OK
  /api/workflow/search:
    get:
      tags:
        - workflow-resource
      summary: Search for workflows based on payload and other parameters
      description: use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC.
      operationId: search
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: freeText
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: query
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchResultWorkflowSummary'
  /api/workflow/{workflowId}/retry:
    post:
      tags:
        - workflow-resource
      summary: Retries the last failed task
      operationId: retry
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
        - name: resumeSubworkflowTasks
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: No Content
  /api/workflow/bulk/pause:
    put:
      tags:
        - workflow-bulk-resource
      summary: Pause the list of workflows
      operationId: pauseWorkflow_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/workflow/bulk/resume:
    put:
      tags:
        - workflow-bulk-resource
      summary: Resume the list of workflows
      operationId: resumeWorkflow_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/workflow/bulk/restart:
    post:
      tags:
        - workflow-bulk-resource
      summary: Restart the list of completed workflow
      operationId: restart_1
      parameters:
        - name: useLatestDefinitions
          in: query
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/workflow/bulk/terminate:
    post:
      tags:
        - workflow-bulk-resource
      summary: Terminate workflows execution
      operationId: terminate_1
      parameters:
        - name: reason
          in: query
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/workflow/bulk/retry:
    post:
      tags:
        - workflow-bulk-resource
      summary: Retry the last failed task for each workflow from the list
      operationId: retry_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/tasks/search-v2:
    get:
      tags:
        - task-resource
      summary: Search for tasks based in payload and other parameters
      description: use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC
      operationId: searchV2_1
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: freeText
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: query
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchResultTask'
  /api/tasks/externalstoragelocation:
    get:
      tags:
        - task-resource
      summary: Get the external uri where the task payload is to be stored
      operationId: getExternalStorageLocation_1
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
        - name: operation
          in: query
          required: true
          schema:
            type: string
        - name: payloadType
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExternalStorageLocation'
  /api/tasks/poll/batch/{tasktype}:
    get:
      tags:
        - task-resource
      summary: Batch poll for a task of a certain type
      operationId: batchPoll
      parameters:
        - name: tasktype
          in: path
          required: true
          schema:
            type: string
        - name: workerid
          in: query
          required: false
          schema:
            type: string
        - name: domain
          in: query
          required: false
          schema:
            type: string
        - name: count
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: timeout
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /api/tasks:
    post:
      tags:
        - task-resource
      summary: Update a task
      operationId: updateTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskResult'
        required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/tasks/{taskId}/log:
    get:
      tags:
        - task-resource
      summary: Get Task Execution Logs
      operationId: getTaskLogs
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskExecLog'
    post:
      tags:
        - task-resource
      summary: Log Task Execution Details
      operationId: log
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
  /api/tasks/{taskId}:
    get:
      tags:
        - task-resource
      summary: Get task by Id
      operationId: getTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Task'
  /api/tasks/queue/all/verbose:
    get:
      tags:
        - task-resource
      summary: Get the details about each queue
      operationId: allVerbose
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: object
                    additionalProperties:
                      type: integer
                      format: int64
  /api/tasks/queue/polldata:
    get:
      tags:
        - task-resource
      summary: Get the last poll data for a given task type
      operationId: getPollData
      parameters:
        - name: taskType
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PollData'
  /api/tasks/queue/polldata/all:
    get:
      tags:
        - task-resource
      summary: Get the last poll data for all task types
      operationId: getAllPollData
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PollData'
  /api/tasks/queue/requeue/{taskType}:
    post:
      tags:
        - task-resource
      summary: Requeue pending tasks
      operationId: requeuePendingTask
      parameters:
        - name: taskType
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/tasks/queue/sizes:
    get:
      tags:
        - task-resource
      summary: Get Task type queue sizes
      operationId: size_1
      parameters:
        - name: taskType
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /api/tasks/poll/{tasktype}:
    get:
      tags:
        - task-resource
      summary: Poll for a task of a certain type
      operationId: poll
      parameters:
        - name: tasktype
          in: path
          required: true
          schema:
            type: string
        - name: workerid
          in: query
          required: false
          schema:
            type: string
        - name: domain
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Task'
  /api/tasks/search:
    get:
      tags:
        - task-resource
      summary: Search for tasks based in payload and other parameters
      description: use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC
      operationId: search_1
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: freeText
          in: query
          required: false
          schema:
            type: string
            default: '*'
        - name: query
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchResultTaskSummary'
  /api/tasks/queue/all:
    get:
      tags:
        - task-resource
      summary: Get the details about each queue
      operationId: all
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/metadata/workflow/{name}/{version}:
    delete:
      tags:
        - metadata-resource
      summary: Removes workflow definition. It does not remove workflows associated with the definition.
      operationId: unregisterWorkflowDef
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/metadata/taskdefs:
    get:
      tags:
        - metadata-resource
      summary: Gets all task definition
      operationId: getTaskDefs
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDef'
    put:
      tags:
        - metadata-resource
      summary: Update an existing task
      operationId: registerTaskDef_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDef'
        required: true
      responses:
        '200':
          description: OK
    post:
      tags:
        - metadata-resource
      summary: Create new task definition(s)
      operationId: registerTaskDef
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TaskDef'
        required: true
      responses:
        '200':
          description: OK
  /api/metadata/taskdefs/{tasktype}:
    get:
      tags:
        - metadata-resource
      summary: Gets the task definition
      operationId: getTaskDef
      parameters:
        - name: tasktype
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskDef'
    delete:
      tags:
        - metadata-resource
      summary: Remove a task definition
      operationId: unregisterTaskDef
      parameters:
        - name: tasktype
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/metadata/workflow/{name}:
    get:
      tags:
        - metadata-resource
      summary: Retrieves workflow definition along with blueprint
      operationId: get
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WorkflowDef'
  /api/metadata/workflow:
    get:
      tags:
        - metadata-resource
      summary: Retrieves all workflow definition along with blueprint
      operationId: getAll
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowDef'
    put:
      tags:
        - metadata-resource
      summary: Create or update workflow definition
      operationId: update_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/WorkflowDef'
        required: true
      responses:
        '200':
          description: OK
    post:
      tags:
        - metadata-resource
      summary: Create a new workflow definition
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowDef'
        required: true
      responses:
        '200':
          description: OK
components:
  schemas:
    Action:
      type: object
      properties:
        action:
          type: string
          enum:
            - start_workflow
            - complete_task
            - fail_task
        start_workflow:
          $ref: '#/components/schemas/StartWorkflow'
        complete_task:
          $ref: '#/components/schemas/TaskDetails'
        fail_task:
          $ref: '#/components/schemas/TaskDetails'
        expandInlineJSON:
          type: boolean
    EventHandler:
      required:
        - actions
        - event
        - name
      type: object
      properties:
        name:
          type: string
        event:
          type: string
        condition:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        active:
          type: boolean
        evaluatorType:
          type: string
    StartWorkflow:
      type: object
      properties:
        name:
          type: string
        version:
          type: integer
          format: int32
        correlationId:
          type: string
        input:
          type: object
          additionalProperties:
            type: object
        taskToDomain:
          type: object
          additionalProperties:
            type: string
    TaskDetails:
      type: object
      properties:
        workflowId:
          type: string
        taskRefName:
          type: string
        output:
          type: object
          additionalProperties:
            type: object
        taskId:
          type: string
    SubWorkflowParams:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        version:
          type: integer
          format: int32
        taskToDomain:
          type: object
          additionalProperties:
            type: string
        workflowDefinition:
          $ref: '#/components/schemas/WorkflowDef'
    Task:
      type: object
      properties:
        taskType:
          type: string
        status:
          type: string
          enum:
            - IN_PROGRESS
            - CANCELED
            - FAILED
            - FAILED_WITH_TERMINAL_ERROR
            - COMPLETED
            - COMPLETED_WITH_ERRORS
            - SCHEDULED
            - TIMED_OUT
            - SKIPPED
        inputData:
          type: object
          additionalProperties:
            type: object
        referenceTaskName:
          type: string
        retryCount:
          type: integer
          format: int32
        seq:
          type: integer
          format: int32
        correlationId:
          type: string
        pollCount:
          type: integer
          format: int32
        taskDefName:
          type: string
        scheduledTime:
          type: integer
          format: int64
        startTime:
          type: integer
          format: int64
        endTime:
          type: integer
          format: int64
        updateTime:
          type: integer
          format: int64
        startDelayInSeconds:
          type: integer
          format: int32
        retriedTaskId:
          type: string
        retried:
          type: boolean
        executed:
          type: boolean
        callbackFromWorker:
          type: boolean
        responseTimeoutSeconds:
          type: integer
          format: int64
        workflowInstanceId:
          type: string
        workflowType:
          type: string
        taskId:
          type: string
        reasonForIncompletion:
          type: string
        callbackAfterSeconds:
          type: integer
          format: int64
        workerId:
          type: string
        outputData:
          type: object
          additionalProperties:
            type: object
        workflowTask:
          $ref: '#/components/schemas/WorkflowTask'
        domain:
          type: string
        rateLimitPerFrequency:
          type: integer
          format: int32
        rateLimitFrequencyInSeconds:
          type: integer
          format: int32
        externalInputPayloadStoragePath:
          type: string
        externalOutputPayloadStoragePath:
          type: string
        workflowPriority:
          type: integer
          format: int32
        executionNameSpace:
          type: string
        isolationGroupId:
          type: string
        iteration:
          type: integer
          format: int32
        subWorkflowId:
          type: string
        subworkflowChanged:
          type: boolean
        taskDefinition:
          $ref: '#/components/schemas/TaskDef'
        queueWaitTime:
          type: integer
          format: int64
        loopOverTask:
          type: boolean
    TaskDef:
      required:
        - name
        - timeoutSeconds
      type: object
      properties:
        ownerApp:
          type: string
        createTime:
          type: integer
          format: int64
        updateTime:
          type: integer
          format: int64
        createdBy:
          type: string
        updatedBy:
          type: string
        name:
          type: string
        description:
          type: string
        retryCount:
          minimum: 0
          type: integer
          format: int32
        timeoutSeconds:
          type: integer
          format: int64
        inputKeys:
          type: array
          items:
            type: string
        outputKeys:
          type: array
          items:
            type: string
        timeoutPolicy:
          type: string
          enum:
            - RETRY
            - TIME_OUT_WF
            - ALERT_ONLY
        retryLogic:
          type: string
          enum:
            - FIXED
            - EXPONENTIAL_BACKOFF
        retryDelaySeconds:
          type: integer
          format: int32
        responseTimeoutSeconds:
          minimum: 1
          type: integer
          format: int64
        concurrentExecLimit:
          type: integer
          format: int32
        inputTemplate:
          type: object
          additionalProperties:
            type: object
        rateLimitPerFrequency:
          type: integer
          format: int32
        rateLimitFrequencyInSeconds:
          type: integer
          format: int32
        isolationGroupId:
          type: string
        executionNameSpace:
          type: string
        ownerEmail:
          type: string
        pollTimeoutSeconds:
          minimum: 0
          type: integer
          format: int32
    WorkflowDef:
      required:
        - name
        - tasks
        - timeoutSeconds
      type: object
      properties:
        ownerApp:
          type: string
        createTime:
          type: integer
          format: int64
        updateTime:
          type: integer
          format: int64
        createdBy:
          type: string
        updatedBy:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: integer
          format: int32
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowTask'
        inputParameters:
          type: array
          items:
            type: string
        outputParameters:
          type: object
          additionalProperties:
            type: object
        failureWorkflow:
          type: string
        schemaVersion:
          maximum: 2
          minimum: 2
          type: integer
          format: int32
        restartable:
          type: boolean
        workflowStatusListenerEnabled:
          type: boolean
        ownerEmail:
          type: string
        timeoutPolicy:
          type: string
          enum:
            - TIME_OUT_WF
            - ALERT_ONLY
        timeoutSeconds:
          type: integer
          format: int64
        variables:
          type: object
          additionalProperties:
            type: object
        inputTemplate:
          type: object
          additionalProperties:
            type: object
    WorkflowTask:
      required:
        - name
        - taskReferenceName
      type: object
      properties:
        name:
          type: string
        taskReferenceName:
          type: string
        description:
          type: string
        inputParameters:
          type: object
          additionalProperties:
            type: object
        type:
          type: string
        dynamicTaskNameParam:
          type: string
        caseValueParam:
          type: string
          deprecated: true
        caseExpression:
          type: string
          deprecated: true
        scriptExpression:
          type: string
        decisionCases:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/WorkflowTask'
        dynamicForkJoinTasksParam:
          type: string
          deprecated: true
        dynamicForkTasksParam:
          type: string
        dynamicForkTasksInputParamName:
          type: string
        defaultCase:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowTask'
        forkTasks:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/WorkflowTask'
        startDelay:
          type: integer
          format: int32
        subWorkflowParam:
          $ref: '#/components/schemas/SubWorkflowParams'
        joinOn:
          type: array
          items:
            type: string
        sink:
          type: string
        optional:
          type: boolean
        taskDefinition:
          $ref: '#/components/schemas/TaskDef'
        rateLimited:
          type: boolean
        defaultExclusiveJoinTask:
          type: array
          items:
            type: string
        asyncComplete:
          type: boolean
        loopCondition:
          type: string
        loopOver:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowTask'
        retryCount:
          type: integer
          format: int32
        evaluatorType:
          type: string
        expression:
          type: string
        workflowTaskType:
          type: string
          writeOnly: true
          enum:
            - SIMPLE
            - DYNAMIC
            - FORK_JOIN
            - FORK_JOIN_DYNAMIC
            - DECISION
            - SWITCH
            - JOIN
            - DO_WHILE
            - SUB_WORKFLOW
            - EVENT
            - WAIT
            - USER_DEFINED
            - HTTP
            - LAMBDA
            - INLINE
            - EXCLUSIVE_JOIN
            - TERMINATE
            - KAFKA_PUBLISH
            - JSON_JQ_TRANSFORM
            - SET_VARIABLE
    Health:
      type: object
      properties:
        details:
          type: object
          additionalProperties:
            type: object
        healthy:
          type: boolean
        errorMessage:
          type: string
    HealthCheckStatus:
      type: object
      properties:
        healthResults:
          type: array
          items:
            $ref: '#/components/schemas/Health'
        suppressedHealthResults:
          type: array
          items:
            $ref: '#/components/schemas/Health'
        healthy:
          type: boolean
    StartWorkflowRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        version:
          type: integer
          format: int32
        correlationId:
          type: string
        input:
          type: object
          additionalProperties:
            type: object
        taskToDomain:
          type: object
          additionalProperties:
            type: string
        workflowDef:
          $ref: '#/components/schemas/WorkflowDef'
        externalInputPayloadStoragePath:
          type: string
        priority:
          maximum: 99
          minimum: 0
          type: integer
          format: int32
    Workflow:
      type: object
      properties:
        ownerApp:
          type: string
        createTime:
          type: integer
          format: int64
        updateTime:
          type: integer
          format: int64
        createdBy:
          type: string
        updatedBy:
          type: string
        status:
          type: string
          enum:
            - RUNNING
            - COMPLETED
            - FAILED
            - TIMED_OUT
            - TERMINATED
            - PAUSED
        endTime:
          type: integer
          format: int64
        workflowId:
          type: string
        parentWorkflowId:
          type: string
        parentWorkflowTaskId:
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        input:
          type: object
          additionalProperties:
            type: object
        output:
          type: object
          additionalProperties:
            type: object
        correlationId:
          type: string
        reRunFromWorkflowId:
          type: string
        reasonForIncompletion:
          type: string
        event:
          type: string
        taskToDomain:
          type: object
          additionalProperties:
            type: string
        failedReferenceTaskNames:
          uniqueItems: true
          type: array
          items:
            type: string
        workflowDefinition:
          $ref: '#/components/schemas/WorkflowDef'
        externalInputPayloadStoragePath:
          type: string
        externalOutputPayloadStoragePath:
          type: string
        priority:
          maximum: 99
          minimum: 0
          type: integer
          format: int32
        variables:
          type: object
          additionalProperties:
            type: object
        lastRetriedTime:
          type: integer
          format: int64
        workflowName:
          type: string
        workflowVersion:
          type: integer
          format: int32
        startTime:
          type: integer
          format: int64
    Any:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        typeUrl:
          type: string
        typeUrlBytes:
          $ref: '#/components/schemas/ByteString'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserAny'
        defaultInstanceForType:
          $ref: '#/components/schemas/Any'
        initialized:
          type: boolean
        value:
          $ref: '#/components/schemas/ByteString'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    ByteString:
      type: object
      properties:
        validUtf8:
          type: boolean
        empty:
          type: boolean
    Descriptor:
      type: object
      properties:
        index:
          type: integer
          format: int32
        proto:
          $ref: '#/components/schemas/DescriptorProto'
        fullName:
          type: string
        file:
          $ref: '#/components/schemas/FileDescriptor'
        containingType:
          $ref: '#/components/schemas/Descriptor'
        nestedTypes:
          type: array
          items:
            $ref: '#/components/schemas/Descriptor'
        enumTypes:
          type: array
          items:
            $ref: '#/components/schemas/EnumDescriptor'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptor'
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptor'
        oneofs:
          type: array
          items:
            $ref: '#/components/schemas/OneofDescriptor'
        realOneofs:
          type: array
          items:
            $ref: '#/components/schemas/OneofDescriptor'
        extendable:
          type: boolean
        options:
          $ref: '#/components/schemas/MessageOptions'
        name:
          type: string
    DescriptorProto:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserDescriptorProto'
        defaultInstanceForType:
          $ref: '#/components/schemas/DescriptorProto'
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        extensionRangeList:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionRange'
        reservedRangeList:
          type: array
          items:
            $ref: '#/components/schemas/ReservedRange'
        reservedNameList:
          type: array
          properties:
            empty:
              type: boolean
          items:
            type: string
        oneofDeclCount:
          type: integer
          format: int32
        nestedTypeCount:
          type: integer
          format: int32
        enumTypeCount:
          type: integer
          format: int32
        extensionCount:
          type: integer
          format: int32
        fieldList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProto'
        fieldOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProtoOrBuilder'
        extensionList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProto'
        extensionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProtoOrBuilder'
        nestedTypeList:
          type: array
          items:
            $ref: '#/components/schemas/DescriptorProto'
        nestedTypeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/DescriptorProtoOrBuilder'
        enumTypeList:
          type: array
          items:
            $ref: '#/components/schemas/EnumDescriptorProto'
        enumTypeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/EnumDescriptorProtoOrBuilder'
        extensionRangeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionRangeOrBuilder'
        extensionRangeCount:
          type: integer
          format: int32
        oneofDeclList:
          type: array
          items:
            $ref: '#/components/schemas/OneofDescriptorProto'
        oneofDeclOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/OneofDescriptorProtoOrBuilder'
        optionsOrBuilder:
          $ref: '#/components/schemas/MessageOptionsOrBuilder'
        reservedRangeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/ReservedRangeOrBuilder'
        reservedRangeCount:
          type: integer
          format: int32
        reservedNameCount:
          type: integer
          format: int32
        fieldCount:
          type: integer
          format: int32
        initialized:
          type: boolean
        options:
          $ref: '#/components/schemas/MessageOptions'
        name:
          type: string
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    DescriptorProtoOrBuilder:
      type: object
      properties:
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        extensionRangeList:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionRange'
        reservedRangeList:
          type: array
          items:
            $ref: '#/components/schemas/ReservedRange'
        reservedNameList:
          type: array
          items:
            type: string
        oneofDeclCount:
          type: integer
          format: int32
        nestedTypeCount:
          type: integer
          format: int32
        enumTypeCount:
          type: integer
          format: int32
        extensionCount:
          type: integer
          format: int32
        fieldList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProto'
        fieldOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProtoOrBuilder'
        extensionList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProto'
        extensionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProtoOrBuilder'
        enumTypeList:
          type: array
          items:
            $ref: '#/components/schemas/EnumDescriptorProto'
        enumTypeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/EnumDescriptorProtoOrBuilder'
        extensionRangeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionRangeOrBuilder'
        extensionRangeCount:
          type: integer
          format: int32
        oneofDeclList:
          type: array
          items:
            $ref: '#/components/schemas/OneofDescriptorProto'
        oneofDeclOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/OneofDescriptorProtoOrBuilder'
        optionsOrBuilder:
          $ref: '#/components/schemas/MessageOptionsOrBuilder'
        reservedRangeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/ReservedRangeOrBuilder'
        reservedRangeCount:
          type: integer
          format: int32
        reservedNameCount:
          type: integer
          format: int32
        fieldCount:
          type: integer
          format: int32
        options:
          $ref: '#/components/schemas/MessageOptions'
        name:
          type: string
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    EnumDescriptor:
      type: object
      properties:
        index:
          type: integer
          format: int32
        proto:
          $ref: '#/components/schemas/EnumDescriptorProto'
        fullName:
          type: string
        file:
          $ref: '#/components/schemas/FileDescriptor'
        containingType:
          $ref: '#/components/schemas/Descriptor'
        values:
          type: array
          items:
            $ref: '#/components/schemas/EnumValueDescriptor'
        options:
          $ref: '#/components/schemas/EnumOptions'
        name:
          type: string
    EnumDescriptorProto:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserEnumDescriptorProto'
        defaultInstanceForType:
          $ref: '#/components/schemas/EnumDescriptorProto'
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        reservedRangeList:
          type: array
          items:
            $ref: '#/components/schemas/EnumReservedRange'
        reservedNameList:
          type: array
          properties:
            empty:
              type: boolean
          items:
            type: string
        optionsOrBuilder:
          $ref: '#/components/schemas/EnumOptionsOrBuilder'
        reservedRangeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/EnumReservedRangeOrBuilder'
        reservedRangeCount:
          type: integer
          format: int32
        reservedNameCount:
          type: integer
          format: int32
        valueCount:
          type: integer
          format: int32
        valueList:
          type: array
          items:
            $ref: '#/components/schemas/EnumValueDescriptorProto'
        valueOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/EnumValueDescriptorProtoOrBuilder'
        initialized:
          type: boolean
        options:
          $ref: '#/components/schemas/EnumOptions'
        name:
          type: string
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    EnumDescriptorProtoOrBuilder:
      type: object
      properties:
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        reservedRangeList:
          type: array
          items:
            $ref: '#/components/schemas/EnumReservedRange'
        reservedNameList:
          type: array
          items:
            type: string
        optionsOrBuilder:
          $ref: '#/components/schemas/EnumOptionsOrBuilder'
        reservedRangeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/EnumReservedRangeOrBuilder'
        reservedRangeCount:
          type: integer
          format: int32
        reservedNameCount:
          type: integer
          format: int32
        valueCount:
          type: integer
          format: int32
        valueList:
          type: array
          items:
            $ref: '#/components/schemas/EnumValueDescriptorProto'
        valueOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/EnumValueDescriptorProtoOrBuilder'
        options:
          $ref: '#/components/schemas/EnumOptions'
        name:
          type: string
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    EnumOptions:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        deprecated:
          type: boolean
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserEnumOptions'
        defaultInstanceForType:
          $ref: '#/components/schemas/EnumOptions'
        allowAlias:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        allFieldsRaw:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    EnumOptionsOrBuilder:
      type: object
      properties:
        deprecated:
          type: boolean
        allowAlias:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    EnumReservedRange:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        start:
          type: integer
          format: int32
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserEnumReservedRange'
        defaultInstanceForType:
          $ref: '#/components/schemas/EnumReservedRange'
        end:
          type: integer
          format: int32
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    EnumReservedRangeOrBuilder:
      type: object
      properties:
        start:
          type: integer
          format: int32
        end:
          type: integer
          format: int32
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    EnumValueDescriptor:
      type: object
      properties:
        index:
          type: integer
          format: int32
        proto:
          $ref: '#/components/schemas/EnumValueDescriptorProto'
        fullName:
          type: string
        file:
          $ref: '#/components/schemas/FileDescriptor'
        type:
          $ref: '#/components/schemas/EnumDescriptor'
        options:
          $ref: '#/components/schemas/EnumValueOptions'
        name:
          type: string
        number:
          type: integer
          format: int32
    EnumValueDescriptorProto:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserEnumValueDescriptorProto'
        defaultInstanceForType:
          $ref: '#/components/schemas/EnumValueDescriptorProto'
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        optionsOrBuilder:
          $ref: '#/components/schemas/EnumValueOptionsOrBuilder'
        initialized:
          type: boolean
        options:
          $ref: '#/components/schemas/EnumValueOptions'
        name:
          type: string
        number:
          type: integer
          format: int32
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    EnumValueDescriptorProtoOrBuilder:
      type: object
      properties:
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        optionsOrBuilder:
          $ref: '#/components/schemas/EnumValueOptionsOrBuilder'
        options:
          $ref: '#/components/schemas/EnumValueOptions'
        name:
          type: string
        number:
          type: integer
          format: int32
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    EnumValueOptions:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        deprecated:
          type: boolean
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserEnumValueOptions'
        defaultInstanceForType:
          $ref: '#/components/schemas/EnumValueOptions'
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        allFieldsRaw:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    EnumValueOptionsOrBuilder:
      type: object
      properties:
        deprecated:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    ExtensionRange:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        start:
          type: integer
          format: int32
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserExtensionRange'
        defaultInstanceForType:
          $ref: '#/components/schemas/ExtensionRange'
        optionsOrBuilder:
          $ref: '#/components/schemas/ExtensionRangeOptionsOrBuilder'
        end:
          type: integer
          format: int32
        initialized:
          type: boolean
        options:
          $ref: '#/components/schemas/ExtensionRangeOptions'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    ExtensionRangeOptions:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserExtensionRangeOptions'
        defaultInstanceForType:
          $ref: '#/components/schemas/ExtensionRangeOptions'
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        allFieldsRaw:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    ExtensionRangeOptionsOrBuilder:
      type: object
      properties:
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    ExtensionRangeOrBuilder:
      type: object
      properties:
        start:
          type: integer
          format: int32
        optionsOrBuilder:
          $ref: '#/components/schemas/ExtensionRangeOptionsOrBuilder'
        end:
          type: integer
          format: int32
        options:
          $ref: '#/components/schemas/ExtensionRangeOptions'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    FieldDescriptor:
      type: object
      properties:
        index:
          type: integer
          format: int32
        proto:
          $ref: '#/components/schemas/FieldDescriptorProto'
        fullName:
          type: string
        jsonName:
          type: string
        file:
          $ref: '#/components/schemas/FileDescriptor'
        extensionScope:
          $ref: '#/components/schemas/Descriptor'
        type:
          type: string
          enum:
            - DOUBLE
            - FLOAT
            - INT64
            - UINT64
            - INT32
            - FIXED64
            - FIXED32
            - BOOL
            - STRING
            - GROUP
            - MESSAGE
            - BYTES
            - UINT32
            - ENUM
            - SFIXED32
            - SFIXED64
            - SINT32
            - SINT64
        containingType:
          $ref: '#/components/schemas/Descriptor'
        messageType:
          $ref: '#/components/schemas/Descriptor'
        containingOneof:
          $ref: '#/components/schemas/OneofDescriptor'
        enumType:
          $ref: '#/components/schemas/EnumDescriptor'
        defaultValue:
          type: object
        repeated:
          type: boolean
        mapField:
          type: boolean
        extension:
          type: boolean
        liteType:
          type: string
          enum:
            - DOUBLE
            - FLOAT
            - INT64
            - UINT64
            - INT32
            - FIXED64
            - FIXED32
            - BOOL
            - STRING
            - GROUP
            - MESSAGE
            - BYTES
            - UINT32
            - ENUM
            - SFIXED32
            - SFIXED64
            - SINT32
            - SINT64
        liteJavaType:
          type: string
          enum:
            - INT
            - LONG
            - FLOAT
            - DOUBLE
            - BOOLEAN
            - STRING
            - BYTE_STRING
            - ENUM
            - MESSAGE
        packable:
          type: boolean
        realContainingOneof:
          $ref: '#/components/schemas/OneofDescriptor'
        javaType:
          type: string
          enum:
            - INT
            - LONG
            - FLOAT
            - DOUBLE
            - BOOLEAN
            - STRING
            - BYTE_STRING
            - ENUM
            - MESSAGE
        options:
          $ref: '#/components/schemas/FieldOptions'
        required:
          type: boolean
        optional:
          type: boolean
        packed:
          type: boolean
        name:
          type: string
        number:
          type: integer
          format: int32
    FieldDescriptorProto:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserFieldDescriptorProto'
        defaultInstanceForType:
          $ref: '#/components/schemas/FieldDescriptorProto'
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        jsonName:
          type: string
        proto3Optional:
          type: boolean
        oneofIndex:
          type: integer
          format: int32
        extendee:
          type: string
        optionsOrBuilder:
          $ref: '#/components/schemas/FieldOptionsOrBuilder'
        typeNameBytes:
          $ref: '#/components/schemas/ByteString'
        extendeeBytes:
          $ref: '#/components/schemas/ByteString'
        defaultValueBytes:
          $ref: '#/components/schemas/ByteString'
        jsonNameBytes:
          $ref: '#/components/schemas/ByteString'
        label:
          type: string
          enum:
            - LABEL_OPTIONAL
            - LABEL_REQUIRED
            - LABEL_REPEATED
        initialized:
          type: boolean
        options:
          $ref: '#/components/schemas/FieldOptions'
        name:
          type: string
        typeName:
          type: string
        type:
          type: string
          enum:
            - TYPE_DOUBLE
            - TYPE_FLOAT
            - TYPE_INT64
            - TYPE_UINT64
            - TYPE_INT32
            - TYPE_FIXED64
            - TYPE_FIXED32
            - TYPE_BOOL
            - TYPE_STRING
            - TYPE_GROUP
            - TYPE_MESSAGE
            - TYPE_BYTES
            - TYPE_UINT32
            - TYPE_ENUM
            - TYPE_SFIXED32
            - TYPE_SFIXED64
            - TYPE_SINT32
            - TYPE_SINT64
        defaultValue:
          type: string
        number:
          type: integer
          format: int32
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    FieldDescriptorProtoOrBuilder:
      type: object
      properties:
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        jsonName:
          type: string
        proto3Optional:
          type: boolean
        oneofIndex:
          type: integer
          format: int32
        extendee:
          type: string
        optionsOrBuilder:
          $ref: '#/components/schemas/FieldOptionsOrBuilder'
        typeNameBytes:
          $ref: '#/components/schemas/ByteString'
        extendeeBytes:
          $ref: '#/components/schemas/ByteString'
        defaultValueBytes:
          $ref: '#/components/schemas/ByteString'
        jsonNameBytes:
          $ref: '#/components/schemas/ByteString'
        label:
          type: string
          enum:
            - LABEL_OPTIONAL
            - LABEL_REQUIRED
            - LABEL_REPEATED
        options:
          $ref: '#/components/schemas/FieldOptions'
        name:
          type: string
        typeName:
          type: string
        type:
          type: string
          enum:
            - TYPE_DOUBLE
            - TYPE_FLOAT
            - TYPE_INT64
            - TYPE_UINT64
            - TYPE_INT32
            - TYPE_FIXED64
            - TYPE_FIXED32
            - TYPE_BOOL
            - TYPE_STRING
            - TYPE_GROUP
            - TYPE_MESSAGE
            - TYPE_BYTES
            - TYPE_UINT32
            - TYPE_ENUM
            - TYPE_SFIXED32
            - TYPE_SFIXED64
            - TYPE_SINT32
            - TYPE_SINT64
        defaultValue:
          type: string
        number:
          type: integer
          format: int32
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    FieldOptions:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        deprecated:
          type: boolean
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserFieldOptions'
        defaultInstanceForType:
          $ref: '#/components/schemas/FieldOptions'
        packed:
          type: boolean
        ctype:
          type: string
          enum:
            - STRING
            - CORD
            - STRING_PIECE
        jstype:
          type: string
          enum:
            - JS_NORMAL
            - JS_STRING
            - JS_NUMBER
        lazy:
          type: boolean
        weak:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        allFieldsRaw:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    FieldOptionsOrBuilder:
      type: object
      properties:
        deprecated:
          type: boolean
        packed:
          type: boolean
        ctype:
          type: string
          enum:
            - STRING
            - CORD
            - STRING_PIECE
        jstype:
          type: string
          enum:
            - JS_NORMAL
            - JS_STRING
            - JS_NUMBER
        lazy:
          type: boolean
        weak:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    FileDescriptor:
      type: object
      properties:
        proto:
          $ref: '#/components/schemas/FileDescriptorProto'
        messageTypes:
          type: array
          items:
            $ref: '#/components/schemas/Descriptor'
        enumTypes:
          type: array
          items:
            $ref: '#/components/schemas/EnumDescriptor'
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceDescriptor'
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptor'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/FileDescriptor'
        publicDependencies:
          type: array
          items:
            $ref: '#/components/schemas/FileDescriptor'
        syntax:
          type: string
          enum:
            - UNKNOWN
            - PROTO2
            - PROTO3
        options:
          $ref: '#/components/schemas/FileOptions'
        name:
          type: string
        package:
          type: string
        file:
          $ref: '#/components/schemas/FileDescriptor'
        fullName:
          type: string
    FileDescriptorProto:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserFileDescriptorProto'
        defaultInstanceForType:
          $ref: '#/components/schemas/FileDescriptorProto'
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        enumTypeCount:
          type: integer
          format: int32
        extensionCount:
          type: integer
          format: int32
        syntax:
          type: string
        extensionList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProto'
        extensionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptorProtoOrBuilder'
        enumTypeList:
          type: array
          items:
            $ref: '#/components/schemas/EnumDescriptorProto'
        enumTypeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/EnumDescriptorProtoOrBuilder'
        optionsOrBuilder:
          $ref: '#/components/schemas/FileOptionsOrBuilder'
        publicDependencyCount:
          type: integer
          format: int32
        dependencyCount:
          type: integer
          format: int32
        messageTypeCount:
          type: integer
          format: int32
        serviceCount:
          type: integer
          format: int32
        packageBytes:
          $ref: '#/components/schemas/ByteString'
        dependencyList:
          type: array
          properties:
            empty:
              type: boolean
          items:
            type: string
        publicDependencyList:
          type: array
          items:
            type: integer
            format: int32
        weakDependencyList:
          type: array
          items:
            type: integer
            format: int32
        weakDependencyCount:
          type: integer
          format: int32
        messageTypeList:
          type: array
          items:
            $ref: '#/components/schemas/DescriptorProto'
        messageTypeOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/DescriptorProtoOrBuilder'
        serviceList:
          type: array
          items:
            $ref: '#/components/schemas/ServiceDescriptorProto'
        serviceOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/ServiceDescriptorProtoOrBuilder'
        sourceCodeInfo:
          $ref: '#/components/schemas/SourceCodeInfo'
        sourceCodeInfoOrBuilder:
          $ref: '#/components/schemas/SourceCodeInfoOrBuilder'
        syntaxBytes:
          $ref: '#/components/schemas/ByteString'
        initialized:
          type: boolean
        options:
          $ref: '#/components/schemas/FileOptions'
        name:
          type: string
        package:
          type: string
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    FileOptions:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        deprecated:
          type: boolean
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserFileOptions'
        defaultInstanceForType:
          $ref: '#/components/schemas/FileOptions'
        javaStringCheckUtf8:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        javaPackage:
          type: string
        javaPackageBytes:
          $ref: '#/components/schemas/ByteString'
        javaOuterClassname:
          type: string
        javaOuterClassnameBytes:
          $ref: '#/components/schemas/ByteString'
        javaMultipleFiles:
          type: boolean
        javaGenerateEqualsAndHash:
          type: boolean
          deprecated: true
        optimizeFor:
          type: string
          enum:
            - SPEED
            - CODE_SIZE
            - LITE_RUNTIME
        goPackage:
          type: string
        goPackageBytes:
          $ref: '#/components/schemas/ByteString'
        ccGenericServices:
          type: boolean
        javaGenericServices:
          type: boolean
        pyGenericServices:
          type: boolean
        phpGenericServices:
          type: boolean
        ccEnableArenas:
          type: boolean
        objcClassPrefix:
          type: string
        objcClassPrefixBytes:
          $ref: '#/components/schemas/ByteString'
        csharpNamespace:
          type: string
        csharpNamespaceBytes:
          $ref: '#/components/schemas/ByteString'
        swiftPrefix:
          type: string
        swiftPrefixBytes:
          $ref: '#/components/schemas/ByteString'
        phpClassPrefix:
          type: string
        phpClassPrefixBytes:
          $ref: '#/components/schemas/ByteString'
        phpNamespace:
          type: string
        phpNamespaceBytes:
          $ref: '#/components/schemas/ByteString'
        phpMetadataNamespace:
          type: string
        phpMetadataNamespaceBytes:
          $ref: '#/components/schemas/ByteString'
        rubyPackage:
          type: string
        rubyPackageBytes:
          $ref: '#/components/schemas/ByteString'
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        allFieldsRaw:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    FileOptionsOrBuilder:
      type: object
      properties:
        deprecated:
          type: boolean
        javaStringCheckUtf8:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        javaPackage:
          type: string
        javaPackageBytes:
          $ref: '#/components/schemas/ByteString'
        javaOuterClassname:
          type: string
        javaOuterClassnameBytes:
          $ref: '#/components/schemas/ByteString'
        javaMultipleFiles:
          type: boolean
        javaGenerateEqualsAndHash:
          type: boolean
          deprecated: true
        optimizeFor:
          type: string
          enum:
            - SPEED
            - CODE_SIZE
            - LITE_RUNTIME
        goPackage:
          type: string
        goPackageBytes:
          $ref: '#/components/schemas/ByteString'
        ccGenericServices:
          type: boolean
        javaGenericServices:
          type: boolean
        pyGenericServices:
          type: boolean
        phpGenericServices:
          type: boolean
        ccEnableArenas:
          type: boolean
        objcClassPrefix:
          type: string
        objcClassPrefixBytes:
          $ref: '#/components/schemas/ByteString'
        csharpNamespace:
          type: string
        csharpNamespaceBytes:
          $ref: '#/components/schemas/ByteString'
        swiftPrefix:
          type: string
        swiftPrefixBytes:
          $ref: '#/components/schemas/ByteString'
        phpClassPrefix:
          type: string
        phpClassPrefixBytes:
          $ref: '#/components/schemas/ByteString'
        phpNamespace:
          type: string
        phpNamespaceBytes:
          $ref: '#/components/schemas/ByteString'
        phpMetadataNamespace:
          type: string
        phpMetadataNamespaceBytes:
          $ref: '#/components/schemas/ByteString'
        rubyPackage:
          type: string
        rubyPackageBytes:
          $ref: '#/components/schemas/ByteString'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    Location:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserLocation'
        defaultInstanceForType:
          $ref: '#/components/schemas/Location'
        pathCount:
          type: integer
          format: int32
        pathList:
          type: array
          items:
            type: integer
            format: int32
        spanList:
          type: array
          items:
            type: integer
            format: int32
        spanCount:
          type: integer
          format: int32
        leadingComments:
          type: string
        leadingCommentsBytes:
          $ref: '#/components/schemas/ByteString'
        trailingComments:
          type: string
        trailingCommentsBytes:
          $ref: '#/components/schemas/ByteString'
        leadingDetachedCommentsList:
          type: array
          properties:
            empty:
              type: boolean
          items:
            type: string
        leadingDetachedCommentsCount:
          type: integer
          format: int32
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    LocationOrBuilder:
      type: object
      properties:
        pathCount:
          type: integer
          format: int32
        pathList:
          type: array
          items:
            type: integer
            format: int32
        spanList:
          type: array
          items:
            type: integer
            format: int32
        spanCount:
          type: integer
          format: int32
        leadingComments:
          type: string
        leadingCommentsBytes:
          $ref: '#/components/schemas/ByteString'
        trailingComments:
          type: string
        trailingCommentsBytes:
          $ref: '#/components/schemas/ByteString'
        leadingDetachedCommentsList:
          type: array
          items:
            type: string
        leadingDetachedCommentsCount:
          type: integer
          format: int32
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    Message:
      type: object
      properties:
        parserForType:
          $ref: '#/components/schemas/ParserMessage'
        serializedSize:
          type: integer
          format: int32
        defaultInstanceForType:
          $ref: '#/components/schemas/MessageLite'
        initialized:
          type: boolean
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
    MessageLite:
      type: object
      properties:
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserMessageLite'
        defaultInstanceForType:
          $ref: '#/components/schemas/MessageLite'
        initialized:
          type: boolean
    MessageOptions:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        deprecated:
          type: boolean
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserMessageOptions'
        defaultInstanceForType:
          $ref: '#/components/schemas/MessageOptions'
        messageSetWireFormat:
          type: boolean
        mapEntry:
          type: boolean
        noStandardDescriptorAccessor:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        initialized:
          type: boolean
        allFields:
          type: object
          additionalProperties:
            type: object
        allFieldsRaw:
          type: object
          additionalProperties:
            type: object
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    MessageOptionsOrBuilder:
      type: object
      properties:
        deprecated:
          type: boolean
        messageSetWireFormat:
          type: boolean
        mapEntry:
          type: boolean
        noStandardDescriptorAccessor:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    MethodDescriptor:
      type: object
      properties:
        index:
          type: integer
          format: int32
        proto:
          $ref: '#/components/schemas/MethodDescriptorProto'
        fullName:
          type: string
        file:
          $ref: '#/components/schemas/FileDescriptor'
        service:
          $ref: '#/components/schemas/ServiceDescriptor'
        inputType:
          $ref: '#/components/schemas/Descriptor'
        outputType:
          $ref: '#/components/schemas/Descriptor'
        clientStreaming:
          type: boolean
        serverStreaming:
          type: boolean
        options:
          $ref: '#/components/schemas/MethodOptions'
        name:
          type: string
    MethodDescriptorProto:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        outputType:
          type: string
        inputType:
          type: string
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserMethodDescriptorProto'
        defaultInstanceForType:
          $ref: '#/components/schemas/MethodDescriptorProto'
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        optionsOrBuilder:
          $ref: '#/components/schemas/MethodOptionsOrBuilder'
        inputTypeBytes:
          $ref: '#/components/schemas/ByteString'
        outputTypeBytes:
          $ref: '#/components/schemas/ByteString'
        clientStreaming:
          type: boolean
        serverStreaming:
          type: boolean
        initialized:
          type: boolean
        options:
          $ref: '#/components/schemas/MethodOptions'
        name:
          type: string
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    MethodDescriptorProtoOrBuilder:
      type: object
      properties:
        outputType:
          type: string
        inputType:
          type: string
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        optionsOrBuilder:
          $ref: '#/components/schemas/MethodOptionsOrBuilder'
        inputTypeBytes:
          $ref: '#/components/schemas/ByteString'
        outputTypeBytes:
          $ref: '#/components/schemas/ByteString'
        clientStreaming:
          type: boolean
        serverStreaming:
          type: boolean
        options:
          $ref: '#/components/schemas/MethodOptions'
        name:
          type: string
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    MethodOptions:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        deprecated:
          type: boolean
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserMethodOptions'
        defaultInstanceForType:
          $ref: '#/components/schemas/MethodOptions'
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        idempotencyLevel:
          type: string
          enum:
            - IDEMPOTENCY_UNKNOWN
            - NO_SIDE_EFFECTS
            - IDEMPOTENT
        initialized:
          type: boolean
        allFields:
          type: object
          additionalProperties:
            type: object
        allFieldsRaw:
          type: object
          additionalProperties:
            type: object
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    MethodOptionsOrBuilder:
      type: object
      properties:
        deprecated:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        idempotencyLevel:
          type: string
          enum:
            - IDEMPOTENCY_UNKNOWN
            - NO_SIDE_EFFECTS
            - IDEMPOTENT
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    NamePart:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserNamePart'
        defaultInstanceForType:
          $ref: '#/components/schemas/NamePart'
        namePart:
          type: string
        namePartBytes:
          $ref: '#/components/schemas/ByteString'
        isExtension:
          type: boolean
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    NamePartOrBuilder:
      type: object
      properties:
        namePart:
          type: string
        namePartBytes:
          $ref: '#/components/schemas/ByteString'
        isExtension:
          type: boolean
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    OneofDescriptor:
      type: object
      properties:
        index:
          type: integer
          format: int32
        proto:
          $ref: '#/components/schemas/OneofDescriptorProto'
        fullName:
          type: string
        file:
          $ref: '#/components/schemas/FileDescriptor'
        containingType:
          $ref: '#/components/schemas/Descriptor'
        fieldCount:
          type: integer
          format: int32
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldDescriptor'
        options:
          $ref: '#/components/schemas/OneofOptions'
        name:
          type: string
        synthetic:
          type: boolean
    OneofDescriptorProto:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserOneofDescriptorProto'
        defaultInstanceForType:
          $ref: '#/components/schemas/OneofDescriptorProto'
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        optionsOrBuilder:
          $ref: '#/components/schemas/OneofOptionsOrBuilder'
        initialized:
          type: boolean
        options:
          $ref: '#/components/schemas/OneofOptions'
        name:
          type: string
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    OneofDescriptorProtoOrBuilder:
      type: object
      properties:
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        optionsOrBuilder:
          $ref: '#/components/schemas/OneofOptionsOrBuilder'
        options:
          $ref: '#/components/schemas/OneofOptions'
        name:
          type: string
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    OneofOptions:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserOneofOptions'
        defaultInstanceForType:
          $ref: '#/components/schemas/OneofOptions'
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        allFieldsRaw:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    OneofOptionsOrBuilder:
      type: object
      properties:
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    Parser:
      type: object
    ParserAny:
      type: object
    ParserDescriptorProto:
      type: object
    ParserEnumDescriptorProto:
      type: object
    ParserEnumOptions:
      type: object
    ParserEnumReservedRange:
      type: object
    ParserEnumValueDescriptorProto:
      type: object
    ParserEnumValueOptions:
      type: object
    ParserExtensionRange:
      type: object
    ParserExtensionRangeOptions:
      type: object
    ParserFieldDescriptorProto:
      type: object
    ParserFieldOptions:
      type: object
    ParserFileDescriptorProto:
      type: object
    ParserFileOptions:
      type: object
    ParserLocation:
      type: object
    ParserMessage:
      type: object
    ParserMessageLite:
      type: object
    ParserMessageOptions:
      type: object
    ParserMethodDescriptorProto:
      type: object
    ParserMethodOptions:
      type: object
    ParserNamePart:
      type: object
    ParserOneofDescriptorProto:
      type: object
    ParserOneofOptions:
      type: object
    ParserReservedRange:
      type: object
    ParserServiceDescriptorProto:
      type: object
    ParserServiceOptions:
      type: object
    ParserSourceCodeInfo:
      type: object
    ParserUninterpretedOption:
      type: object
    ReservedRange:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        start:
          type: integer
          format: int32
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserReservedRange'
        defaultInstanceForType:
          $ref: '#/components/schemas/ReservedRange'
        end:
          type: integer
          format: int32
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    ReservedRangeOrBuilder:
      type: object
      properties:
        start:
          type: integer
          format: int32
        end:
          type: integer
          format: int32
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    ServiceDescriptor:
      type: object
      properties:
        index:
          type: integer
          format: int32
        proto:
          $ref: '#/components/schemas/ServiceDescriptorProto'
        fullName:
          type: string
        file:
          $ref: '#/components/schemas/FileDescriptor'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/MethodDescriptor'
        options:
          $ref: '#/components/schemas/ServiceOptions'
        name:
          type: string
    ServiceDescriptorProto:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserServiceDescriptorProto'
        defaultInstanceForType:
          $ref: '#/components/schemas/ServiceDescriptorProto'
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        optionsOrBuilder:
          $ref: '#/components/schemas/ServiceOptionsOrBuilder'
        methodCount:
          type: integer
          format: int32
        methodOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/MethodDescriptorProtoOrBuilder'
        methodList:
          type: array
          items:
            $ref: '#/components/schemas/MethodDescriptorProto'
        initialized:
          type: boolean
        options:
          $ref: '#/components/schemas/ServiceOptions'
        name:
          type: string
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    ServiceDescriptorProtoOrBuilder:
      type: object
      properties:
        nameBytes:
          $ref: '#/components/schemas/ByteString'
        optionsOrBuilder:
          $ref: '#/components/schemas/ServiceOptionsOrBuilder'
        methodCount:
          type: integer
          format: int32
        methodOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/MethodDescriptorProtoOrBuilder'
        methodList:
          type: array
          items:
            $ref: '#/components/schemas/MethodDescriptorProto'
        options:
          $ref: '#/components/schemas/ServiceOptions'
        name:
          type: string
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    ServiceOptions:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        deprecated:
          type: boolean
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserServiceOptions'
        defaultInstanceForType:
          $ref: '#/components/schemas/ServiceOptions'
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        allFieldsRaw:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    ServiceOptionsOrBuilder:
      type: object
      properties:
        deprecated:
          type: boolean
        uninterpretedOptionList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOption'
        uninterpretedOptionOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/UninterpretedOptionOrBuilder'
        uninterpretedOptionCount:
          type: integer
          format: int32
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    SkipTaskRequest:
      type: object
      properties:
        taskInput:
          type: object
          additionalProperties:
            type: object
        taskOutput:
          type: object
          additionalProperties:
            type: object
        taskInputMessage:
          $ref: '#/components/schemas/Any'
        taskOutputMessage:
          $ref: '#/components/schemas/Any'
    SourceCodeInfo:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserSourceCodeInfo'
        defaultInstanceForType:
          $ref: '#/components/schemas/SourceCodeInfo'
        locationCount:
          type: integer
          format: int32
        locationList:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        locationOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/LocationOrBuilder'
        initialized:
          type: boolean
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    SourceCodeInfoOrBuilder:
      type: object
      properties:
        locationCount:
          type: integer
          format: int32
        locationList:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        locationOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/LocationOrBuilder'
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    UninterpretedOption:
      type: object
      properties:
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/ParserUninterpretedOption'
        defaultInstanceForType:
          $ref: '#/components/schemas/UninterpretedOption'
        stringValue:
          $ref: '#/components/schemas/ByteString'
        nameList:
          type: array
          items:
            $ref: '#/components/schemas/NamePart'
        nameOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/NamePartOrBuilder'
        identifierValue:
          type: string
        identifierValueBytes:
          $ref: '#/components/schemas/ByteString'
        positiveIntValue:
          type: integer
          format: int64
        negativeIntValue:
          type: integer
          format: int64
        aggregateValue:
          type: string
        aggregateValueBytes:
          $ref: '#/components/schemas/ByteString'
        initialized:
          type: boolean
        doubleValue:
          type: number
          format: double
        nameCount:
          type: integer
          format: int32
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        memoizedSerializedSize:
          type: integer
          format: int32
          writeOnly: true
    UninterpretedOptionOrBuilder:
      type: object
      properties:
        stringValue:
          $ref: '#/components/schemas/ByteString'
        nameList:
          type: array
          items:
            $ref: '#/components/schemas/NamePart'
        nameOrBuilderList:
          type: array
          items:
            $ref: '#/components/schemas/NamePartOrBuilder'
        identifierValue:
          type: string
        identifierValueBytes:
          $ref: '#/components/schemas/ByteString'
        positiveIntValue:
          type: integer
          format: int64
        negativeIntValue:
          type: integer
          format: int64
        aggregateValue:
          type: string
        aggregateValueBytes:
          $ref: '#/components/schemas/ByteString'
        doubleValue:
          type: number
          format: double
        nameCount:
          type: integer
          format: int32
        unknownFields:
          $ref: '#/components/schemas/UnknownFieldSet'
        defaultInstanceForType:
          $ref: '#/components/schemas/Message'
        descriptorForType:
          $ref: '#/components/schemas/Descriptor'
        initializationErrorString:
          type: string
        allFields:
          type: object
          additionalProperties:
            type: object
        initialized:
          type: boolean
    UnknownFieldSet:
      type: object
      properties:
        serializedSize:
          type: integer
          format: int32
        parserForType:
          $ref: '#/components/schemas/Parser'
        defaultInstanceForType:
          $ref: '#/components/schemas/UnknownFieldSet'
        serializedSizeAsMessageSet:
          type: integer
          format: int32
        initialized:
          type: boolean
    RerunWorkflowRequest:
      type: object
      properties:
        reRunFromWorkflowId:
          type: string
        workflowInput:
          type: object
          additionalProperties:
            type: object
        reRunFromTaskId:
          type: string
        taskInput:
          type: object
          additionalProperties:
            type: object
        correlationId:
          type: string
    SearchResultWorkflow:
      type: object
      properties:
        totalHits:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
    SearchResultWorkflowSummary:
      type: object
      properties:
        totalHits:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowSummary'
    WorkflowSummary:
      type: object
      properties:
        workflowType:
          type: string
        version:
          type: integer
          format: int32
        workflowId:
          type: string
        correlationId:
          type: string
        startTime:
          type: string
        updateTime:
          type: string
        endTime:
          type: string
        status:
          type: string
          enum:
            - RUNNING
            - COMPLETED
            - FAILED
            - TIMED_OUT
            - TERMINATED
            - PAUSED
        input:
          type: string
        output:
          type: string
        reasonForIncompletion:
          type: string
        executionTime:
          type: integer
          format: int64
        event:
          type: string
        failedReferenceTaskNames:
          type: string
        externalInputPayloadStoragePath:
          type: string
        externalOutputPayloadStoragePath:
          type: string
        priority:
          type: integer
          format: int32
        inputSize:
          type: integer
          format: int64
        outputSize:
          type: integer
          format: int64
    ExternalStorageLocation:
      type: object
      properties:
        uri:
          type: string
        path:
          type: string
    BulkResponse:
      type: object
      properties:
        bulkErrorResults:
          type: object
          additionalProperties:
            type: string
        bulkSuccessfulResults:
          type: array
          items:
            type: string
    SearchResultTask:
      type: object
      properties:
        totalHits:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    TaskExecLog:
      type: object
      properties:
        log:
          type: string
        taskId:
          type: string
        createdTime:
          type: integer
          format: int64
    TaskResult:
      required:
        - taskId
        - workflowInstanceId
      type: object
      properties:
        workflowInstanceId:
          type: string
        taskId:
          type: string
        reasonForIncompletion:
          type: string
        callbackAfterSeconds:
          type: integer
          format: int64
        workerId:
          type: string
        status:
          type: string
          enum:
            - IN_PROGRESS
            - FAILED
            - FAILED_WITH_TERMINAL_ERROR
            - COMPLETED
        outputData:
          type: object
          additionalProperties:
            type: object
        outputMessage:
          $ref: '#/components/schemas/Any'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/TaskExecLog'
        externalOutputPayloadStoragePath:
          type: string
        subWorkflowId:
          type: string
    PollData:
      type: object
      properties:
        queueName:
          type: string
        domain:
          type: string
        workerId:
          type: string
        lastPollTime:
          type: integer
          format: int64
    SearchResultTaskSummary:
      type: object
      properties:
        totalHits:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/TaskSummary'
    TaskSummary:
      type: object
      properties:
        workflowId:
          type: string
        workflowType:
          type: string
        correlationId:
          type: string
        scheduledTime:
          type: string
        startTime:
          type: string
        updateTime:
          type: string
        endTime:
          type: string
        status:
          type: string
          enum:
            - IN_PROGRESS
            - CANCELED
            - FAILED
            - FAILED_WITH_TERMINAL_ERROR
            - COMPLETED
            - COMPLETED_WITH_ERRORS
            - SCHEDULED
            - TIMED_OUT
            - SKIPPED
        reasonForIncompletion:
          type: string
        executionTime:
          type: integer
          format: int64
        queueWaitTime:
          type: integer
          format: int64
        taskDefName:
          type: string
        taskType:
          type: string
        input:
          type: string
        output:
          type: string
        taskId:
          type: string
        externalInputPayloadStoragePath:
          type: string
        externalOutputPayloadStoragePath:
          type: string
        workflowPriority:
          type: integer
          format: int32
